
FreeRTOS_SecureIOToggle_TrustZone_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048d8  08040200  08040200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08044ad8  08044ad8  00014ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08044bc0  08044bc0  00018028  2**0
                  CONTENTS
  4 .ARM          00000000  08044bc0  08044bc0  00018028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08044bc0  08044bc0  00018028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08044bc0  08044bc0  00014bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08044bc8  08044bc8  00014bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20018000  08044bd0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003768  20018028  08044bf8  00018028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001b790  08044bf8  0001b790  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00018028  2**0
                  CONTENTS, READONLY
 12 .debug_line   000123f6  00000000  00000000  0001805e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000199c5  00000000  00000000  0002a454  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002e92  00000000  00000000  00043e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001480  00000000  00000000  00046cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00113296  00000000  00000000  00048130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001308  00000000  00000000  0015b3c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  000296e0  00000000  00000000  0015c6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00185db0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b0  00000000  00000000  00185e2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08040200 <__do_global_dtors_aux>:
 8040200:	b510      	push	{r4, lr}
 8040202:	4c05      	ldr	r4, [pc, #20]	; (8040218 <__do_global_dtors_aux+0x18>)
 8040204:	7823      	ldrb	r3, [r4, #0]
 8040206:	b933      	cbnz	r3, 8040216 <__do_global_dtors_aux+0x16>
 8040208:	4b04      	ldr	r3, [pc, #16]	; (804021c <__do_global_dtors_aux+0x1c>)
 804020a:	b113      	cbz	r3, 8040212 <__do_global_dtors_aux+0x12>
 804020c:	4804      	ldr	r0, [pc, #16]	; (8040220 <__do_global_dtors_aux+0x20>)
 804020e:	e000      	b.n	8040212 <__do_global_dtors_aux+0x12>
 8040210:	bf00      	nop
 8040212:	2301      	movs	r3, #1
 8040214:	7023      	strb	r3, [r4, #0]
 8040216:	bd10      	pop	{r4, pc}
 8040218:	20018028 	.word	0x20018028
 804021c:	00000000 	.word	0x00000000
 8040220:	08044a2c 	.word	0x08044a2c

08040224 <frame_dummy>:
 8040224:	b508      	push	{r3, lr}
 8040226:	4b03      	ldr	r3, [pc, #12]	; (8040234 <frame_dummy+0x10>)
 8040228:	b11b      	cbz	r3, 8040232 <frame_dummy+0xe>
 804022a:	4903      	ldr	r1, [pc, #12]	; (8040238 <frame_dummy+0x14>)
 804022c:	4803      	ldr	r0, [pc, #12]	; (804023c <frame_dummy+0x18>)
 804022e:	e000      	b.n	8040232 <frame_dummy+0xe>
 8040230:	bf00      	nop
 8040232:	bd08      	pop	{r3, pc}
 8040234:	00000000 	.word	0x00000000
 8040238:	2001802c 	.word	0x2001802c
 804023c:	08044a2c 	.word	0x08044a2c

08040240 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8040240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040278 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8040244:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8040246:	e003      	b.n	8040250 <LoopCopyDataInit>

08040248 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8040248:	4b0c      	ldr	r3, [pc, #48]	; (804027c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 804024a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 804024c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 804024e:	3104      	adds	r1, #4

08040250 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8040250:	480b      	ldr	r0, [pc, #44]	; (8040280 <LoopForever+0xa>)
	ldr	r3, =_edata
 8040252:	4b0c      	ldr	r3, [pc, #48]	; (8040284 <LoopForever+0xe>)
	adds	r2, r0, r1
 8040254:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8040256:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8040258:	d3f6      	bcc.n	8040248 <CopyDataInit>
	ldr	r2, =_sbss
 804025a:	4a0b      	ldr	r2, [pc, #44]	; (8040288 <LoopForever+0x12>)
	b	LoopFillZerobss
 804025c:	e002      	b.n	8040264 <LoopFillZerobss>

0804025e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 804025e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8040260:	f842 3b04 	str.w	r3, [r2], #4

08040264 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8040264:	4b09      	ldr	r3, [pc, #36]	; (804028c <LoopForever+0x16>)
	cmp	r2, r3
 8040266:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8040268:	d3f9      	bcc.n	804025e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 804026a:	f000 fa27 	bl	80406bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 804026e:	f004 fba5 	bl	80449bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8040272:	f000 f84f 	bl	8040314 <main>

08040276 <LoopForever>:

LoopForever:
    b LoopForever
 8040276:	e7fe      	b.n	8040276 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8040278:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 804027c:	08044bd0 	.word	0x08044bd0
	ldr	r0, =_sdata
 8040280:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 8040284:	20018028 	.word	0x20018028
	ldr	r2, =_sbss
 8040288:	20018028 	.word	0x20018028
	ldr	r3, = _ebss
 804028c:	2001b790 	.word	0x2001b790

08040290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8040290:	e7fe      	b.n	8040290 <ADC1_2_IRQHandler>

08040292 <work>:
#define HERZSCHLAG_BRADYKARDIE 500			//the heartbeat is too slow

void sinuatrial_node(int mode);				//the green LED lights up, simulates normal heartbeat
void pacemaker(void);						//the red LED lights up, simulates pacemaker triggered heartbeat

int work(void){
 8040292:	b580      	push	{r7, lr}
 8040294:	b082      	sub	sp, #8
 8040296:	af00      	add	r7, sp, #0
	//pacemaker();
	/*Test der verschiedenen Modi*/
	sinuatrial_node(2);
 8040298:	2002      	movs	r0, #2
 804029a:	f000 f813 	bl	80402c4 <sinuatrial_node>
	for(int i = 0; i < 20; ++i){
 804029e:	2300      	movs	r3, #0
 80402a0:	607b      	str	r3, [r7, #4]
 80402a2:	e008      	b.n	80402b6 <work+0x24>
		osDelay(100);
 80402a4:	2064      	movs	r0, #100	; 0x64
 80402a6:	f002 f8b3 	bl	8042410 <osDelay>
		sinuatrial_node(1);
 80402aa:	2001      	movs	r0, #1
 80402ac:	f000 f80a 	bl	80402c4 <sinuatrial_node>
	for(int i = 0; i < 20; ++i){
 80402b0:	687b      	ldr	r3, [r7, #4]
 80402b2:	3301      	adds	r3, #1
 80402b4:	607b      	str	r3, [r7, #4]
 80402b6:	687b      	ldr	r3, [r7, #4]
 80402b8:	2b13      	cmp	r3, #19
 80402ba:	ddf3      	ble.n	80402a4 <work+0x12>
	}
	sinuatrial_node(0);
 80402bc:	2000      	movs	r0, #0
 80402be:	f000 f801 	bl	80402c4 <sinuatrial_node>
	while(1){
 80402c2:	e7fe      	b.n	80402c2 <work+0x30>

080402c4 <sinuatrial_node>:
/* Idea: There are two modes:
 * 0: Heart beats without pacemaker, might be used for debugging purpose or for check by the pacemaker, works indefinitely
 * 1: Heart beats with pacemaker, beats only once to stabilize heartbeat
 * 2: Venticular Fibrillation*/

void sinuatrial_node(int mode){
 80402c4:	b580      	push	{r7, lr}
 80402c6:	b084      	sub	sp, #16
 80402c8:	af00      	add	r7, sp, #0
 80402ca:	6078      	str	r0, [r7, #4]
	if(mode == 0){
 80402cc:	687b      	ldr	r3, [r7, #4]
 80402ce:	2b00      	cmp	r3, #0
 80402d0:	d106      	bne.n	80402e0 <sinuatrial_node+0x1c>
		while(1){
			SECURE_LEDToggle();
 80402d2:	f004 fbd9 	bl	8044a88 <__SECURE_LEDToggle_veneer>
			osDelay(750);
 80402d6:	f240 20ee 	movw	r0, #750	; 0x2ee
 80402da:	f002 f899 	bl	8042410 <osDelay>
		while(1){
 80402de:	e7f8      	b.n	80402d2 <sinuatrial_node+0xe>
		}
	}
	if(mode == 1){
 80402e0:	687b      	ldr	r3, [r7, #4]
 80402e2:	2b01      	cmp	r3, #1
 80402e4:	d101      	bne.n	80402ea <sinuatrial_node+0x26>
		SECURE_LEDToggle();
 80402e6:	f004 fbcf 	bl	8044a88 <__SECURE_LEDToggle_veneer>
	}
	if(mode == 2){
 80402ea:	687b      	ldr	r3, [r7, #4]
 80402ec:	2b02      	cmp	r3, #2
 80402ee:	d10d      	bne.n	804030c <sinuatrial_node+0x48>
		for(int i = 0; i < 100; ++i){
 80402f0:	2300      	movs	r3, #0
 80402f2:	60fb      	str	r3, [r7, #12]
 80402f4:	e007      	b.n	8040306 <sinuatrial_node+0x42>
			SECURE_LEDToggle();
 80402f6:	f004 fbc7 	bl	8044a88 <__SECURE_LEDToggle_veneer>
			osDelay(120);
 80402fa:	2078      	movs	r0, #120	; 0x78
 80402fc:	f002 f888 	bl	8042410 <osDelay>
		for(int i = 0; i < 100; ++i){
 8040300:	68fb      	ldr	r3, [r7, #12]
 8040302:	3301      	adds	r3, #1
 8040304:	60fb      	str	r3, [r7, #12]
 8040306:	68fb      	ldr	r3, [r7, #12]
 8040308:	2b63      	cmp	r3, #99	; 0x63
 804030a:	ddf4      	ble.n	80402f6 <sinuatrial_node+0x32>
		}
	}
}
 804030c:	bf00      	nop
 804030e:	3710      	adds	r7, #16
 8040310:	46bd      	mov	sp, r7
 8040312:	bd80      	pop	{r7, pc}

08040314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040314:	b580      	push	{r7, lr}
 8040316:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040318:	f000 f9e4 	bl	80406e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 804031c:	f000 f832 	bl	8040384 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Register SecureFault callback defined in non-secure and to be called by secure handler */
  SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
 8040320:	4910      	ldr	r1, [pc, #64]	; (8040364 <main+0x50>)
 8040322:	2000      	movs	r0, #0
 8040324:	f004 fb90 	bl	8044a48 <__SECURE_RegisterCallback_veneer>

  /* Register SecureError callback defined in non-secure and to be called by secure handler */
  SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
 8040328:	490f      	ldr	r1, [pc, #60]	; (8040368 <main+0x54>)
 804032a:	2001      	movs	r0, #1
 804032c:	f004 fb8c 	bl	8044a48 <__SECURE_RegisterCallback_veneer>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_MBEDTLS_Init();
 8040330:	f000 f8b7 	bl	80404a2 <MX_MBEDTLS_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize PA.09 to drive external LED (LED3) */
  BSP_LED_Init(LED3);
 8040334:	2002      	movs	r0, #2
 8040336:	f000 f949 	bl	80405cc <BSP_LED_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 804033a:	f001 ff59 	bl	80421f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Work_Thread */
  Work_ThreadHandle = osThreadNew(Start_Work, NULL, &Work_Thread_attributes);
 804033e:	4a0b      	ldr	r2, [pc, #44]	; (804036c <main+0x58>)
 8040340:	2100      	movs	r1, #0
 8040342:	480b      	ldr	r0, [pc, #44]	; (8040370 <main+0x5c>)
 8040344:	f001 ffbe 	bl	80422c4 <osThreadNew>
 8040348:	4602      	mov	r2, r0
 804034a:	4b0a      	ldr	r3, [pc, #40]	; (8040374 <main+0x60>)
 804034c:	601a      	str	r2, [r3, #0]

  /* creation of Connection_Thre */
  Connection_ThreHandle = osThreadNew(Establish_Connection, NULL, &Connection_Thre_attributes);
 804034e:	4a0a      	ldr	r2, [pc, #40]	; (8040378 <main+0x64>)
 8040350:	2100      	movs	r1, #0
 8040352:	480a      	ldr	r0, [pc, #40]	; (804037c <main+0x68>)
 8040354:	f001 ffb6 	bl	80422c4 <osThreadNew>
 8040358:	4602      	mov	r2, r0
 804035a:	4b09      	ldr	r3, [pc, #36]	; (8040380 <main+0x6c>)
 804035c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 804035e:	f001 ff7b 	bl	8042258 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8040362:	e7fe      	b.n	8040362 <main+0x4e>
 8040364:	08040427 	.word	0x08040427
 8040368:	08040433 	.word	0x08040433
 804036c:	08044b1c 	.word	0x08044b1c
 8040370:	0804043f 	.word	0x0804043f
 8040374:	2001b6fc 	.word	0x2001b6fc
 8040378:	08044b40 	.word	0x08044b40
 804037c:	08040461 	.word	0x08040461
 8040380:	2001b6f8 	.word	0x2001b6f8

08040384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040384:	b580      	push	{r7, lr}
 8040386:	b098      	sub	sp, #96	; 0x60
 8040388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 804038a:	f107 0318 	add.w	r3, r7, #24
 804038e:	2248      	movs	r2, #72	; 0x48
 8040390:	2100      	movs	r1, #0
 8040392:	4618      	mov	r0, r3
 8040394:	f004 fb41 	bl	8044a1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040398:	1d3b      	adds	r3, r7, #4
 804039a:	2200      	movs	r2, #0
 804039c:	601a      	str	r2, [r3, #0]
 804039e:	605a      	str	r2, [r3, #4]
 80403a0:	609a      	str	r2, [r3, #8]
 80403a2:	60da      	str	r2, [r3, #12]
 80403a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80403a6:	2000      	movs	r0, #0
 80403a8:	f000 fc76 	bl	8040c98 <HAL_PWREx_ControlVoltageScaling>
 80403ac:	4603      	mov	r3, r0
 80403ae:	2b00      	cmp	r3, #0
 80403b0:	d001      	beq.n	80403b6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80403b2:	f000 f86d 	bl	8040490 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80403b6:	2310      	movs	r3, #16
 80403b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80403ba:	2301      	movs	r3, #1
 80403bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80403be:	2300      	movs	r3, #0
 80403c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80403c2:	2360      	movs	r3, #96	; 0x60
 80403c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80403c6:	2302      	movs	r3, #2
 80403c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80403ca:	2301      	movs	r3, #1
 80403cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80403ce:	2301      	movs	r3, #1
 80403d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80403d2:	2337      	movs	r3, #55	; 0x37
 80403d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80403d6:	2307      	movs	r3, #7
 80403d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80403da:	2302      	movs	r3, #2
 80403dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80403de:	2302      	movs	r3, #2
 80403e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80403e2:	f107 0318 	add.w	r3, r7, #24
 80403e6:	4618      	mov	r0, r3
 80403e8:	f000 fcd6 	bl	8040d98 <HAL_RCC_OscConfig>
 80403ec:	4603      	mov	r3, r0
 80403ee:	2b00      	cmp	r3, #0
 80403f0:	d001      	beq.n	80403f6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80403f2:	f000 f84d 	bl	8040490 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80403f6:	230f      	movs	r3, #15
 80403f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80403fa:	2303      	movs	r3, #3
 80403fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80403fe:	2300      	movs	r3, #0
 8040400:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8040402:	2300      	movs	r3, #0
 8040404:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8040406:	2300      	movs	r3, #0
 8040408:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 804040a:	1d3b      	adds	r3, r7, #4
 804040c:	2105      	movs	r1, #5
 804040e:	4618      	mov	r0, r3
 8040410:	f001 f924 	bl	804165c <HAL_RCC_ClockConfig>
 8040414:	4603      	mov	r3, r0
 8040416:	2b00      	cmp	r3, #0
 8040418:	d001      	beq.n	804041e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 804041a:	f000 f839 	bl	8040490 <Error_Handler>
  }
}
 804041e:	bf00      	nop
 8040420:	3760      	adds	r7, #96	; 0x60
 8040422:	46bd      	mov	sp, r7
 8040424:	bd80      	pop	{r7, pc}

08040426 <SecureFault_Callback>:
  *         done by the non-secure application with non-secure callable API
  *         SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
  * @retval None
  */
void SecureFault_Callback(void)
{
 8040426:	b580      	push	{r7, lr}
 8040428:	af00      	add	r7, sp, #0
  /* Go to error infinite loop when Secure fault generated by IDAU/SAU check */
  /* because of illegal access */
  Error_Handler();
 804042a:	f000 f831 	bl	8040490 <Error_Handler>
}
 804042e:	bf00      	nop
 8040430:	bd80      	pop	{r7, pc}

08040432 <SecureError_Callback>:
  *         done by the non-secure application with non-secure callable API
  *         SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
  * @retval None
  */
void SecureError_Callback(void)
{
 8040432:	b580      	push	{r7, lr}
 8040434:	af00      	add	r7, sp, #0
  /* Go to error infinite loop when Secure error generated by GTZC check */
  /* because of illegal access */
  Error_Handler();
 8040436:	f000 f82b 	bl	8040490 <Error_Handler>
}
 804043a:	bf00      	nop
 804043c:	bd80      	pop	{r7, pc}

0804043e <Start_Work>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Work */
void Start_Work(void *argument)
{
 804043e:	b580      	push	{r7, lr}
 8040440:	b084      	sub	sp, #16
 8040442:	af00      	add	r7, sp, #0
 8040444:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  (void) argument;
  
  portALLOCATE_SECURE_CONTEXT (configMINIMAL_SECURE_STACK_SIZE);
 8040446:	f44f 6080 	mov.w	r0, #1024	; 0x400
 804044a:	f002 fcd5 	bl	8042df8 <vPortAllocateSecureContext>
  int error = work();
 804044e:	f7ff ff20 	bl	8040292 <work>
 8040452:	60f8      	str	r0, [r7, #12]
  for (;;)
  {
    /* Toggle secure LED4 (LED_GREEN)
     * Toggling he secure LED is con-
     * sidered to be work*/
    SECURE_LEDToggle();					//against our previous assumptions LED1 cannot be toggled from non-secure area
 8040454:	f004 fb18 	bl	8044a88 <__SECURE_LEDToggle_veneer>
    osDelay(200);
 8040458:	20c8      	movs	r0, #200	; 0xc8
 804045a:	f001 ffd9 	bl	8042410 <osDelay>
    SECURE_LEDToggle();					//against our previous assumptions LED1 cannot be toggled from non-secure area
 804045e:	e7f9      	b.n	8040454 <Start_Work+0x16>

08040460 <Establish_Connection>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Establish_Connection */
void Establish_Connection(void *argument)
{
 8040460:	b480      	push	{r7}
 8040462:	b083      	sub	sp, #12
 8040464:	af00      	add	r7, sp, #0
 8040466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Establish_Connection */
  /* Infinite loop */
  for(;;)
 8040468:	e7fe      	b.n	8040468 <Establish_Connection+0x8>
	...

0804046c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 804046c:	b580      	push	{r7, lr}
 804046e:	b082      	sub	sp, #8
 8040470:	af00      	add	r7, sp, #0
 8040472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8040474:	687b      	ldr	r3, [r7, #4]
 8040476:	681b      	ldr	r3, [r3, #0]
 8040478:	4a04      	ldr	r2, [pc, #16]	; (804048c <HAL_TIM_PeriodElapsedCallback+0x20>)
 804047a:	4293      	cmp	r3, r2
 804047c:	d101      	bne.n	8040482 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 804047e:	f000 f94b 	bl	8040718 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8040482:	bf00      	nop
 8040484:	3708      	adds	r7, #8
 8040486:	46bd      	mov	sp, r7
 8040488:	bd80      	pop	{r7, pc}
 804048a:	bf00      	nop
 804048c:	40001000 	.word	0x40001000

08040490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040490:	b580      	push	{r7, lr}
 8040492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* LED3 on */
  /* Infinite loop */
  while (1)
  {
	  BSP_LED_Toggle(LED3);
 8040494:	2002      	movs	r0, #2
 8040496:	f000 f8f7 	bl	8040688 <BSP_LED_Toggle>
	  osDelay(100);
 804049a:	2064      	movs	r0, #100	; 0x64
 804049c:	f001 ffb8 	bl	8042410 <osDelay>
	  BSP_LED_Toggle(LED3);
 80404a0:	e7f8      	b.n	8040494 <Error_Handler+0x4>

080404a2 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 80404a2:	b480      	push	{r7}
 80404a4:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 80404a6:	bf00      	nop
 80404a8:	46bd      	mov	sp, r7
 80404aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80404ae:	4770      	bx	lr

080404b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80404b0:	b580      	push	{r7, lr}
 80404b2:	b082      	sub	sp, #8
 80404b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80404b6:	4b11      	ldr	r3, [pc, #68]	; (80404fc <HAL_MspInit+0x4c>)
 80404b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80404ba:	4a10      	ldr	r2, [pc, #64]	; (80404fc <HAL_MspInit+0x4c>)
 80404bc:	f043 0301 	orr.w	r3, r3, #1
 80404c0:	6613      	str	r3, [r2, #96]	; 0x60
 80404c2:	4b0e      	ldr	r3, [pc, #56]	; (80404fc <HAL_MspInit+0x4c>)
 80404c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80404c6:	f003 0301 	and.w	r3, r3, #1
 80404ca:	607b      	str	r3, [r7, #4]
 80404cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80404ce:	4b0b      	ldr	r3, [pc, #44]	; (80404fc <HAL_MspInit+0x4c>)
 80404d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80404d2:	4a0a      	ldr	r2, [pc, #40]	; (80404fc <HAL_MspInit+0x4c>)
 80404d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80404d8:	6593      	str	r3, [r2, #88]	; 0x58
 80404da:	4b08      	ldr	r3, [pc, #32]	; (80404fc <HAL_MspInit+0x4c>)
 80404dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80404de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80404e2:	603b      	str	r3, [r7, #0]
 80404e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 80404e6:	2200      	movs	r2, #0
 80404e8:	2107      	movs	r1, #7
 80404ea:	f06f 0001 	mvn.w	r0, #1
 80404ee:	f000 f9eb 	bl	80408c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80404f2:	bf00      	nop
 80404f4:	3708      	adds	r7, #8
 80404f6:	46bd      	mov	sp, r7
 80404f8:	bd80      	pop	{r7, pc}
 80404fa:	bf00      	nop
 80404fc:	40021000 	.word	0x40021000

08040500 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040500:	b580      	push	{r7, lr}
 8040502:	b08c      	sub	sp, #48	; 0x30
 8040504:	af00      	add	r7, sp, #0
 8040506:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8040508:	2300      	movs	r3, #0
 804050a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 804050c:	2300      	movs	r3, #0
 804050e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8040510:	2200      	movs	r2, #0
 8040512:	6879      	ldr	r1, [r7, #4]
 8040514:	2031      	movs	r0, #49	; 0x31
 8040516:	f000 f9d7 	bl	80408c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 804051a:	2031      	movs	r0, #49	; 0x31
 804051c:	f000 f9ee 	bl	80408fc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8040520:	4b1e      	ldr	r3, [pc, #120]	; (804059c <HAL_InitTick+0x9c>)
 8040522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040524:	4a1d      	ldr	r2, [pc, #116]	; (804059c <HAL_InitTick+0x9c>)
 8040526:	f043 0310 	orr.w	r3, r3, #16
 804052a:	6593      	str	r3, [r2, #88]	; 0x58
 804052c:	4b1b      	ldr	r3, [pc, #108]	; (804059c <HAL_InitTick+0x9c>)
 804052e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040530:	f003 0310 	and.w	r3, r3, #16
 8040534:	60fb      	str	r3, [r7, #12]
 8040536:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8040538:	f107 0210 	add.w	r2, r7, #16
 804053c:	f107 0314 	add.w	r3, r7, #20
 8040540:	4611      	mov	r1, r2
 8040542:	4618      	mov	r0, r3
 8040544:	f001 fa6c 	bl	8041a20 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8040548:	f001 fa56 	bl	80419f8 <HAL_RCC_GetPCLK1Freq>
 804054c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 804054e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8040550:	4a13      	ldr	r2, [pc, #76]	; (80405a0 <HAL_InitTick+0xa0>)
 8040552:	fba2 2303 	umull	r2, r3, r2, r3
 8040556:	0c9b      	lsrs	r3, r3, #18
 8040558:	3b01      	subs	r3, #1
 804055a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 804055c:	4b11      	ldr	r3, [pc, #68]	; (80405a4 <HAL_InitTick+0xa4>)
 804055e:	4a12      	ldr	r2, [pc, #72]	; (80405a8 <HAL_InitTick+0xa8>)
 8040560:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8040562:	4b10      	ldr	r3, [pc, #64]	; (80405a4 <HAL_InitTick+0xa4>)
 8040564:	f240 32e7 	movw	r2, #999	; 0x3e7
 8040568:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 804056a:	4a0e      	ldr	r2, [pc, #56]	; (80405a4 <HAL_InitTick+0xa4>)
 804056c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804056e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8040570:	4b0c      	ldr	r3, [pc, #48]	; (80405a4 <HAL_InitTick+0xa4>)
 8040572:	2200      	movs	r2, #0
 8040574:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8040576:	4b0b      	ldr	r3, [pc, #44]	; (80405a4 <HAL_InitTick+0xa4>)
 8040578:	2200      	movs	r2, #0
 804057a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 804057c:	4809      	ldr	r0, [pc, #36]	; (80405a4 <HAL_InitTick+0xa4>)
 804057e:	f001 fb5d 	bl	8041c3c <HAL_TIM_Base_Init>
 8040582:	4603      	mov	r3, r0
 8040584:	2b00      	cmp	r3, #0
 8040586:	d104      	bne.n	8040592 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8040588:	4806      	ldr	r0, [pc, #24]	; (80405a4 <HAL_InitTick+0xa4>)
 804058a:	f001 fbb9 	bl	8041d00 <HAL_TIM_Base_Start_IT>
 804058e:	4603      	mov	r3, r0
 8040590:	e000      	b.n	8040594 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8040592:	2301      	movs	r3, #1
}
 8040594:	4618      	mov	r0, r3
 8040596:	3730      	adds	r7, #48	; 0x30
 8040598:	46bd      	mov	sp, r7
 804059a:	bd80      	pop	{r7, pc}
 804059c:	40021000 	.word	0x40021000
 80405a0:	431bde83 	.word	0x431bde83
 80405a4:	2001b700 	.word	0x2001b700
 80405a8:	40001000 	.word	0x40001000

080405ac <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80405ac:	b480      	push	{r7}
 80405ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80405b0:	e7fe      	b.n	80405b0 <MemManage_Handler+0x4>

080405b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80405b2:	b480      	push	{r7}
 80405b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80405b6:	e7fe      	b.n	80405b6 <UsageFault_Handler+0x4>

080405b8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80405b8:	b580      	push	{r7, lr}
 80405ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80405bc:	4802      	ldr	r0, [pc, #8]	; (80405c8 <TIM6_IRQHandler+0x10>)
 80405be:	f001 fc0f 	bl	8041de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80405c2:	bf00      	nop
 80405c4:	bd80      	pop	{r7, pc}
 80405c6:	bf00      	nop
 80405c8:	2001b700 	.word	0x2001b700

080405cc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80405cc:	b580      	push	{r7, lr}
 80405ce:	b08a      	sub	sp, #40	; 0x28
 80405d0:	af00      	add	r7, sp, #0
 80405d2:	4603      	mov	r3, r0
 80405d4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED1)
 80405d6:	79fb      	ldrb	r3, [r7, #7]
 80405d8:	2b00      	cmp	r3, #0
 80405da:	d10c      	bne.n	80405f6 <BSP_LED_Init+0x2a>
  {
    LED1_GPIO_CLK_ENABLE();
 80405dc:	4b27      	ldr	r3, [pc, #156]	; (804067c <BSP_LED_Init+0xb0>)
 80405de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80405e0:	4a26      	ldr	r2, [pc, #152]	; (804067c <BSP_LED_Init+0xb0>)
 80405e2:	f043 0304 	orr.w	r3, r3, #4
 80405e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80405e8:	4b24      	ldr	r3, [pc, #144]	; (804067c <BSP_LED_Init+0xb0>)
 80405ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80405ec:	f003 0304 	and.w	r3, r3, #4
 80405f0:	613b      	str	r3, [r7, #16]
 80405f2:	693b      	ldr	r3, [r7, #16]
 80405f4:	e01b      	b.n	804062e <BSP_LED_Init+0x62>
  }
  else if (Led == LED2)
 80405f6:	79fb      	ldrb	r3, [r7, #7]
 80405f8:	2b01      	cmp	r3, #1
 80405fa:	d10c      	bne.n	8040616 <BSP_LED_Init+0x4a>
  {
    LED2_GPIO_CLK_ENABLE();
 80405fc:	4b1f      	ldr	r3, [pc, #124]	; (804067c <BSP_LED_Init+0xb0>)
 80405fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040600:	4a1e      	ldr	r2, [pc, #120]	; (804067c <BSP_LED_Init+0xb0>)
 8040602:	f043 0302 	orr.w	r3, r3, #2
 8040606:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040608:	4b1c      	ldr	r3, [pc, #112]	; (804067c <BSP_LED_Init+0xb0>)
 804060a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804060c:	f003 0302 	and.w	r3, r3, #2
 8040610:	60fb      	str	r3, [r7, #12]
 8040612:	68fb      	ldr	r3, [r7, #12]
 8040614:	e00b      	b.n	804062e <BSP_LED_Init+0x62>
  }
  else /* Led = LED3 */
  {
    LED3_GPIO_CLK_ENABLE();
 8040616:	4b19      	ldr	r3, [pc, #100]	; (804067c <BSP_LED_Init+0xb0>)
 8040618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804061a:	4a18      	ldr	r2, [pc, #96]	; (804067c <BSP_LED_Init+0xb0>)
 804061c:	f043 0301 	orr.w	r3, r3, #1
 8040620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040622:	4b16      	ldr	r3, [pc, #88]	; (804067c <BSP_LED_Init+0xb0>)
 8040624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040626:	f003 0301 	and.w	r3, r3, #1
 804062a:	60bb      	str	r3, [r7, #8]
 804062c:	68bb      	ldr	r3, [r7, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 804062e:	79fb      	ldrb	r3, [r7, #7]
 8040630:	4a13      	ldr	r2, [pc, #76]	; (8040680 <BSP_LED_Init+0xb4>)
 8040632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8040636:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8040638:	2301      	movs	r3, #1
 804063a:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_PULLUP;
 804063c:	2301      	movs	r3, #1
 804063e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8040640:	2303      	movs	r3, #3
 8040642:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8040644:	79fb      	ldrb	r3, [r7, #7]
 8040646:	4a0f      	ldr	r2, [pc, #60]	; (8040684 <BSP_LED_Init+0xb8>)
 8040648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804064c:	f107 0214 	add.w	r2, r7, #20
 8040650:	4611      	mov	r1, r2
 8040652:	4618      	mov	r0, r3
 8040654:	f000 f960 	bl	8040918 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8040658:	79fb      	ldrb	r3, [r7, #7]
 804065a:	4a0a      	ldr	r2, [pc, #40]	; (8040684 <BSP_LED_Init+0xb8>)
 804065c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8040660:	79fb      	ldrb	r3, [r7, #7]
 8040662:	4a07      	ldr	r2, [pc, #28]	; (8040680 <BSP_LED_Init+0xb4>)
 8040664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8040668:	2200      	movs	r2, #0
 804066a:	4619      	mov	r1, r3
 804066c:	f000 fad4 	bl	8040c18 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8040670:	2300      	movs	r3, #0
}
 8040672:	4618      	mov	r0, r3
 8040674:	3728      	adds	r7, #40	; 0x28
 8040676:	46bd      	mov	sp, r7
 8040678:	bd80      	pop	{r7, pc}
 804067a:	bf00      	nop
 804067c:	40021000 	.word	0x40021000
 8040680:	20018000 	.word	0x20018000
 8040684:	20018008 	.word	0x20018008

08040688 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8040688:	b580      	push	{r7, lr}
 804068a:	b082      	sub	sp, #8
 804068c:	af00      	add	r7, sp, #0
 804068e:	4603      	mov	r3, r0
 8040690:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8040692:	79fb      	ldrb	r3, [r7, #7]
 8040694:	4a07      	ldr	r2, [pc, #28]	; (80406b4 <BSP_LED_Toggle+0x2c>)
 8040696:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 804069a:	79fb      	ldrb	r3, [r7, #7]
 804069c:	4a06      	ldr	r2, [pc, #24]	; (80406b8 <BSP_LED_Toggle+0x30>)
 804069e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80406a2:	4619      	mov	r1, r3
 80406a4:	f000 fad0 	bl	8040c48 <HAL_GPIO_TogglePin>
  return BSP_ERROR_NONE;
 80406a8:	2300      	movs	r3, #0
}
 80406aa:	4618      	mov	r0, r3
 80406ac:	3708      	adds	r7, #8
 80406ae:	46bd      	mov	sp, r7
 80406b0:	bd80      	pop	{r7, pc}
 80406b2:	bf00      	nop
 80406b4:	20018008 	.word	0x20018008
 80406b8:	20018000 	.word	0x20018000

080406bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80406bc:	b480      	push	{r7}
 80406be:	af00      	add	r7, sp, #0
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 80406c0:	bf00      	nop
 80406c2:	46bd      	mov	sp, r7
 80406c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80406c8:	4770      	bx	lr
	...

080406cc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80406cc:	b580      	push	{r7, lr}
 80406ce:	af00      	add	r7, sp, #0
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 80406d0:	f004 f9fa 	bl	8044ac8 <__SECURE_SystemCoreClockUpdate_veneer>
 80406d4:	4602      	mov	r2, r0
 80406d6:	4b02      	ldr	r3, [pc, #8]	; (80406e0 <SystemCoreClockUpdate+0x14>)
 80406d8:	601a      	str	r2, [r3, #0]
}
 80406da:	bf00      	nop
 80406dc:	bd80      	pop	{r7, pc}
 80406de:	bf00      	nop
 80406e0:	20018014 	.word	0x20018014

080406e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80406e4:	b580      	push	{r7, lr}
 80406e6:	b082      	sub	sp, #8
 80406e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80406ea:	2300      	movs	r3, #0
 80406ec:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80406ee:	2004      	movs	r0, #4
 80406f0:	f000 f8df 	bl	80408b2 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80406f4:	f7ff ffea 	bl	80406cc <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80406f8:	2000      	movs	r0, #0
 80406fa:	f7ff ff01 	bl	8040500 <HAL_InitTick>
 80406fe:	4603      	mov	r3, r0
 8040700:	2b00      	cmp	r3, #0
 8040702:	d002      	beq.n	804070a <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8040704:	2301      	movs	r3, #1
 8040706:	71fb      	strb	r3, [r7, #7]
 8040708:	e001      	b.n	804070e <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 804070a:	f7ff fed1 	bl	80404b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 804070e:	79fb      	ldrb	r3, [r7, #7]
}
 8040710:	4618      	mov	r0, r3
 8040712:	3708      	adds	r7, #8
 8040714:	46bd      	mov	sp, r7
 8040716:	bd80      	pop	{r7, pc}

08040718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040718:	b480      	push	{r7}
 804071a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 804071c:	4b06      	ldr	r3, [pc, #24]	; (8040738 <HAL_IncTick+0x20>)
 804071e:	781b      	ldrb	r3, [r3, #0]
 8040720:	461a      	mov	r2, r3
 8040722:	4b06      	ldr	r3, [pc, #24]	; (804073c <HAL_IncTick+0x24>)
 8040724:	681b      	ldr	r3, [r3, #0]
 8040726:	4413      	add	r3, r2
 8040728:	4a04      	ldr	r2, [pc, #16]	; (804073c <HAL_IncTick+0x24>)
 804072a:	6013      	str	r3, [r2, #0]
}
 804072c:	bf00      	nop
 804072e:	46bd      	mov	sp, r7
 8040730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040734:	4770      	bx	lr
 8040736:	bf00      	nop
 8040738:	2001801c 	.word	0x2001801c
 804073c:	2001b74c 	.word	0x2001b74c

08040740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040740:	b480      	push	{r7}
 8040742:	af00      	add	r7, sp, #0
  return uwTick;
 8040744:	4b03      	ldr	r3, [pc, #12]	; (8040754 <HAL_GetTick+0x14>)
 8040746:	681b      	ldr	r3, [r3, #0]
}
 8040748:	4618      	mov	r0, r3
 804074a:	46bd      	mov	sp, r7
 804074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040750:	4770      	bx	lr
 8040752:	bf00      	nop
 8040754:	2001b74c 	.word	0x2001b74c

08040758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040758:	b480      	push	{r7}
 804075a:	b085      	sub	sp, #20
 804075c:	af00      	add	r7, sp, #0
 804075e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040760:	687b      	ldr	r3, [r7, #4]
 8040762:	f003 0307 	and.w	r3, r3, #7
 8040766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040768:	4b0c      	ldr	r3, [pc, #48]	; (804079c <__NVIC_SetPriorityGrouping+0x44>)
 804076a:	68db      	ldr	r3, [r3, #12]
 804076c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 804076e:	68ba      	ldr	r2, [r7, #8]
 8040770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040774:	4013      	ands	r3, r2
 8040776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040778:	68fb      	ldr	r3, [r7, #12]
 804077a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 804077c:	68bb      	ldr	r3, [r7, #8]
 804077e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8040784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 804078a:	4a04      	ldr	r2, [pc, #16]	; (804079c <__NVIC_SetPriorityGrouping+0x44>)
 804078c:	68bb      	ldr	r3, [r7, #8]
 804078e:	60d3      	str	r3, [r2, #12]
}
 8040790:	bf00      	nop
 8040792:	3714      	adds	r7, #20
 8040794:	46bd      	mov	sp, r7
 8040796:	f85d 7b04 	ldr.w	r7, [sp], #4
 804079a:	4770      	bx	lr
 804079c:	e000ed00 	.word	0xe000ed00

080407a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80407a0:	b480      	push	{r7}
 80407a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80407a4:	4b04      	ldr	r3, [pc, #16]	; (80407b8 <__NVIC_GetPriorityGrouping+0x18>)
 80407a6:	68db      	ldr	r3, [r3, #12]
 80407a8:	0a1b      	lsrs	r3, r3, #8
 80407aa:	f003 0307 	and.w	r3, r3, #7
}
 80407ae:	4618      	mov	r0, r3
 80407b0:	46bd      	mov	sp, r7
 80407b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80407b6:	4770      	bx	lr
 80407b8:	e000ed00 	.word	0xe000ed00

080407bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80407bc:	b480      	push	{r7}
 80407be:	b083      	sub	sp, #12
 80407c0:	af00      	add	r7, sp, #0
 80407c2:	4603      	mov	r3, r0
 80407c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80407c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80407ca:	2b00      	cmp	r3, #0
 80407cc:	db0b      	blt.n	80407e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80407ce:	79fb      	ldrb	r3, [r7, #7]
 80407d0:	f003 021f 	and.w	r2, r3, #31
 80407d4:	4907      	ldr	r1, [pc, #28]	; (80407f4 <__NVIC_EnableIRQ+0x38>)
 80407d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80407da:	095b      	lsrs	r3, r3, #5
 80407dc:	2001      	movs	r0, #1
 80407de:	fa00 f202 	lsl.w	r2, r0, r2
 80407e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80407e6:	bf00      	nop
 80407e8:	370c      	adds	r7, #12
 80407ea:	46bd      	mov	sp, r7
 80407ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80407f0:	4770      	bx	lr
 80407f2:	bf00      	nop
 80407f4:	e000e100 	.word	0xe000e100

080407f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80407f8:	b480      	push	{r7}
 80407fa:	b083      	sub	sp, #12
 80407fc:	af00      	add	r7, sp, #0
 80407fe:	4603      	mov	r3, r0
 8040800:	6039      	str	r1, [r7, #0]
 8040802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040808:	2b00      	cmp	r3, #0
 804080a:	db0a      	blt.n	8040822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804080c:	683b      	ldr	r3, [r7, #0]
 804080e:	b2da      	uxtb	r2, r3
 8040810:	490c      	ldr	r1, [pc, #48]	; (8040844 <__NVIC_SetPriority+0x4c>)
 8040812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040816:	0152      	lsls	r2, r2, #5
 8040818:	b2d2      	uxtb	r2, r2
 804081a:	440b      	add	r3, r1
 804081c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040820:	e00a      	b.n	8040838 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040822:	683b      	ldr	r3, [r7, #0]
 8040824:	b2da      	uxtb	r2, r3
 8040826:	4908      	ldr	r1, [pc, #32]	; (8040848 <__NVIC_SetPriority+0x50>)
 8040828:	79fb      	ldrb	r3, [r7, #7]
 804082a:	f003 030f 	and.w	r3, r3, #15
 804082e:	3b04      	subs	r3, #4
 8040830:	0152      	lsls	r2, r2, #5
 8040832:	b2d2      	uxtb	r2, r2
 8040834:	440b      	add	r3, r1
 8040836:	761a      	strb	r2, [r3, #24]
}
 8040838:	bf00      	nop
 804083a:	370c      	adds	r7, #12
 804083c:	46bd      	mov	sp, r7
 804083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040842:	4770      	bx	lr
 8040844:	e000e100 	.word	0xe000e100
 8040848:	e000ed00 	.word	0xe000ed00

0804084c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 804084c:	b480      	push	{r7}
 804084e:	b089      	sub	sp, #36	; 0x24
 8040850:	af00      	add	r7, sp, #0
 8040852:	60f8      	str	r0, [r7, #12]
 8040854:	60b9      	str	r1, [r7, #8]
 8040856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040858:	68fb      	ldr	r3, [r7, #12]
 804085a:	f003 0307 	and.w	r3, r3, #7
 804085e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040860:	69fb      	ldr	r3, [r7, #28]
 8040862:	f1c3 0307 	rsb	r3, r3, #7
 8040866:	2b03      	cmp	r3, #3
 8040868:	bf28      	it	cs
 804086a:	2303      	movcs	r3, #3
 804086c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 804086e:	69fb      	ldr	r3, [r7, #28]
 8040870:	3303      	adds	r3, #3
 8040872:	2b06      	cmp	r3, #6
 8040874:	d902      	bls.n	804087c <NVIC_EncodePriority+0x30>
 8040876:	69fb      	ldr	r3, [r7, #28]
 8040878:	3b04      	subs	r3, #4
 804087a:	e000      	b.n	804087e <NVIC_EncodePriority+0x32>
 804087c:	2300      	movs	r3, #0
 804087e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040880:	f04f 32ff 	mov.w	r2, #4294967295
 8040884:	69bb      	ldr	r3, [r7, #24]
 8040886:	fa02 f303 	lsl.w	r3, r2, r3
 804088a:	43da      	mvns	r2, r3
 804088c:	68bb      	ldr	r3, [r7, #8]
 804088e:	401a      	ands	r2, r3
 8040890:	697b      	ldr	r3, [r7, #20]
 8040892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040894:	f04f 31ff 	mov.w	r1, #4294967295
 8040898:	697b      	ldr	r3, [r7, #20]
 804089a:	fa01 f303 	lsl.w	r3, r1, r3
 804089e:	43d9      	mvns	r1, r3
 80408a0:	687b      	ldr	r3, [r7, #4]
 80408a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80408a4:	4313      	orrs	r3, r2
         );
}
 80408a6:	4618      	mov	r0, r3
 80408a8:	3724      	adds	r7, #36	; 0x24
 80408aa:	46bd      	mov	sp, r7
 80408ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408b0:	4770      	bx	lr

080408b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80408b2:	b580      	push	{r7, lr}
 80408b4:	b082      	sub	sp, #8
 80408b6:	af00      	add	r7, sp, #0
 80408b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80408ba:	6878      	ldr	r0, [r7, #4]
 80408bc:	f7ff ff4c 	bl	8040758 <__NVIC_SetPriorityGrouping>
}
 80408c0:	bf00      	nop
 80408c2:	3708      	adds	r7, #8
 80408c4:	46bd      	mov	sp, r7
 80408c6:	bd80      	pop	{r7, pc}

080408c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80408c8:	b580      	push	{r7, lr}
 80408ca:	b086      	sub	sp, #24
 80408cc:	af00      	add	r7, sp, #0
 80408ce:	4603      	mov	r3, r0
 80408d0:	60b9      	str	r1, [r7, #8]
 80408d2:	607a      	str	r2, [r7, #4]
 80408d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80408d6:	f7ff ff63 	bl	80407a0 <__NVIC_GetPriorityGrouping>
 80408da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80408dc:	687a      	ldr	r2, [r7, #4]
 80408de:	68b9      	ldr	r1, [r7, #8]
 80408e0:	6978      	ldr	r0, [r7, #20]
 80408e2:	f7ff ffb3 	bl	804084c <NVIC_EncodePriority>
 80408e6:	4602      	mov	r2, r0
 80408e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80408ec:	4611      	mov	r1, r2
 80408ee:	4618      	mov	r0, r3
 80408f0:	f7ff ff82 	bl	80407f8 <__NVIC_SetPriority>
}
 80408f4:	bf00      	nop
 80408f6:	3718      	adds	r7, #24
 80408f8:	46bd      	mov	sp, r7
 80408fa:	bd80      	pop	{r7, pc}

080408fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80408fc:	b580      	push	{r7, lr}
 80408fe:	b082      	sub	sp, #8
 8040900:	af00      	add	r7, sp, #0
 8040902:	4603      	mov	r3, r0
 8040904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8040906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804090a:	4618      	mov	r0, r3
 804090c:	f7ff ff56 	bl	80407bc <__NVIC_EnableIRQ>
}
 8040910:	bf00      	nop
 8040912:	3708      	adds	r7, #8
 8040914:	46bd      	mov	sp, r7
 8040916:	bd80      	pop	{r7, pc}

08040918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040918:	b480      	push	{r7}
 804091a:	b087      	sub	sp, #28
 804091c:	af00      	add	r7, sp, #0
 804091e:	6078      	str	r0, [r7, #4]
 8040920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8040922:	2300      	movs	r3, #0
 8040924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8040926:	e158      	b.n	8040bda <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8040928:	683b      	ldr	r3, [r7, #0]
 804092a:	681a      	ldr	r2, [r3, #0]
 804092c:	2101      	movs	r1, #1
 804092e:	697b      	ldr	r3, [r7, #20]
 8040930:	fa01 f303 	lsl.w	r3, r1, r3
 8040934:	4013      	ands	r3, r2
 8040936:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8040938:	68fb      	ldr	r3, [r7, #12]
 804093a:	2b00      	cmp	r3, #0
 804093c:	f000 814a 	beq.w	8040bd4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8040940:	683b      	ldr	r3, [r7, #0]
 8040942:	685b      	ldr	r3, [r3, #4]
 8040944:	2b01      	cmp	r3, #1
 8040946:	d00b      	beq.n	8040960 <HAL_GPIO_Init+0x48>
 8040948:	683b      	ldr	r3, [r7, #0]
 804094a:	685b      	ldr	r3, [r3, #4]
 804094c:	2b02      	cmp	r3, #2
 804094e:	d007      	beq.n	8040960 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040950:	683b      	ldr	r3, [r7, #0]
 8040952:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8040954:	2b11      	cmp	r3, #17
 8040956:	d003      	beq.n	8040960 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040958:	683b      	ldr	r3, [r7, #0]
 804095a:	685b      	ldr	r3, [r3, #4]
 804095c:	2b12      	cmp	r3, #18
 804095e:	d130      	bne.n	80409c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8040960:	687b      	ldr	r3, [r7, #4]
 8040962:	689b      	ldr	r3, [r3, #8]
 8040964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8040966:	697b      	ldr	r3, [r7, #20]
 8040968:	005b      	lsls	r3, r3, #1
 804096a:	2203      	movs	r2, #3
 804096c:	fa02 f303 	lsl.w	r3, r2, r3
 8040970:	43db      	mvns	r3, r3
 8040972:	693a      	ldr	r2, [r7, #16]
 8040974:	4013      	ands	r3, r2
 8040976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8040978:	683b      	ldr	r3, [r7, #0]
 804097a:	68da      	ldr	r2, [r3, #12]
 804097c:	697b      	ldr	r3, [r7, #20]
 804097e:	005b      	lsls	r3, r3, #1
 8040980:	fa02 f303 	lsl.w	r3, r2, r3
 8040984:	693a      	ldr	r2, [r7, #16]
 8040986:	4313      	orrs	r3, r2
 8040988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 804098a:	687b      	ldr	r3, [r7, #4]
 804098c:	693a      	ldr	r2, [r7, #16]
 804098e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040990:	687b      	ldr	r3, [r7, #4]
 8040992:	685b      	ldr	r3, [r3, #4]
 8040994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8040996:	2201      	movs	r2, #1
 8040998:	697b      	ldr	r3, [r7, #20]
 804099a:	fa02 f303 	lsl.w	r3, r2, r3
 804099e:	43db      	mvns	r3, r3
 80409a0:	693a      	ldr	r2, [r7, #16]
 80409a2:	4013      	ands	r3, r2
 80409a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80409a6:	683b      	ldr	r3, [r7, #0]
 80409a8:	685b      	ldr	r3, [r3, #4]
 80409aa:	091b      	lsrs	r3, r3, #4
 80409ac:	f003 0201 	and.w	r2, r3, #1
 80409b0:	697b      	ldr	r3, [r7, #20]
 80409b2:	fa02 f303 	lsl.w	r3, r2, r3
 80409b6:	693a      	ldr	r2, [r7, #16]
 80409b8:	4313      	orrs	r3, r2
 80409ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80409bc:	687b      	ldr	r3, [r7, #4]
 80409be:	693a      	ldr	r2, [r7, #16]
 80409c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80409c2:	687b      	ldr	r3, [r7, #4]
 80409c4:	68db      	ldr	r3, [r3, #12]
 80409c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80409c8:	697b      	ldr	r3, [r7, #20]
 80409ca:	005b      	lsls	r3, r3, #1
 80409cc:	2203      	movs	r2, #3
 80409ce:	fa02 f303 	lsl.w	r3, r2, r3
 80409d2:	43db      	mvns	r3, r3
 80409d4:	693a      	ldr	r2, [r7, #16]
 80409d6:	4013      	ands	r3, r2
 80409d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80409da:	683b      	ldr	r3, [r7, #0]
 80409dc:	689a      	ldr	r2, [r3, #8]
 80409de:	697b      	ldr	r3, [r7, #20]
 80409e0:	005b      	lsls	r3, r3, #1
 80409e2:	fa02 f303 	lsl.w	r3, r2, r3
 80409e6:	693a      	ldr	r2, [r7, #16]
 80409e8:	4313      	orrs	r3, r2
 80409ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80409ec:	687b      	ldr	r3, [r7, #4]
 80409ee:	693a      	ldr	r2, [r7, #16]
 80409f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80409f2:	683b      	ldr	r3, [r7, #0]
 80409f4:	685b      	ldr	r3, [r3, #4]
 80409f6:	2b02      	cmp	r3, #2
 80409f8:	d003      	beq.n	8040a02 <HAL_GPIO_Init+0xea>
 80409fa:	683b      	ldr	r3, [r7, #0]
 80409fc:	685b      	ldr	r3, [r3, #4]
 80409fe:	2b12      	cmp	r3, #18
 8040a00:	d123      	bne.n	8040a4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8040a02:	697b      	ldr	r3, [r7, #20]
 8040a04:	08da      	lsrs	r2, r3, #3
 8040a06:	687b      	ldr	r3, [r7, #4]
 8040a08:	3208      	adds	r2, #8
 8040a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8040a10:	697b      	ldr	r3, [r7, #20]
 8040a12:	f003 0307 	and.w	r3, r3, #7
 8040a16:	009b      	lsls	r3, r3, #2
 8040a18:	220f      	movs	r2, #15
 8040a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8040a1e:	43db      	mvns	r3, r3
 8040a20:	693a      	ldr	r2, [r7, #16]
 8040a22:	4013      	ands	r3, r2
 8040a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8040a26:	683b      	ldr	r3, [r7, #0]
 8040a28:	691a      	ldr	r2, [r3, #16]
 8040a2a:	697b      	ldr	r3, [r7, #20]
 8040a2c:	f003 0307 	and.w	r3, r3, #7
 8040a30:	009b      	lsls	r3, r3, #2
 8040a32:	fa02 f303 	lsl.w	r3, r2, r3
 8040a36:	693a      	ldr	r2, [r7, #16]
 8040a38:	4313      	orrs	r3, r2
 8040a3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8040a3c:	697b      	ldr	r3, [r7, #20]
 8040a3e:	08da      	lsrs	r2, r3, #3
 8040a40:	687b      	ldr	r3, [r7, #4]
 8040a42:	3208      	adds	r2, #8
 8040a44:	6939      	ldr	r1, [r7, #16]
 8040a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040a4a:	687b      	ldr	r3, [r7, #4]
 8040a4c:	681b      	ldr	r3, [r3, #0]
 8040a4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8040a50:	697b      	ldr	r3, [r7, #20]
 8040a52:	005b      	lsls	r3, r3, #1
 8040a54:	2203      	movs	r2, #3
 8040a56:	fa02 f303 	lsl.w	r3, r2, r3
 8040a5a:	43db      	mvns	r3, r3
 8040a5c:	693a      	ldr	r2, [r7, #16]
 8040a5e:	4013      	ands	r3, r2
 8040a60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8040a62:	683b      	ldr	r3, [r7, #0]
 8040a64:	685b      	ldr	r3, [r3, #4]
 8040a66:	f003 0203 	and.w	r2, r3, #3
 8040a6a:	697b      	ldr	r3, [r7, #20]
 8040a6c:	005b      	lsls	r3, r3, #1
 8040a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8040a72:	693a      	ldr	r2, [r7, #16]
 8040a74:	4313      	orrs	r3, r2
 8040a76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8040a78:	687b      	ldr	r3, [r7, #4]
 8040a7a:	693a      	ldr	r2, [r7, #16]
 8040a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8040a7e:	683b      	ldr	r3, [r7, #0]
 8040a80:	685b      	ldr	r3, [r3, #4]
 8040a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040a86:	2b00      	cmp	r3, #0
 8040a88:	f000 80a4 	beq.w	8040bd4 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8040a8c:	4a5a      	ldr	r2, [pc, #360]	; (8040bf8 <HAL_GPIO_Init+0x2e0>)
 8040a8e:	697b      	ldr	r3, [r7, #20]
 8040a90:	089b      	lsrs	r3, r3, #2
 8040a92:	3318      	adds	r3, #24
 8040a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040a98:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8040a9a:	697b      	ldr	r3, [r7, #20]
 8040a9c:	f003 0303 	and.w	r3, r3, #3
 8040aa0:	00db      	lsls	r3, r3, #3
 8040aa2:	220f      	movs	r2, #15
 8040aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8040aa8:	43db      	mvns	r3, r3
 8040aaa:	693a      	ldr	r2, [r7, #16]
 8040aac:	4013      	ands	r3, r2
 8040aae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8040ab0:	687b      	ldr	r3, [r7, #4]
 8040ab2:	4a52      	ldr	r2, [pc, #328]	; (8040bfc <HAL_GPIO_Init+0x2e4>)
 8040ab4:	4293      	cmp	r3, r2
 8040ab6:	d025      	beq.n	8040b04 <HAL_GPIO_Init+0x1ec>
 8040ab8:	687b      	ldr	r3, [r7, #4]
 8040aba:	4a51      	ldr	r2, [pc, #324]	; (8040c00 <HAL_GPIO_Init+0x2e8>)
 8040abc:	4293      	cmp	r3, r2
 8040abe:	d01f      	beq.n	8040b00 <HAL_GPIO_Init+0x1e8>
 8040ac0:	687b      	ldr	r3, [r7, #4]
 8040ac2:	4a50      	ldr	r2, [pc, #320]	; (8040c04 <HAL_GPIO_Init+0x2ec>)
 8040ac4:	4293      	cmp	r3, r2
 8040ac6:	d019      	beq.n	8040afc <HAL_GPIO_Init+0x1e4>
 8040ac8:	687b      	ldr	r3, [r7, #4]
 8040aca:	4a4f      	ldr	r2, [pc, #316]	; (8040c08 <HAL_GPIO_Init+0x2f0>)
 8040acc:	4293      	cmp	r3, r2
 8040ace:	d013      	beq.n	8040af8 <HAL_GPIO_Init+0x1e0>
 8040ad0:	687b      	ldr	r3, [r7, #4]
 8040ad2:	4a4e      	ldr	r2, [pc, #312]	; (8040c0c <HAL_GPIO_Init+0x2f4>)
 8040ad4:	4293      	cmp	r3, r2
 8040ad6:	d00d      	beq.n	8040af4 <HAL_GPIO_Init+0x1dc>
 8040ad8:	687b      	ldr	r3, [r7, #4]
 8040ada:	4a4d      	ldr	r2, [pc, #308]	; (8040c10 <HAL_GPIO_Init+0x2f8>)
 8040adc:	4293      	cmp	r3, r2
 8040ade:	d007      	beq.n	8040af0 <HAL_GPIO_Init+0x1d8>
 8040ae0:	687b      	ldr	r3, [r7, #4]
 8040ae2:	4a4c      	ldr	r2, [pc, #304]	; (8040c14 <HAL_GPIO_Init+0x2fc>)
 8040ae4:	4293      	cmp	r3, r2
 8040ae6:	d101      	bne.n	8040aec <HAL_GPIO_Init+0x1d4>
 8040ae8:	2306      	movs	r3, #6
 8040aea:	e00c      	b.n	8040b06 <HAL_GPIO_Init+0x1ee>
 8040aec:	2307      	movs	r3, #7
 8040aee:	e00a      	b.n	8040b06 <HAL_GPIO_Init+0x1ee>
 8040af0:	2305      	movs	r3, #5
 8040af2:	e008      	b.n	8040b06 <HAL_GPIO_Init+0x1ee>
 8040af4:	2304      	movs	r3, #4
 8040af6:	e006      	b.n	8040b06 <HAL_GPIO_Init+0x1ee>
 8040af8:	2303      	movs	r3, #3
 8040afa:	e004      	b.n	8040b06 <HAL_GPIO_Init+0x1ee>
 8040afc:	2302      	movs	r3, #2
 8040afe:	e002      	b.n	8040b06 <HAL_GPIO_Init+0x1ee>
 8040b00:	2301      	movs	r3, #1
 8040b02:	e000      	b.n	8040b06 <HAL_GPIO_Init+0x1ee>
 8040b04:	2300      	movs	r3, #0
 8040b06:	697a      	ldr	r2, [r7, #20]
 8040b08:	f002 0203 	and.w	r2, r2, #3
 8040b0c:	00d2      	lsls	r2, r2, #3
 8040b0e:	4093      	lsls	r3, r2
 8040b10:	693a      	ldr	r2, [r7, #16]
 8040b12:	4313      	orrs	r3, r2
 8040b14:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8040b16:	4938      	ldr	r1, [pc, #224]	; (8040bf8 <HAL_GPIO_Init+0x2e0>)
 8040b18:	697b      	ldr	r3, [r7, #20]
 8040b1a:	089b      	lsrs	r3, r3, #2
 8040b1c:	3318      	adds	r3, #24
 8040b1e:	693a      	ldr	r2, [r7, #16]
 8040b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8040b24:	4b34      	ldr	r3, [pc, #208]	; (8040bf8 <HAL_GPIO_Init+0x2e0>)
 8040b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8040b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040b2c:	68fb      	ldr	r3, [r7, #12]
 8040b2e:	43db      	mvns	r3, r3
 8040b30:	693a      	ldr	r2, [r7, #16]
 8040b32:	4013      	ands	r3, r2
 8040b34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8040b36:	683b      	ldr	r3, [r7, #0]
 8040b38:	685b      	ldr	r3, [r3, #4]
 8040b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8040b3e:	2b00      	cmp	r3, #0
 8040b40:	d003      	beq.n	8040b4a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8040b42:	693a      	ldr	r2, [r7, #16]
 8040b44:	68fb      	ldr	r3, [r7, #12]
 8040b46:	4313      	orrs	r3, r2
 8040b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8040b4a:	4a2b      	ldr	r2, [pc, #172]	; (8040bf8 <HAL_GPIO_Init+0x2e0>)
 8040b4c:	693b      	ldr	r3, [r7, #16]
 8040b4e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8040b52:	4b29      	ldr	r3, [pc, #164]	; (8040bf8 <HAL_GPIO_Init+0x2e0>)
 8040b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8040b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040b5a:	68fb      	ldr	r3, [r7, #12]
 8040b5c:	43db      	mvns	r3, r3
 8040b5e:	693a      	ldr	r2, [r7, #16]
 8040b60:	4013      	ands	r3, r2
 8040b62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8040b64:	683b      	ldr	r3, [r7, #0]
 8040b66:	685b      	ldr	r3, [r3, #4]
 8040b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040b6c:	2b00      	cmp	r3, #0
 8040b6e:	d003      	beq.n	8040b78 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8040b70:	693a      	ldr	r2, [r7, #16]
 8040b72:	68fb      	ldr	r3, [r7, #12]
 8040b74:	4313      	orrs	r3, r2
 8040b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8040b78:	4a1f      	ldr	r2, [pc, #124]	; (8040bf8 <HAL_GPIO_Init+0x2e0>)
 8040b7a:	693b      	ldr	r3, [r7, #16]
 8040b7c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8040b80:	4b1d      	ldr	r3, [pc, #116]	; (8040bf8 <HAL_GPIO_Init+0x2e0>)
 8040b82:	681b      	ldr	r3, [r3, #0]
 8040b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040b86:	68fb      	ldr	r3, [r7, #12]
 8040b88:	43db      	mvns	r3, r3
 8040b8a:	693a      	ldr	r2, [r7, #16]
 8040b8c:	4013      	ands	r3, r2
 8040b8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8040b90:	683b      	ldr	r3, [r7, #0]
 8040b92:	685b      	ldr	r3, [r3, #4]
 8040b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8040b98:	2b00      	cmp	r3, #0
 8040b9a:	d003      	beq.n	8040ba4 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8040b9c:	693a      	ldr	r2, [r7, #16]
 8040b9e:	68fb      	ldr	r3, [r7, #12]
 8040ba0:	4313      	orrs	r3, r2
 8040ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8040ba4:	4a14      	ldr	r2, [pc, #80]	; (8040bf8 <HAL_GPIO_Init+0x2e0>)
 8040ba6:	693b      	ldr	r3, [r7, #16]
 8040ba8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8040baa:	4b13      	ldr	r3, [pc, #76]	; (8040bf8 <HAL_GPIO_Init+0x2e0>)
 8040bac:	685b      	ldr	r3, [r3, #4]
 8040bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040bb0:	68fb      	ldr	r3, [r7, #12]
 8040bb2:	43db      	mvns	r3, r3
 8040bb4:	693a      	ldr	r2, [r7, #16]
 8040bb6:	4013      	ands	r3, r2
 8040bb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8040bba:	683b      	ldr	r3, [r7, #0]
 8040bbc:	685b      	ldr	r3, [r3, #4]
 8040bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8040bc2:	2b00      	cmp	r3, #0
 8040bc4:	d003      	beq.n	8040bce <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8040bc6:	693a      	ldr	r2, [r7, #16]
 8040bc8:	68fb      	ldr	r3, [r7, #12]
 8040bca:	4313      	orrs	r3, r2
 8040bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8040bce:	4a0a      	ldr	r2, [pc, #40]	; (8040bf8 <HAL_GPIO_Init+0x2e0>)
 8040bd0:	693b      	ldr	r3, [r7, #16]
 8040bd2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8040bd4:	697b      	ldr	r3, [r7, #20]
 8040bd6:	3301      	adds	r3, #1
 8040bd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8040bda:	683b      	ldr	r3, [r7, #0]
 8040bdc:	681a      	ldr	r2, [r3, #0]
 8040bde:	697b      	ldr	r3, [r7, #20]
 8040be0:	fa22 f303 	lsr.w	r3, r2, r3
 8040be4:	2b00      	cmp	r3, #0
 8040be6:	f47f ae9f 	bne.w	8040928 <HAL_GPIO_Init+0x10>
  }
}
 8040bea:	bf00      	nop
 8040bec:	371c      	adds	r7, #28
 8040bee:	46bd      	mov	sp, r7
 8040bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bf4:	4770      	bx	lr
 8040bf6:	bf00      	nop
 8040bf8:	4002f400 	.word	0x4002f400
 8040bfc:	42020000 	.word	0x42020000
 8040c00:	42020400 	.word	0x42020400
 8040c04:	42020800 	.word	0x42020800
 8040c08:	42020c00 	.word	0x42020c00
 8040c0c:	42021000 	.word	0x42021000
 8040c10:	42021400 	.word	0x42021400
 8040c14:	42021800 	.word	0x42021800

08040c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8040c18:	b480      	push	{r7}
 8040c1a:	b083      	sub	sp, #12
 8040c1c:	af00      	add	r7, sp, #0
 8040c1e:	6078      	str	r0, [r7, #4]
 8040c20:	460b      	mov	r3, r1
 8040c22:	807b      	strh	r3, [r7, #2]
 8040c24:	4613      	mov	r3, r2
 8040c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8040c28:	787b      	ldrb	r3, [r7, #1]
 8040c2a:	2b00      	cmp	r3, #0
 8040c2c:	d003      	beq.n	8040c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8040c2e:	887a      	ldrh	r2, [r7, #2]
 8040c30:	687b      	ldr	r3, [r7, #4]
 8040c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8040c34:	e002      	b.n	8040c3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8040c36:	887a      	ldrh	r2, [r7, #2]
 8040c38:	687b      	ldr	r3, [r7, #4]
 8040c3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8040c3c:	bf00      	nop
 8040c3e:	370c      	adds	r7, #12
 8040c40:	46bd      	mov	sp, r7
 8040c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c46:	4770      	bx	lr

08040c48 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8040c48:	b480      	push	{r7}
 8040c4a:	b085      	sub	sp, #20
 8040c4c:	af00      	add	r7, sp, #0
 8040c4e:	6078      	str	r0, [r7, #4]
 8040c50:	460b      	mov	r3, r1
 8040c52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8040c54:	687b      	ldr	r3, [r7, #4]
 8040c56:	695b      	ldr	r3, [r3, #20]
 8040c58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8040c5a:	887a      	ldrh	r2, [r7, #2]
 8040c5c:	68fb      	ldr	r3, [r7, #12]
 8040c5e:	4013      	ands	r3, r2
 8040c60:	041a      	lsls	r2, r3, #16
 8040c62:	68fb      	ldr	r3, [r7, #12]
 8040c64:	43d9      	mvns	r1, r3
 8040c66:	887b      	ldrh	r3, [r7, #2]
 8040c68:	400b      	ands	r3, r1
 8040c6a:	431a      	orrs	r2, r3
 8040c6c:	687b      	ldr	r3, [r7, #4]
 8040c6e:	619a      	str	r2, [r3, #24]
}
 8040c70:	bf00      	nop
 8040c72:	3714      	adds	r7, #20
 8040c74:	46bd      	mov	sp, r7
 8040c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c7a:	4770      	bx	lr

08040c7c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8040c7c:	b480      	push	{r7}
 8040c7e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8040c80:	4b04      	ldr	r3, [pc, #16]	; (8040c94 <HAL_PWREx_GetVoltageRange+0x18>)
 8040c82:	681b      	ldr	r3, [r3, #0]
 8040c84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8040c88:	4618      	mov	r0, r3
 8040c8a:	46bd      	mov	sp, r7
 8040c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c90:	4770      	bx	lr
 8040c92:	bf00      	nop
 8040c94:	40007000 	.word	0x40007000

08040c98 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8040c98:	b580      	push	{r7, lr}
 8040c9a:	b084      	sub	sp, #16
 8040c9c:	af00      	add	r7, sp, #0
 8040c9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8040ca0:	4b27      	ldr	r3, [pc, #156]	; (8040d40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040ca2:	681b      	ldr	r3, [r3, #0]
 8040ca4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8040ca8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8040caa:	f000 f851 	bl	8040d50 <HAL_PWREx_SMPS_GetEffectiveMode>
 8040cae:	4603      	mov	r3, r0
 8040cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8040cb4:	d101      	bne.n	8040cba <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8040cb6:	2301      	movs	r3, #1
 8040cb8:	e03e      	b.n	8040d38 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8040cba:	4b21      	ldr	r3, [pc, #132]	; (8040d40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040cbc:	68db      	ldr	r3, [r3, #12]
 8040cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8040cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8040cc6:	d101      	bne.n	8040ccc <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8040cc8:	2301      	movs	r3, #1
 8040cca:	e035      	b.n	8040d38 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8040ccc:	68ba      	ldr	r2, [r7, #8]
 8040cce:	687b      	ldr	r3, [r7, #4]
 8040cd0:	429a      	cmp	r2, r3
 8040cd2:	d101      	bne.n	8040cd8 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8040cd4:	2300      	movs	r3, #0
 8040cd6:	e02f      	b.n	8040d38 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8040cd8:	4b19      	ldr	r3, [pc, #100]	; (8040d40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040cda:	681b      	ldr	r3, [r3, #0]
 8040cdc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8040ce0:	4917      	ldr	r1, [pc, #92]	; (8040d40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040ce2:	687b      	ldr	r3, [r7, #4]
 8040ce4:	4313      	orrs	r3, r2
 8040ce6:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8040ce8:	4b16      	ldr	r3, [pc, #88]	; (8040d44 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8040cea:	681b      	ldr	r3, [r3, #0]
 8040cec:	095b      	lsrs	r3, r3, #5
 8040cee:	4a16      	ldr	r2, [pc, #88]	; (8040d48 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8040cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8040cf4:	09db      	lsrs	r3, r3, #7
 8040cf6:	2232      	movs	r2, #50	; 0x32
 8040cf8:	fb02 f303 	mul.w	r3, r2, r3
 8040cfc:	4a13      	ldr	r2, [pc, #76]	; (8040d4c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8040cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8040d02:	08db      	lsrs	r3, r3, #3
 8040d04:	3301      	adds	r3, #1
 8040d06:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8040d08:	e002      	b.n	8040d10 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8040d0a:	68fb      	ldr	r3, [r7, #12]
 8040d0c:	3b01      	subs	r3, #1
 8040d0e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8040d10:	4b0b      	ldr	r3, [pc, #44]	; (8040d40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040d12:	695b      	ldr	r3, [r3, #20]
 8040d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8040d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8040d1c:	d102      	bne.n	8040d24 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8040d1e:	68fb      	ldr	r3, [r7, #12]
 8040d20:	2b00      	cmp	r3, #0
 8040d22:	d1f2      	bne.n	8040d0a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8040d24:	4b06      	ldr	r3, [pc, #24]	; (8040d40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040d26:	695b      	ldr	r3, [r3, #20]
 8040d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8040d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8040d30:	d101      	bne.n	8040d36 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8040d32:	2303      	movs	r3, #3
 8040d34:	e000      	b.n	8040d38 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8040d36:	2300      	movs	r3, #0
}
 8040d38:	4618      	mov	r0, r3
 8040d3a:	3710      	adds	r7, #16
 8040d3c:	46bd      	mov	sp, r7
 8040d3e:	bd80      	pop	{r7, pc}
 8040d40:	40007000 	.word	0x40007000
 8040d44:	20018014 	.word	0x20018014
 8040d48:	0a7c5ac5 	.word	0x0a7c5ac5
 8040d4c:	cccccccd 	.word	0xcccccccd

08040d50 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8040d50:	b480      	push	{r7}
 8040d52:	b083      	sub	sp, #12
 8040d54:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8040d56:	4b0f      	ldr	r3, [pc, #60]	; (8040d94 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8040d58:	691b      	ldr	r3, [r3, #16]
 8040d5a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8040d5c:	683b      	ldr	r3, [r7, #0]
 8040d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8040d62:	2b00      	cmp	r3, #0
 8040d64:	d003      	beq.n	8040d6e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8040d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8040d6a:	607b      	str	r3, [r7, #4]
 8040d6c:	e00a      	b.n	8040d84 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8040d6e:	683b      	ldr	r3, [r7, #0]
 8040d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8040d74:	2b00      	cmp	r3, #0
 8040d76:	d103      	bne.n	8040d80 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8040d78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8040d7c:	607b      	str	r3, [r7, #4]
 8040d7e:	e001      	b.n	8040d84 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8040d80:	2300      	movs	r3, #0
 8040d82:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8040d84:	687b      	ldr	r3, [r7, #4]
}
 8040d86:	4618      	mov	r0, r3
 8040d88:	370c      	adds	r7, #12
 8040d8a:	46bd      	mov	sp, r7
 8040d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d90:	4770      	bx	lr
 8040d92:	bf00      	nop
 8040d94:	40007000 	.word	0x40007000

08040d98 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8040d98:	b580      	push	{r7, lr}
 8040d9a:	b088      	sub	sp, #32
 8040d9c:	af00      	add	r7, sp, #0
 8040d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8040da0:	687b      	ldr	r3, [r7, #4]
 8040da2:	2b00      	cmp	r3, #0
 8040da4:	d102      	bne.n	8040dac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8040da6:	2301      	movs	r3, #1
 8040da8:	f000 bc52 	b.w	8041650 <HAL_RCC_OscConfig+0x8b8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8040dac:	4ba3      	ldr	r3, [pc, #652]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040dae:	689b      	ldr	r3, [r3, #8]
 8040db0:	f003 030c 	and.w	r3, r3, #12
 8040db4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8040db6:	4ba1      	ldr	r3, [pc, #644]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040db8:	68db      	ldr	r3, [r3, #12]
 8040dba:	f003 0303 	and.w	r3, r3, #3
 8040dbe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8040dc0:	687b      	ldr	r3, [r7, #4]
 8040dc2:	681b      	ldr	r3, [r3, #0]
 8040dc4:	f003 0310 	and.w	r3, r3, #16
 8040dc8:	2b00      	cmp	r3, #0
 8040dca:	f000 80da 	beq.w	8040f82 <HAL_RCC_OscConfig+0x1ea>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8040dce:	69bb      	ldr	r3, [r7, #24]
 8040dd0:	2b00      	cmp	r3, #0
 8040dd2:	d006      	beq.n	8040de2 <HAL_RCC_OscConfig+0x4a>
 8040dd4:	69bb      	ldr	r3, [r7, #24]
 8040dd6:	2b0c      	cmp	r3, #12
 8040dd8:	f040 8081 	bne.w	8040ede <HAL_RCC_OscConfig+0x146>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8040ddc:	697b      	ldr	r3, [r7, #20]
 8040dde:	2b01      	cmp	r3, #1
 8040de0:	d17d      	bne.n	8040ede <HAL_RCC_OscConfig+0x146>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8040de2:	4b96      	ldr	r3, [pc, #600]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040de4:	681b      	ldr	r3, [r3, #0]
 8040de6:	f003 0302 	and.w	r3, r3, #2
 8040dea:	2b00      	cmp	r3, #0
 8040dec:	d006      	beq.n	8040dfc <HAL_RCC_OscConfig+0x64>
 8040dee:	687b      	ldr	r3, [r7, #4]
 8040df0:	69db      	ldr	r3, [r3, #28]
 8040df2:	2b00      	cmp	r3, #0
 8040df4:	d102      	bne.n	8040dfc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8040df6:	2301      	movs	r3, #1
 8040df8:	f000 bc2a 	b.w	8041650 <HAL_RCC_OscConfig+0x8b8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8040dfc:	687b      	ldr	r3, [r7, #4]
 8040dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8040e00:	4b8e      	ldr	r3, [pc, #568]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040e02:	681b      	ldr	r3, [r3, #0]
 8040e04:	f003 0308 	and.w	r3, r3, #8
 8040e08:	2b00      	cmp	r3, #0
 8040e0a:	d004      	beq.n	8040e16 <HAL_RCC_OscConfig+0x7e>
 8040e0c:	4b8b      	ldr	r3, [pc, #556]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040e0e:	681b      	ldr	r3, [r3, #0]
 8040e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8040e14:	e005      	b.n	8040e22 <HAL_RCC_OscConfig+0x8a>
 8040e16:	4b89      	ldr	r3, [pc, #548]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8040e1c:	091b      	lsrs	r3, r3, #4
 8040e1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8040e22:	4293      	cmp	r3, r2
 8040e24:	d224      	bcs.n	8040e70 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8040e26:	687b      	ldr	r3, [r7, #4]
 8040e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040e2a:	4618      	mov	r0, r3
 8040e2c:	f000 fe2a 	bl	8041a84 <RCC_SetFlashLatencyFromMSIRange>
 8040e30:	4603      	mov	r3, r0
 8040e32:	2b00      	cmp	r3, #0
 8040e34:	d002      	beq.n	8040e3c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8040e36:	2301      	movs	r3, #1
 8040e38:	f000 bc0a 	b.w	8041650 <HAL_RCC_OscConfig+0x8b8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8040e3c:	4b7f      	ldr	r3, [pc, #508]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040e3e:	681b      	ldr	r3, [r3, #0]
 8040e40:	4a7e      	ldr	r2, [pc, #504]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040e42:	f043 0308 	orr.w	r3, r3, #8
 8040e46:	6013      	str	r3, [r2, #0]
 8040e48:	4b7c      	ldr	r3, [pc, #496]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040e4a:	681b      	ldr	r3, [r3, #0]
 8040e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8040e50:	687b      	ldr	r3, [r7, #4]
 8040e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040e54:	4979      	ldr	r1, [pc, #484]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040e56:	4313      	orrs	r3, r2
 8040e58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8040e5a:	4b78      	ldr	r3, [pc, #480]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040e5c:	685b      	ldr	r3, [r3, #4]
 8040e5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8040e62:	687b      	ldr	r3, [r7, #4]
 8040e64:	6a1b      	ldr	r3, [r3, #32]
 8040e66:	021b      	lsls	r3, r3, #8
 8040e68:	4974      	ldr	r1, [pc, #464]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040e6a:	4313      	orrs	r3, r2
 8040e6c:	604b      	str	r3, [r1, #4]
 8040e6e:	e025      	b.n	8040ebc <HAL_RCC_OscConfig+0x124>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8040e70:	4b72      	ldr	r3, [pc, #456]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040e72:	681b      	ldr	r3, [r3, #0]
 8040e74:	4a71      	ldr	r2, [pc, #452]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040e76:	f043 0308 	orr.w	r3, r3, #8
 8040e7a:	6013      	str	r3, [r2, #0]
 8040e7c:	4b6f      	ldr	r3, [pc, #444]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040e7e:	681b      	ldr	r3, [r3, #0]
 8040e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8040e84:	687b      	ldr	r3, [r7, #4]
 8040e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040e88:	496c      	ldr	r1, [pc, #432]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040e8a:	4313      	orrs	r3, r2
 8040e8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8040e8e:	4b6b      	ldr	r3, [pc, #428]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040e90:	685b      	ldr	r3, [r3, #4]
 8040e92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8040e96:	687b      	ldr	r3, [r7, #4]
 8040e98:	6a1b      	ldr	r3, [r3, #32]
 8040e9a:	021b      	lsls	r3, r3, #8
 8040e9c:	4967      	ldr	r1, [pc, #412]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040e9e:	4313      	orrs	r3, r2
 8040ea0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8040ea2:	69bb      	ldr	r3, [r7, #24]
 8040ea4:	2b00      	cmp	r3, #0
 8040ea6:	d109      	bne.n	8040ebc <HAL_RCC_OscConfig+0x124>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8040ea8:	687b      	ldr	r3, [r7, #4]
 8040eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040eac:	4618      	mov	r0, r3
 8040eae:	f000 fde9 	bl	8041a84 <RCC_SetFlashLatencyFromMSIRange>
 8040eb2:	4603      	mov	r3, r0
 8040eb4:	2b00      	cmp	r3, #0
 8040eb6:	d001      	beq.n	8040ebc <HAL_RCC_OscConfig+0x124>
            {
              return HAL_ERROR;
 8040eb8:	2301      	movs	r3, #1
 8040eba:	e3c9      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8040ebc:	f000 fd88 	bl	80419d0 <HAL_RCC_GetHCLKFreq>
 8040ec0:	4602      	mov	r2, r0
 8040ec2:	4b5f      	ldr	r3, [pc, #380]	; (8041040 <HAL_RCC_OscConfig+0x2a8>)
 8040ec4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8040ec6:	4b5f      	ldr	r3, [pc, #380]	; (8041044 <HAL_RCC_OscConfig+0x2ac>)
 8040ec8:	681b      	ldr	r3, [r3, #0]
 8040eca:	4618      	mov	r0, r3
 8040ecc:	f7ff fb18 	bl	8040500 <HAL_InitTick>
 8040ed0:	4603      	mov	r3, r0
 8040ed2:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8040ed4:	7bfb      	ldrb	r3, [r7, #15]
 8040ed6:	2b00      	cmp	r3, #0
 8040ed8:	d052      	beq.n	8040f80 <HAL_RCC_OscConfig+0x1e8>
        {
          return status;
 8040eda:	7bfb      	ldrb	r3, [r7, #15]
 8040edc:	e3b8      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8040ede:	687b      	ldr	r3, [r7, #4]
 8040ee0:	69db      	ldr	r3, [r3, #28]
 8040ee2:	2b00      	cmp	r3, #0
 8040ee4:	d032      	beq.n	8040f4c <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8040ee6:	4b55      	ldr	r3, [pc, #340]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040ee8:	681b      	ldr	r3, [r3, #0]
 8040eea:	4a54      	ldr	r2, [pc, #336]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040eec:	f043 0301 	orr.w	r3, r3, #1
 8040ef0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8040ef2:	f7ff fc25 	bl	8040740 <HAL_GetTick>
 8040ef6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8040ef8:	e008      	b.n	8040f0c <HAL_RCC_OscConfig+0x174>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8040efa:	f7ff fc21 	bl	8040740 <HAL_GetTick>
 8040efe:	4602      	mov	r2, r0
 8040f00:	693b      	ldr	r3, [r7, #16]
 8040f02:	1ad3      	subs	r3, r2, r3
 8040f04:	2b02      	cmp	r3, #2
 8040f06:	d901      	bls.n	8040f0c <HAL_RCC_OscConfig+0x174>
          {
            return HAL_TIMEOUT;
 8040f08:	2303      	movs	r3, #3
 8040f0a:	e3a1      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8040f0c:	4b4b      	ldr	r3, [pc, #300]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040f0e:	681b      	ldr	r3, [r3, #0]
 8040f10:	f003 0302 	and.w	r3, r3, #2
 8040f14:	2b00      	cmp	r3, #0
 8040f16:	d0f0      	beq.n	8040efa <HAL_RCC_OscConfig+0x162>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8040f18:	4b48      	ldr	r3, [pc, #288]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040f1a:	681b      	ldr	r3, [r3, #0]
 8040f1c:	4a47      	ldr	r2, [pc, #284]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040f1e:	f043 0308 	orr.w	r3, r3, #8
 8040f22:	6013      	str	r3, [r2, #0]
 8040f24:	4b45      	ldr	r3, [pc, #276]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040f26:	681b      	ldr	r3, [r3, #0]
 8040f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8040f2c:	687b      	ldr	r3, [r7, #4]
 8040f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040f30:	4942      	ldr	r1, [pc, #264]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040f32:	4313      	orrs	r3, r2
 8040f34:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8040f36:	4b41      	ldr	r3, [pc, #260]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040f38:	685b      	ldr	r3, [r3, #4]
 8040f3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8040f3e:	687b      	ldr	r3, [r7, #4]
 8040f40:	6a1b      	ldr	r3, [r3, #32]
 8040f42:	021b      	lsls	r3, r3, #8
 8040f44:	493d      	ldr	r1, [pc, #244]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040f46:	4313      	orrs	r3, r2
 8040f48:	604b      	str	r3, [r1, #4]
 8040f4a:	e01a      	b.n	8040f82 <HAL_RCC_OscConfig+0x1ea>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8040f4c:	4b3b      	ldr	r3, [pc, #236]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040f4e:	681b      	ldr	r3, [r3, #0]
 8040f50:	4a3a      	ldr	r2, [pc, #232]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040f52:	f023 0301 	bic.w	r3, r3, #1
 8040f56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8040f58:	f7ff fbf2 	bl	8040740 <HAL_GetTick>
 8040f5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8040f5e:	e008      	b.n	8040f72 <HAL_RCC_OscConfig+0x1da>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8040f60:	f7ff fbee 	bl	8040740 <HAL_GetTick>
 8040f64:	4602      	mov	r2, r0
 8040f66:	693b      	ldr	r3, [r7, #16]
 8040f68:	1ad3      	subs	r3, r2, r3
 8040f6a:	2b02      	cmp	r3, #2
 8040f6c:	d901      	bls.n	8040f72 <HAL_RCC_OscConfig+0x1da>
          {
            return HAL_TIMEOUT;
 8040f6e:	2303      	movs	r3, #3
 8040f70:	e36e      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8040f72:	4b32      	ldr	r3, [pc, #200]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040f74:	681b      	ldr	r3, [r3, #0]
 8040f76:	f003 0302 	and.w	r3, r3, #2
 8040f7a:	2b00      	cmp	r3, #0
 8040f7c:	d1f0      	bne.n	8040f60 <HAL_RCC_OscConfig+0x1c8>
 8040f7e:	e000      	b.n	8040f82 <HAL_RCC_OscConfig+0x1ea>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8040f80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8040f82:	687b      	ldr	r3, [r7, #4]
 8040f84:	681b      	ldr	r3, [r3, #0]
 8040f86:	f003 0301 	and.w	r3, r3, #1
 8040f8a:	2b00      	cmp	r3, #0
 8040f8c:	d071      	beq.n	8041072 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8040f8e:	69bb      	ldr	r3, [r7, #24]
 8040f90:	2b08      	cmp	r3, #8
 8040f92:	d005      	beq.n	8040fa0 <HAL_RCC_OscConfig+0x208>
 8040f94:	69bb      	ldr	r3, [r7, #24]
 8040f96:	2b0c      	cmp	r3, #12
 8040f98:	d10e      	bne.n	8040fb8 <HAL_RCC_OscConfig+0x220>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8040f9a:	697b      	ldr	r3, [r7, #20]
 8040f9c:	2b03      	cmp	r3, #3
 8040f9e:	d10b      	bne.n	8040fb8 <HAL_RCC_OscConfig+0x220>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8040fa0:	4b26      	ldr	r3, [pc, #152]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040fa2:	681b      	ldr	r3, [r3, #0]
 8040fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040fa8:	2b00      	cmp	r3, #0
 8040faa:	d061      	beq.n	8041070 <HAL_RCC_OscConfig+0x2d8>
 8040fac:	687b      	ldr	r3, [r7, #4]
 8040fae:	685b      	ldr	r3, [r3, #4]
 8040fb0:	2b00      	cmp	r3, #0
 8040fb2:	d15d      	bne.n	8041070 <HAL_RCC_OscConfig+0x2d8>
      {
        return HAL_ERROR;
 8040fb4:	2301      	movs	r3, #1
 8040fb6:	e34b      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8040fb8:	687b      	ldr	r3, [r7, #4]
 8040fba:	685b      	ldr	r3, [r3, #4]
 8040fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8040fc0:	d106      	bne.n	8040fd0 <HAL_RCC_OscConfig+0x238>
 8040fc2:	4b1e      	ldr	r3, [pc, #120]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040fc4:	681b      	ldr	r3, [r3, #0]
 8040fc6:	4a1d      	ldr	r2, [pc, #116]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8040fcc:	6013      	str	r3, [r2, #0]
 8040fce:	e01d      	b.n	804100c <HAL_RCC_OscConfig+0x274>
 8040fd0:	687b      	ldr	r3, [r7, #4]
 8040fd2:	685b      	ldr	r3, [r3, #4]
 8040fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8040fd8:	d10c      	bne.n	8040ff4 <HAL_RCC_OscConfig+0x25c>
 8040fda:	4b18      	ldr	r3, [pc, #96]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040fdc:	681b      	ldr	r3, [r3, #0]
 8040fde:	4a17      	ldr	r2, [pc, #92]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8040fe4:	6013      	str	r3, [r2, #0]
 8040fe6:	4b15      	ldr	r3, [pc, #84]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040fe8:	681b      	ldr	r3, [r3, #0]
 8040fea:	4a14      	ldr	r2, [pc, #80]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8040ff0:	6013      	str	r3, [r2, #0]
 8040ff2:	e00b      	b.n	804100c <HAL_RCC_OscConfig+0x274>
 8040ff4:	4b11      	ldr	r3, [pc, #68]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040ff6:	681b      	ldr	r3, [r3, #0]
 8040ff8:	4a10      	ldr	r2, [pc, #64]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8040ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8040ffe:	6013      	str	r3, [r2, #0]
 8041000:	4b0e      	ldr	r3, [pc, #56]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8041002:	681b      	ldr	r3, [r3, #0]
 8041004:	4a0d      	ldr	r2, [pc, #52]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8041006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 804100a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 804100c:	687b      	ldr	r3, [r7, #4]
 804100e:	685b      	ldr	r3, [r3, #4]
 8041010:	2b00      	cmp	r3, #0
 8041012:	d019      	beq.n	8041048 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041014:	f7ff fb94 	bl	8040740 <HAL_GetTick>
 8041018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 804101a:	e008      	b.n	804102e <HAL_RCC_OscConfig+0x296>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 804101c:	f7ff fb90 	bl	8040740 <HAL_GetTick>
 8041020:	4602      	mov	r2, r0
 8041022:	693b      	ldr	r3, [r7, #16]
 8041024:	1ad3      	subs	r3, r2, r3
 8041026:	2b64      	cmp	r3, #100	; 0x64
 8041028:	d901      	bls.n	804102e <HAL_RCC_OscConfig+0x296>
          {
            return HAL_TIMEOUT;
 804102a:	2303      	movs	r3, #3
 804102c:	e310      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 804102e:	4b03      	ldr	r3, [pc, #12]	; (804103c <HAL_RCC_OscConfig+0x2a4>)
 8041030:	681b      	ldr	r3, [r3, #0]
 8041032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041036:	2b00      	cmp	r3, #0
 8041038:	d0f0      	beq.n	804101c <HAL_RCC_OscConfig+0x284>
 804103a:	e01a      	b.n	8041072 <HAL_RCC_OscConfig+0x2da>
 804103c:	40021000 	.word	0x40021000
 8041040:	20018014 	.word	0x20018014
 8041044:	20018018 	.word	0x20018018
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041048:	f7ff fb7a 	bl	8040740 <HAL_GetTick>
 804104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 804104e:	e008      	b.n	8041062 <HAL_RCC_OscConfig+0x2ca>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041050:	f7ff fb76 	bl	8040740 <HAL_GetTick>
 8041054:	4602      	mov	r2, r0
 8041056:	693b      	ldr	r3, [r7, #16]
 8041058:	1ad3      	subs	r3, r2, r3
 804105a:	2b64      	cmp	r3, #100	; 0x64
 804105c:	d901      	bls.n	8041062 <HAL_RCC_OscConfig+0x2ca>
          {
            return HAL_TIMEOUT;
 804105e:	2303      	movs	r3, #3
 8041060:	e2f6      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8041062:	4ba6      	ldr	r3, [pc, #664]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 8041064:	681b      	ldr	r3, [r3, #0]
 8041066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804106a:	2b00      	cmp	r3, #0
 804106c:	d1f0      	bne.n	8041050 <HAL_RCC_OscConfig+0x2b8>
 804106e:	e000      	b.n	8041072 <HAL_RCC_OscConfig+0x2da>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8041072:	687b      	ldr	r3, [r7, #4]
 8041074:	681b      	ldr	r3, [r3, #0]
 8041076:	f003 0302 	and.w	r3, r3, #2
 804107a:	2b00      	cmp	r3, #0
 804107c:	d060      	beq.n	8041140 <HAL_RCC_OscConfig+0x3a8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 804107e:	69bb      	ldr	r3, [r7, #24]
 8041080:	2b04      	cmp	r3, #4
 8041082:	d005      	beq.n	8041090 <HAL_RCC_OscConfig+0x2f8>
 8041084:	69bb      	ldr	r3, [r7, #24]
 8041086:	2b0c      	cmp	r3, #12
 8041088:	d119      	bne.n	80410be <HAL_RCC_OscConfig+0x326>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 804108a:	697b      	ldr	r3, [r7, #20]
 804108c:	2b02      	cmp	r3, #2
 804108e:	d116      	bne.n	80410be <HAL_RCC_OscConfig+0x326>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8041090:	4b9a      	ldr	r3, [pc, #616]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 8041092:	681b      	ldr	r3, [r3, #0]
 8041094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041098:	2b00      	cmp	r3, #0
 804109a:	d005      	beq.n	80410a8 <HAL_RCC_OscConfig+0x310>
 804109c:	687b      	ldr	r3, [r7, #4]
 804109e:	68db      	ldr	r3, [r3, #12]
 80410a0:	2b00      	cmp	r3, #0
 80410a2:	d101      	bne.n	80410a8 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80410a4:	2301      	movs	r3, #1
 80410a6:	e2d3      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80410a8:	4b94      	ldr	r3, [pc, #592]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 80410aa:	685b      	ldr	r3, [r3, #4]
 80410ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80410b0:	687b      	ldr	r3, [r7, #4]
 80410b2:	691b      	ldr	r3, [r3, #16]
 80410b4:	061b      	lsls	r3, r3, #24
 80410b6:	4991      	ldr	r1, [pc, #580]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 80410b8:	4313      	orrs	r3, r2
 80410ba:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80410bc:	e040      	b.n	8041140 <HAL_RCC_OscConfig+0x3a8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80410be:	687b      	ldr	r3, [r7, #4]
 80410c0:	68db      	ldr	r3, [r3, #12]
 80410c2:	2b00      	cmp	r3, #0
 80410c4:	d023      	beq.n	804110e <HAL_RCC_OscConfig+0x376>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80410c6:	4b8d      	ldr	r3, [pc, #564]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 80410c8:	681b      	ldr	r3, [r3, #0]
 80410ca:	4a8c      	ldr	r2, [pc, #560]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 80410cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80410d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80410d2:	f7ff fb35 	bl	8040740 <HAL_GetTick>
 80410d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80410d8:	e008      	b.n	80410ec <HAL_RCC_OscConfig+0x354>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80410da:	f7ff fb31 	bl	8040740 <HAL_GetTick>
 80410de:	4602      	mov	r2, r0
 80410e0:	693b      	ldr	r3, [r7, #16]
 80410e2:	1ad3      	subs	r3, r2, r3
 80410e4:	2b02      	cmp	r3, #2
 80410e6:	d901      	bls.n	80410ec <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80410e8:	2303      	movs	r3, #3
 80410ea:	e2b1      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80410ec:	4b83      	ldr	r3, [pc, #524]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 80410ee:	681b      	ldr	r3, [r3, #0]
 80410f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80410f4:	2b00      	cmp	r3, #0
 80410f6:	d0f0      	beq.n	80410da <HAL_RCC_OscConfig+0x342>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80410f8:	4b80      	ldr	r3, [pc, #512]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 80410fa:	685b      	ldr	r3, [r3, #4]
 80410fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8041100:	687b      	ldr	r3, [r7, #4]
 8041102:	691b      	ldr	r3, [r3, #16]
 8041104:	061b      	lsls	r3, r3, #24
 8041106:	497d      	ldr	r1, [pc, #500]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 8041108:	4313      	orrs	r3, r2
 804110a:	604b      	str	r3, [r1, #4]
 804110c:	e018      	b.n	8041140 <HAL_RCC_OscConfig+0x3a8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 804110e:	4b7b      	ldr	r3, [pc, #492]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 8041110:	681b      	ldr	r3, [r3, #0]
 8041112:	4a7a      	ldr	r2, [pc, #488]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 8041114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8041118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804111a:	f7ff fb11 	bl	8040740 <HAL_GetTick>
 804111e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8041120:	e008      	b.n	8041134 <HAL_RCC_OscConfig+0x39c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041122:	f7ff fb0d 	bl	8040740 <HAL_GetTick>
 8041126:	4602      	mov	r2, r0
 8041128:	693b      	ldr	r3, [r7, #16]
 804112a:	1ad3      	subs	r3, r2, r3
 804112c:	2b02      	cmp	r3, #2
 804112e:	d901      	bls.n	8041134 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8041130:	2303      	movs	r3, #3
 8041132:	e28d      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8041134:	4b71      	ldr	r3, [pc, #452]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 8041136:	681b      	ldr	r3, [r3, #0]
 8041138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804113c:	2b00      	cmp	r3, #0
 804113e:	d1f0      	bne.n	8041122 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8041140:	687b      	ldr	r3, [r7, #4]
 8041142:	681b      	ldr	r3, [r3, #0]
 8041144:	f003 0308 	and.w	r3, r3, #8
 8041148:	2b00      	cmp	r3, #0
 804114a:	d051      	beq.n	80411f0 <HAL_RCC_OscConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 804114c:	687b      	ldr	r3, [r7, #4]
 804114e:	695b      	ldr	r3, [r3, #20]
 8041150:	2b00      	cmp	r3, #0
 8041152:	d031      	beq.n	80411b8 <HAL_RCC_OscConfig+0x420>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8041154:	687b      	ldr	r3, [r7, #4]
 8041156:	699b      	ldr	r3, [r3, #24]
 8041158:	2b00      	cmp	r3, #0
 804115a:	d108      	bne.n	804116e <HAL_RCC_OscConfig+0x3d6>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 804115c:	4b67      	ldr	r3, [pc, #412]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 804115e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041162:	4a66      	ldr	r2, [pc, #408]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 8041164:	f023 0310 	bic.w	r3, r3, #16
 8041168:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 804116c:	e007      	b.n	804117e <HAL_RCC_OscConfig+0x3e6>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 804116e:	4b63      	ldr	r3, [pc, #396]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 8041170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041174:	4a61      	ldr	r2, [pc, #388]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 8041176:	f043 0310 	orr.w	r3, r3, #16
 804117a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 804117e:	4b5f      	ldr	r3, [pc, #380]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 8041180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041184:	4a5d      	ldr	r2, [pc, #372]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 8041186:	f043 0301 	orr.w	r3, r3, #1
 804118a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804118e:	f7ff fad7 	bl	8040740 <HAL_GetTick>
 8041192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8041194:	e008      	b.n	80411a8 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041196:	f7ff fad3 	bl	8040740 <HAL_GetTick>
 804119a:	4602      	mov	r2, r0
 804119c:	693b      	ldr	r3, [r7, #16]
 804119e:	1ad3      	subs	r3, r2, r3
 80411a0:	2b07      	cmp	r3, #7
 80411a2:	d901      	bls.n	80411a8 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 80411a4:	2303      	movs	r3, #3
 80411a6:	e253      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80411a8:	4b54      	ldr	r3, [pc, #336]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 80411aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80411ae:	f003 0302 	and.w	r3, r3, #2
 80411b2:	2b00      	cmp	r3, #0
 80411b4:	d0ef      	beq.n	8041196 <HAL_RCC_OscConfig+0x3fe>
 80411b6:	e01b      	b.n	80411f0 <HAL_RCC_OscConfig+0x458>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80411b8:	4b50      	ldr	r3, [pc, #320]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 80411ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80411be:	4a4f      	ldr	r2, [pc, #316]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 80411c0:	f023 0301 	bic.w	r3, r3, #1
 80411c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80411c8:	f7ff faba 	bl	8040740 <HAL_GetTick>
 80411cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80411ce:	e008      	b.n	80411e2 <HAL_RCC_OscConfig+0x44a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80411d0:	f7ff fab6 	bl	8040740 <HAL_GetTick>
 80411d4:	4602      	mov	r2, r0
 80411d6:	693b      	ldr	r3, [r7, #16]
 80411d8:	1ad3      	subs	r3, r2, r3
 80411da:	2b07      	cmp	r3, #7
 80411dc:	d901      	bls.n	80411e2 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 80411de:	2303      	movs	r3, #3
 80411e0:	e236      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80411e2:	4b46      	ldr	r3, [pc, #280]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 80411e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80411e8:	f003 0302 	and.w	r3, r3, #2
 80411ec:	2b00      	cmp	r3, #0
 80411ee:	d1ef      	bne.n	80411d0 <HAL_RCC_OscConfig+0x438>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80411f0:	687b      	ldr	r3, [r7, #4]
 80411f2:	681b      	ldr	r3, [r3, #0]
 80411f4:	f003 0304 	and.w	r3, r3, #4
 80411f8:	2b00      	cmp	r3, #0
 80411fa:	f000 8109 	beq.w	8041410 <HAL_RCC_OscConfig+0x678>
  {
    FlagStatus       pwrclkchanged = RESET;
 80411fe:	2300      	movs	r3, #0
 8041200:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8041202:	4b3e      	ldr	r3, [pc, #248]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 8041204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804120a:	2b00      	cmp	r3, #0
 804120c:	d10d      	bne.n	804122a <HAL_RCC_OscConfig+0x492>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 804120e:	4b3b      	ldr	r3, [pc, #236]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 8041210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041212:	4a3a      	ldr	r2, [pc, #232]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 8041214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041218:	6593      	str	r3, [r2, #88]	; 0x58
 804121a:	4b38      	ldr	r3, [pc, #224]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 804121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041222:	60bb      	str	r3, [r7, #8]
 8041224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8041226:	2301      	movs	r3, #1
 8041228:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 804122a:	4b35      	ldr	r3, [pc, #212]	; (8041300 <HAL_RCC_OscConfig+0x568>)
 804122c:	681b      	ldr	r3, [r3, #0]
 804122e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041232:	2b00      	cmp	r3, #0
 8041234:	d118      	bne.n	8041268 <HAL_RCC_OscConfig+0x4d0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8041236:	4b32      	ldr	r3, [pc, #200]	; (8041300 <HAL_RCC_OscConfig+0x568>)
 8041238:	681b      	ldr	r3, [r3, #0]
 804123a:	4a31      	ldr	r2, [pc, #196]	; (8041300 <HAL_RCC_OscConfig+0x568>)
 804123c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8041242:	f7ff fa7d 	bl	8040740 <HAL_GetTick>
 8041246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041248:	e008      	b.n	804125c <HAL_RCC_OscConfig+0x4c4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 804124a:	f7ff fa79 	bl	8040740 <HAL_GetTick>
 804124e:	4602      	mov	r2, r0
 8041250:	693b      	ldr	r3, [r7, #16]
 8041252:	1ad3      	subs	r3, r2, r3
 8041254:	2b02      	cmp	r3, #2
 8041256:	d901      	bls.n	804125c <HAL_RCC_OscConfig+0x4c4>
        {
          return HAL_TIMEOUT;
 8041258:	2303      	movs	r3, #3
 804125a:	e1f9      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 804125c:	4b28      	ldr	r3, [pc, #160]	; (8041300 <HAL_RCC_OscConfig+0x568>)
 804125e:	681b      	ldr	r3, [r3, #0]
 8041260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041264:	2b00      	cmp	r3, #0
 8041266:	d0f0      	beq.n	804124a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8041268:	687b      	ldr	r3, [r7, #4]
 804126a:	689b      	ldr	r3, [r3, #8]
 804126c:	f003 0301 	and.w	r3, r3, #1
 8041270:	2b00      	cmp	r3, #0
 8041272:	d01f      	beq.n	80412b4 <HAL_RCC_OscConfig+0x51c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8041274:	687b      	ldr	r3, [r7, #4]
 8041276:	689b      	ldr	r3, [r3, #8]
 8041278:	f003 0304 	and.w	r3, r3, #4
 804127c:	2b00      	cmp	r3, #0
 804127e:	d010      	beq.n	80412a2 <HAL_RCC_OscConfig+0x50a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8041280:	4b1e      	ldr	r3, [pc, #120]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 8041282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041286:	4a1d      	ldr	r2, [pc, #116]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 8041288:	f043 0304 	orr.w	r3, r3, #4
 804128c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8041290:	4b1a      	ldr	r3, [pc, #104]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 8041292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041296:	4a19      	ldr	r2, [pc, #100]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 8041298:	f043 0301 	orr.w	r3, r3, #1
 804129c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80412a0:	e018      	b.n	80412d4 <HAL_RCC_OscConfig+0x53c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80412a2:	4b16      	ldr	r3, [pc, #88]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 80412a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80412a8:	4a14      	ldr	r2, [pc, #80]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 80412aa:	f043 0301 	orr.w	r3, r3, #1
 80412ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80412b2:	e00f      	b.n	80412d4 <HAL_RCC_OscConfig+0x53c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80412b4:	4b11      	ldr	r3, [pc, #68]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 80412b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80412ba:	4a10      	ldr	r2, [pc, #64]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 80412bc:	f023 0301 	bic.w	r3, r3, #1
 80412c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80412c4:	4b0d      	ldr	r3, [pc, #52]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 80412c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80412ca:	4a0c      	ldr	r2, [pc, #48]	; (80412fc <HAL_RCC_OscConfig+0x564>)
 80412cc:	f023 0304 	bic.w	r3, r3, #4
 80412d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80412d4:	687b      	ldr	r3, [r7, #4]
 80412d6:	689b      	ldr	r3, [r3, #8]
 80412d8:	2b00      	cmp	r3, #0
 80412da:	d058      	beq.n	804138e <HAL_RCC_OscConfig+0x5f6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80412dc:	f7ff fa30 	bl	8040740 <HAL_GetTick>
 80412e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80412e2:	e00f      	b.n	8041304 <HAL_RCC_OscConfig+0x56c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80412e4:	f7ff fa2c 	bl	8040740 <HAL_GetTick>
 80412e8:	4602      	mov	r2, r0
 80412ea:	693b      	ldr	r3, [r7, #16]
 80412ec:	1ad3      	subs	r3, r2, r3
 80412ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80412f2:	4293      	cmp	r3, r2
 80412f4:	d906      	bls.n	8041304 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 80412f6:	2303      	movs	r3, #3
 80412f8:	e1aa      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
 80412fa:	bf00      	nop
 80412fc:	40021000 	.word	0x40021000
 8041300:	40007000 	.word	0x40007000
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8041304:	4bb0      	ldr	r3, [pc, #704]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 8041306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804130a:	f003 0302 	and.w	r3, r3, #2
 804130e:	2b00      	cmp	r3, #0
 8041310:	d0e8      	beq.n	80412e4 <HAL_RCC_OscConfig+0x54c>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8041312:	687b      	ldr	r3, [r7, #4]
 8041314:	689b      	ldr	r3, [r3, #8]
 8041316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804131a:	2b00      	cmp	r3, #0
 804131c:	d01b      	beq.n	8041356 <HAL_RCC_OscConfig+0x5be>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 804131e:	4baa      	ldr	r3, [pc, #680]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 8041320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041324:	4aa8      	ldr	r2, [pc, #672]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 8041326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804132a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 804132e:	e00a      	b.n	8041346 <HAL_RCC_OscConfig+0x5ae>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041330:	f7ff fa06 	bl	8040740 <HAL_GetTick>
 8041334:	4602      	mov	r2, r0
 8041336:	693b      	ldr	r3, [r7, #16]
 8041338:	1ad3      	subs	r3, r2, r3
 804133a:	f241 3288 	movw	r2, #5000	; 0x1388
 804133e:	4293      	cmp	r3, r2
 8041340:	d901      	bls.n	8041346 <HAL_RCC_OscConfig+0x5ae>
          {
            return HAL_TIMEOUT;
 8041342:	2303      	movs	r3, #3
 8041344:	e184      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8041346:	4ba0      	ldr	r3, [pc, #640]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 8041348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804134c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8041350:	2b00      	cmp	r3, #0
 8041352:	d0ed      	beq.n	8041330 <HAL_RCC_OscConfig+0x598>
 8041354:	e053      	b.n	80413fe <HAL_RCC_OscConfig+0x666>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8041356:	4b9c      	ldr	r3, [pc, #624]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 8041358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804135c:	4a9a      	ldr	r2, [pc, #616]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 804135e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8041362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8041366:	e00a      	b.n	804137e <HAL_RCC_OscConfig+0x5e6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041368:	f7ff f9ea 	bl	8040740 <HAL_GetTick>
 804136c:	4602      	mov	r2, r0
 804136e:	693b      	ldr	r3, [r7, #16]
 8041370:	1ad3      	subs	r3, r2, r3
 8041372:	f241 3288 	movw	r2, #5000	; 0x1388
 8041376:	4293      	cmp	r3, r2
 8041378:	d901      	bls.n	804137e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 804137a:	2303      	movs	r3, #3
 804137c:	e168      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 804137e:	4b92      	ldr	r3, [pc, #584]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 8041380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8041388:	2b00      	cmp	r3, #0
 804138a:	d1ed      	bne.n	8041368 <HAL_RCC_OscConfig+0x5d0>
 804138c:	e037      	b.n	80413fe <HAL_RCC_OscConfig+0x666>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804138e:	f7ff f9d7 	bl	8040740 <HAL_GetTick>
 8041392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8041394:	e00a      	b.n	80413ac <HAL_RCC_OscConfig+0x614>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041396:	f7ff f9d3 	bl	8040740 <HAL_GetTick>
 804139a:	4602      	mov	r2, r0
 804139c:	693b      	ldr	r3, [r7, #16]
 804139e:	1ad3      	subs	r3, r2, r3
 80413a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80413a4:	4293      	cmp	r3, r2
 80413a6:	d901      	bls.n	80413ac <HAL_RCC_OscConfig+0x614>
        {
          return HAL_TIMEOUT;
 80413a8:	2303      	movs	r3, #3
 80413aa:	e151      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80413ac:	4b86      	ldr	r3, [pc, #536]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 80413ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80413b2:	f003 0302 	and.w	r3, r3, #2
 80413b6:	2b00      	cmp	r3, #0
 80413b8:	d1ed      	bne.n	8041396 <HAL_RCC_OscConfig+0x5fe>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80413ba:	4b83      	ldr	r3, [pc, #524]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 80413bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80413c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80413c4:	2b00      	cmp	r3, #0
 80413c6:	d01a      	beq.n	80413fe <HAL_RCC_OscConfig+0x666>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80413c8:	4b7f      	ldr	r3, [pc, #508]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 80413ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80413ce:	4a7e      	ldr	r2, [pc, #504]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 80413d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80413d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80413d8:	e00a      	b.n	80413f0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80413da:	f7ff f9b1 	bl	8040740 <HAL_GetTick>
 80413de:	4602      	mov	r2, r0
 80413e0:	693b      	ldr	r3, [r7, #16]
 80413e2:	1ad3      	subs	r3, r2, r3
 80413e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80413e8:	4293      	cmp	r3, r2
 80413ea:	d901      	bls.n	80413f0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80413ec:	2303      	movs	r3, #3
 80413ee:	e12f      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80413f0:	4b75      	ldr	r3, [pc, #468]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 80413f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80413f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80413fa:	2b00      	cmp	r3, #0
 80413fc:	d1ed      	bne.n	80413da <HAL_RCC_OscConfig+0x642>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80413fe:	7ffb      	ldrb	r3, [r7, #31]
 8041400:	2b01      	cmp	r3, #1
 8041402:	d105      	bne.n	8041410 <HAL_RCC_OscConfig+0x678>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8041404:	4b70      	ldr	r3, [pc, #448]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 8041406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041408:	4a6f      	ldr	r2, [pc, #444]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 804140a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804140e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8041410:	687b      	ldr	r3, [r7, #4]
 8041412:	681b      	ldr	r3, [r3, #0]
 8041414:	f003 0320 	and.w	r3, r3, #32
 8041418:	2b00      	cmp	r3, #0
 804141a:	d03c      	beq.n	8041496 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 804141c:	687b      	ldr	r3, [r7, #4]
 804141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041420:	2b00      	cmp	r3, #0
 8041422:	d01c      	beq.n	804145e <HAL_RCC_OscConfig+0x6c6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8041424:	4b68      	ldr	r3, [pc, #416]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 8041426:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 804142a:	4a67      	ldr	r2, [pc, #412]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 804142c:	f043 0301 	orr.w	r3, r3, #1
 8041430:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041434:	f7ff f984 	bl	8040740 <HAL_GetTick>
 8041438:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 804143a:	e008      	b.n	804144e <HAL_RCC_OscConfig+0x6b6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 804143c:	f7ff f980 	bl	8040740 <HAL_GetTick>
 8041440:	4602      	mov	r2, r0
 8041442:	693b      	ldr	r3, [r7, #16]
 8041444:	1ad3      	subs	r3, r2, r3
 8041446:	2b02      	cmp	r3, #2
 8041448:	d901      	bls.n	804144e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 804144a:	2303      	movs	r3, #3
 804144c:	e100      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 804144e:	4b5e      	ldr	r3, [pc, #376]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 8041450:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041454:	f003 0302 	and.w	r3, r3, #2
 8041458:	2b00      	cmp	r3, #0
 804145a:	d0ef      	beq.n	804143c <HAL_RCC_OscConfig+0x6a4>
 804145c:	e01b      	b.n	8041496 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 804145e:	4b5a      	ldr	r3, [pc, #360]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 8041460:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041464:	4a58      	ldr	r2, [pc, #352]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 8041466:	f023 0301 	bic.w	r3, r3, #1
 804146a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804146e:	f7ff f967 	bl	8040740 <HAL_GetTick>
 8041472:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8041474:	e008      	b.n	8041488 <HAL_RCC_OscConfig+0x6f0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8041476:	f7ff f963 	bl	8040740 <HAL_GetTick>
 804147a:	4602      	mov	r2, r0
 804147c:	693b      	ldr	r3, [r7, #16]
 804147e:	1ad3      	subs	r3, r2, r3
 8041480:	2b02      	cmp	r3, #2
 8041482:	d901      	bls.n	8041488 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_TIMEOUT;
 8041484:	2303      	movs	r3, #3
 8041486:	e0e3      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8041488:	4b4f      	ldr	r3, [pc, #316]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 804148a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 804148e:	f003 0302 	and.w	r3, r3, #2
 8041492:	2b00      	cmp	r3, #0
 8041494:	d1ef      	bne.n	8041476 <HAL_RCC_OscConfig+0x6de>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8041496:	687b      	ldr	r3, [r7, #4]
 8041498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804149a:	2b00      	cmp	r3, #0
 804149c:	f000 80d7 	beq.w	804164e <HAL_RCC_OscConfig+0x8b6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80414a0:	4b49      	ldr	r3, [pc, #292]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 80414a2:	689b      	ldr	r3, [r3, #8]
 80414a4:	f003 030c 	and.w	r3, r3, #12
 80414a8:	2b0c      	cmp	r3, #12
 80414aa:	f000 8091 	beq.w	80415d0 <HAL_RCC_OscConfig+0x838>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80414ae:	687b      	ldr	r3, [r7, #4]
 80414b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80414b2:	2b02      	cmp	r3, #2
 80414b4:	d15a      	bne.n	804156c <HAL_RCC_OscConfig+0x7d4>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80414b6:	4b44      	ldr	r3, [pc, #272]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 80414b8:	681b      	ldr	r3, [r3, #0]
 80414ba:	4a43      	ldr	r2, [pc, #268]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 80414bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80414c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80414c2:	f7ff f93d 	bl	8040740 <HAL_GetTick>
 80414c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80414c8:	e008      	b.n	80414dc <HAL_RCC_OscConfig+0x744>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80414ca:	f7ff f939 	bl	8040740 <HAL_GetTick>
 80414ce:	4602      	mov	r2, r0
 80414d0:	693b      	ldr	r3, [r7, #16]
 80414d2:	1ad3      	subs	r3, r2, r3
 80414d4:	2b02      	cmp	r3, #2
 80414d6:	d901      	bls.n	80414dc <HAL_RCC_OscConfig+0x744>
          {
            return HAL_TIMEOUT;
 80414d8:	2303      	movs	r3, #3
 80414da:	e0b9      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80414dc:	4b3a      	ldr	r3, [pc, #232]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 80414de:	681b      	ldr	r3, [r3, #0]
 80414e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80414e4:	2b00      	cmp	r3, #0
 80414e6:	d1f0      	bne.n	80414ca <HAL_RCC_OscConfig+0x732>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80414e8:	4b37      	ldr	r3, [pc, #220]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 80414ea:	68da      	ldr	r2, [r3, #12]
 80414ec:	4b37      	ldr	r3, [pc, #220]	; (80415cc <HAL_RCC_OscConfig+0x834>)
 80414ee:	4013      	ands	r3, r2
 80414f0:	687a      	ldr	r2, [r7, #4]
 80414f2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80414f4:	687a      	ldr	r2, [r7, #4]
 80414f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80414f8:	3a01      	subs	r2, #1
 80414fa:	0112      	lsls	r2, r2, #4
 80414fc:	4311      	orrs	r1, r2
 80414fe:	687a      	ldr	r2, [r7, #4]
 8041500:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8041502:	0212      	lsls	r2, r2, #8
 8041504:	4311      	orrs	r1, r2
 8041506:	687a      	ldr	r2, [r7, #4]
 8041508:	6c12      	ldr	r2, [r2, #64]	; 0x40
 804150a:	0852      	lsrs	r2, r2, #1
 804150c:	3a01      	subs	r2, #1
 804150e:	0552      	lsls	r2, r2, #21
 8041510:	4311      	orrs	r1, r2
 8041512:	687a      	ldr	r2, [r7, #4]
 8041514:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8041516:	0852      	lsrs	r2, r2, #1
 8041518:	3a01      	subs	r2, #1
 804151a:	0652      	lsls	r2, r2, #25
 804151c:	4311      	orrs	r1, r2
 804151e:	687a      	ldr	r2, [r7, #4]
 8041520:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8041522:	06d2      	lsls	r2, r2, #27
 8041524:	430a      	orrs	r2, r1
 8041526:	4928      	ldr	r1, [pc, #160]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 8041528:	4313      	orrs	r3, r2
 804152a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 804152c:	4b26      	ldr	r3, [pc, #152]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 804152e:	681b      	ldr	r3, [r3, #0]
 8041530:	4a25      	ldr	r2, [pc, #148]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 8041532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8041536:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8041538:	4b23      	ldr	r3, [pc, #140]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 804153a:	68db      	ldr	r3, [r3, #12]
 804153c:	4a22      	ldr	r2, [pc, #136]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 804153e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8041542:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041544:	f7ff f8fc 	bl	8040740 <HAL_GetTick>
 8041548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 804154a:	e008      	b.n	804155e <HAL_RCC_OscConfig+0x7c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 804154c:	f7ff f8f8 	bl	8040740 <HAL_GetTick>
 8041550:	4602      	mov	r2, r0
 8041552:	693b      	ldr	r3, [r7, #16]
 8041554:	1ad3      	subs	r3, r2, r3
 8041556:	2b02      	cmp	r3, #2
 8041558:	d901      	bls.n	804155e <HAL_RCC_OscConfig+0x7c6>
          {
            return HAL_TIMEOUT;
 804155a:	2303      	movs	r3, #3
 804155c:	e078      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 804155e:	4b1a      	ldr	r3, [pc, #104]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 8041560:	681b      	ldr	r3, [r3, #0]
 8041562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041566:	2b00      	cmp	r3, #0
 8041568:	d0f0      	beq.n	804154c <HAL_RCC_OscConfig+0x7b4>
 804156a:	e070      	b.n	804164e <HAL_RCC_OscConfig+0x8b6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 804156c:	4b16      	ldr	r3, [pc, #88]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 804156e:	681b      	ldr	r3, [r3, #0]
 8041570:	4a15      	ldr	r2, [pc, #84]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 8041572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041576:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8041578:	4b13      	ldr	r3, [pc, #76]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 804157a:	681b      	ldr	r3, [r3, #0]
 804157c:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8041580:	2b00      	cmp	r3, #0
 8041582:	d105      	bne.n	8041590 <HAL_RCC_OscConfig+0x7f8>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8041584:	4b10      	ldr	r3, [pc, #64]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 8041586:	68db      	ldr	r3, [r3, #12]
 8041588:	4a0f      	ldr	r2, [pc, #60]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 804158a:	f023 0303 	bic.w	r3, r3, #3
 804158e:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8041590:	4b0d      	ldr	r3, [pc, #52]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 8041592:	68db      	ldr	r3, [r3, #12]
 8041594:	4a0c      	ldr	r2, [pc, #48]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 8041596:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 804159a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 804159e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80415a0:	f7ff f8ce 	bl	8040740 <HAL_GetTick>
 80415a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80415a6:	e008      	b.n	80415ba <HAL_RCC_OscConfig+0x822>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80415a8:	f7ff f8ca 	bl	8040740 <HAL_GetTick>
 80415ac:	4602      	mov	r2, r0
 80415ae:	693b      	ldr	r3, [r7, #16]
 80415b0:	1ad3      	subs	r3, r2, r3
 80415b2:	2b02      	cmp	r3, #2
 80415b4:	d901      	bls.n	80415ba <HAL_RCC_OscConfig+0x822>
          {
            return HAL_TIMEOUT;
 80415b6:	2303      	movs	r3, #3
 80415b8:	e04a      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80415ba:	4b03      	ldr	r3, [pc, #12]	; (80415c8 <HAL_RCC_OscConfig+0x830>)
 80415bc:	681b      	ldr	r3, [r3, #0]
 80415be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80415c2:	2b00      	cmp	r3, #0
 80415c4:	d1f0      	bne.n	80415a8 <HAL_RCC_OscConfig+0x810>
 80415c6:	e042      	b.n	804164e <HAL_RCC_OscConfig+0x8b6>
 80415c8:	40021000 	.word	0x40021000
 80415cc:	019f800c 	.word	0x019f800c
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80415d0:	687b      	ldr	r3, [r7, #4]
 80415d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80415d4:	2b01      	cmp	r3, #1
 80415d6:	d101      	bne.n	80415dc <HAL_RCC_OscConfig+0x844>
      {
        return HAL_ERROR;
 80415d8:	2301      	movs	r3, #1
 80415da:	e039      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80415dc:	4b1e      	ldr	r3, [pc, #120]	; (8041658 <HAL_RCC_OscConfig+0x8c0>)
 80415de:	68db      	ldr	r3, [r3, #12]
 80415e0:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80415e2:	697b      	ldr	r3, [r7, #20]
 80415e4:	f003 0203 	and.w	r2, r3, #3
 80415e8:	687b      	ldr	r3, [r7, #4]
 80415ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80415ec:	429a      	cmp	r2, r3
 80415ee:	d12c      	bne.n	804164a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80415f0:	697b      	ldr	r3, [r7, #20]
 80415f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80415f6:	687b      	ldr	r3, [r7, #4]
 80415f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80415fa:	3b01      	subs	r3, #1
 80415fc:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80415fe:	429a      	cmp	r2, r3
 8041600:	d123      	bne.n	804164a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8041602:	697b      	ldr	r3, [r7, #20]
 8041604:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8041608:	687b      	ldr	r3, [r7, #4]
 804160a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804160c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 804160e:	429a      	cmp	r2, r3
 8041610:	d11b      	bne.n	804164a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8041612:	697b      	ldr	r3, [r7, #20]
 8041614:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8041618:	687b      	ldr	r3, [r7, #4]
 804161a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804161c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 804161e:	429a      	cmp	r2, r3
 8041620:	d113      	bne.n	804164a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8041622:	697b      	ldr	r3, [r7, #20]
 8041624:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8041628:	687b      	ldr	r3, [r7, #4]
 804162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804162c:	085b      	lsrs	r3, r3, #1
 804162e:	3b01      	subs	r3, #1
 8041630:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8041632:	429a      	cmp	r2, r3
 8041634:	d109      	bne.n	804164a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8041636:	697b      	ldr	r3, [r7, #20]
 8041638:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 804163c:	687b      	ldr	r3, [r7, #4]
 804163e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041640:	085b      	lsrs	r3, r3, #1
 8041642:	3b01      	subs	r3, #1
 8041644:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8041646:	429a      	cmp	r2, r3
 8041648:	d001      	beq.n	804164e <HAL_RCC_OscConfig+0x8b6>
        {
          return HAL_ERROR;
 804164a:	2301      	movs	r3, #1
 804164c:	e000      	b.n	8041650 <HAL_RCC_OscConfig+0x8b8>
        }
      }
    }
  }

  return HAL_OK;
 804164e:	2300      	movs	r3, #0
}
 8041650:	4618      	mov	r0, r3
 8041652:	3720      	adds	r7, #32
 8041654:	46bd      	mov	sp, r7
 8041656:	bd80      	pop	{r7, pc}
 8041658:	40021000 	.word	0x40021000

0804165c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 804165c:	b580      	push	{r7, lr}
 804165e:	b086      	sub	sp, #24
 8041660:	af00      	add	r7, sp, #0
 8041662:	6078      	str	r0, [r7, #4]
 8041664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8041666:	2300      	movs	r3, #0
 8041668:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 804166a:	687b      	ldr	r3, [r7, #4]
 804166c:	2b00      	cmp	r3, #0
 804166e:	d101      	bne.n	8041674 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8041670:	2301      	movs	r3, #1
 8041672:	e104      	b.n	804187e <HAL_RCC_ClockConfig+0x222>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8041674:	4b84      	ldr	r3, [pc, #528]	; (8041888 <HAL_RCC_ClockConfig+0x22c>)
 8041676:	681b      	ldr	r3, [r3, #0]
 8041678:	f003 030f 	and.w	r3, r3, #15
 804167c:	683a      	ldr	r2, [r7, #0]
 804167e:	429a      	cmp	r2, r3
 8041680:	d910      	bls.n	80416a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041682:	4b81      	ldr	r3, [pc, #516]	; (8041888 <HAL_RCC_ClockConfig+0x22c>)
 8041684:	681b      	ldr	r3, [r3, #0]
 8041686:	f023 020f 	bic.w	r2, r3, #15
 804168a:	497f      	ldr	r1, [pc, #508]	; (8041888 <HAL_RCC_ClockConfig+0x22c>)
 804168c:	683b      	ldr	r3, [r7, #0]
 804168e:	4313      	orrs	r3, r2
 8041690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041692:	4b7d      	ldr	r3, [pc, #500]	; (8041888 <HAL_RCC_ClockConfig+0x22c>)
 8041694:	681b      	ldr	r3, [r3, #0]
 8041696:	f003 030f 	and.w	r3, r3, #15
 804169a:	683a      	ldr	r2, [r7, #0]
 804169c:	429a      	cmp	r2, r3
 804169e:	d001      	beq.n	80416a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80416a0:	2301      	movs	r3, #1
 80416a2:	e0ec      	b.n	804187e <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80416a4:	687b      	ldr	r3, [r7, #4]
 80416a6:	681b      	ldr	r3, [r3, #0]
 80416a8:	f003 0301 	and.w	r3, r3, #1
 80416ac:	2b00      	cmp	r3, #0
 80416ae:	f000 808b 	beq.w	80417c8 <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80416b2:	687b      	ldr	r3, [r7, #4]
 80416b4:	685b      	ldr	r3, [r3, #4]
 80416b6:	2b03      	cmp	r3, #3
 80416b8:	d134      	bne.n	8041724 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80416ba:	4b74      	ldr	r3, [pc, #464]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 80416bc:	681b      	ldr	r3, [r3, #0]
 80416be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80416c2:	2b00      	cmp	r3, #0
 80416c4:	d101      	bne.n	80416ca <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80416c6:	2301      	movs	r3, #1
 80416c8:	e0d9      	b.n	804187e <HAL_RCC_ClockConfig+0x222>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80416ca:	f000 fa3f 	bl	8041b4c <RCC_GetSysClockFreqFromPLLSource>
 80416ce:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80416d0:	693b      	ldr	r3, [r7, #16]
 80416d2:	4a6f      	ldr	r2, [pc, #444]	; (8041890 <HAL_RCC_ClockConfig+0x234>)
 80416d4:	4293      	cmp	r3, r2
 80416d6:	d956      	bls.n	8041786 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80416d8:	4b6c      	ldr	r3, [pc, #432]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 80416da:	689b      	ldr	r3, [r3, #8]
 80416dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80416e0:	2b00      	cmp	r3, #0
 80416e2:	d10a      	bne.n	80416fa <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80416e4:	4b69      	ldr	r3, [pc, #420]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 80416e6:	689b      	ldr	r3, [r3, #8]
 80416e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80416ec:	4a67      	ldr	r2, [pc, #412]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 80416ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80416f2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80416f4:	2380      	movs	r3, #128	; 0x80
 80416f6:	617b      	str	r3, [r7, #20]
 80416f8:	e045      	b.n	8041786 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80416fa:	687b      	ldr	r3, [r7, #4]
 80416fc:	681b      	ldr	r3, [r3, #0]
 80416fe:	f003 0302 	and.w	r3, r3, #2
 8041702:	2b00      	cmp	r3, #0
 8041704:	d03f      	beq.n	8041786 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8041706:	687b      	ldr	r3, [r7, #4]
 8041708:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 804170a:	2b00      	cmp	r3, #0
 804170c:	d13b      	bne.n	8041786 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 804170e:	4b5f      	ldr	r3, [pc, #380]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 8041710:	689b      	ldr	r3, [r3, #8]
 8041712:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8041716:	4a5d      	ldr	r2, [pc, #372]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 8041718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804171c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 804171e:	2380      	movs	r3, #128	; 0x80
 8041720:	617b      	str	r3, [r7, #20]
 8041722:	e030      	b.n	8041786 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8041724:	687b      	ldr	r3, [r7, #4]
 8041726:	685b      	ldr	r3, [r3, #4]
 8041728:	2b02      	cmp	r3, #2
 804172a:	d107      	bne.n	804173c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 804172c:	4b57      	ldr	r3, [pc, #348]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 804172e:	681b      	ldr	r3, [r3, #0]
 8041730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041734:	2b00      	cmp	r3, #0
 8041736:	d115      	bne.n	8041764 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8041738:	2301      	movs	r3, #1
 804173a:	e0a0      	b.n	804187e <HAL_RCC_ClockConfig+0x222>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 804173c:	687b      	ldr	r3, [r7, #4]
 804173e:	685b      	ldr	r3, [r3, #4]
 8041740:	2b00      	cmp	r3, #0
 8041742:	d107      	bne.n	8041754 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8041744:	4b51      	ldr	r3, [pc, #324]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 8041746:	681b      	ldr	r3, [r3, #0]
 8041748:	f003 0302 	and.w	r3, r3, #2
 804174c:	2b00      	cmp	r3, #0
 804174e:	d109      	bne.n	8041764 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8041750:	2301      	movs	r3, #1
 8041752:	e094      	b.n	804187e <HAL_RCC_ClockConfig+0x222>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8041754:	4b4d      	ldr	r3, [pc, #308]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 8041756:	681b      	ldr	r3, [r3, #0]
 8041758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804175c:	2b00      	cmp	r3, #0
 804175e:	d101      	bne.n	8041764 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8041760:	2301      	movs	r3, #1
 8041762:	e08c      	b.n	804187e <HAL_RCC_ClockConfig+0x222>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8041764:	f000 f89a 	bl	804189c <HAL_RCC_GetSysClockFreq>
 8041768:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 804176a:	693b      	ldr	r3, [r7, #16]
 804176c:	4a48      	ldr	r2, [pc, #288]	; (8041890 <HAL_RCC_ClockConfig+0x234>)
 804176e:	4293      	cmp	r3, r2
 8041770:	d909      	bls.n	8041786 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8041772:	4b46      	ldr	r3, [pc, #280]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 8041774:	689b      	ldr	r3, [r3, #8]
 8041776:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 804177a:	4a44      	ldr	r2, [pc, #272]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 804177c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8041780:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8041782:	2380      	movs	r3, #128	; 0x80
 8041784:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8041786:	4b41      	ldr	r3, [pc, #260]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 8041788:	689b      	ldr	r3, [r3, #8]
 804178a:	f023 0203 	bic.w	r2, r3, #3
 804178e:	687b      	ldr	r3, [r7, #4]
 8041790:	685b      	ldr	r3, [r3, #4]
 8041792:	493e      	ldr	r1, [pc, #248]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 8041794:	4313      	orrs	r3, r2
 8041796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041798:	f7fe ffd2 	bl	8040740 <HAL_GetTick>
 804179c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804179e:	e00a      	b.n	80417b6 <HAL_RCC_ClockConfig+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80417a0:	f7fe ffce 	bl	8040740 <HAL_GetTick>
 80417a4:	4602      	mov	r2, r0
 80417a6:	68fb      	ldr	r3, [r7, #12]
 80417a8:	1ad3      	subs	r3, r2, r3
 80417aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80417ae:	4293      	cmp	r3, r2
 80417b0:	d901      	bls.n	80417b6 <HAL_RCC_ClockConfig+0x15a>
      {
        return HAL_TIMEOUT;
 80417b2:	2303      	movs	r3, #3
 80417b4:	e063      	b.n	804187e <HAL_RCC_ClockConfig+0x222>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80417b6:	4b35      	ldr	r3, [pc, #212]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 80417b8:	689b      	ldr	r3, [r3, #8]
 80417ba:	f003 020c 	and.w	r2, r3, #12
 80417be:	687b      	ldr	r3, [r7, #4]
 80417c0:	685b      	ldr	r3, [r3, #4]
 80417c2:	009b      	lsls	r3, r3, #2
 80417c4:	429a      	cmp	r2, r3
 80417c6:	d1eb      	bne.n	80417a0 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80417c8:	687b      	ldr	r3, [r7, #4]
 80417ca:	681b      	ldr	r3, [r3, #0]
 80417cc:	f003 0302 	and.w	r3, r3, #2
 80417d0:	2b00      	cmp	r3, #0
 80417d2:	d009      	beq.n	80417e8 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80417d4:	4b2d      	ldr	r3, [pc, #180]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 80417d6:	689b      	ldr	r3, [r3, #8]
 80417d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80417dc:	687b      	ldr	r3, [r7, #4]
 80417de:	689b      	ldr	r3, [r3, #8]
 80417e0:	492a      	ldr	r1, [pc, #168]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 80417e2:	4313      	orrs	r3, r2
 80417e4:	608b      	str	r3, [r1, #8]
 80417e6:	e008      	b.n	80417fa <HAL_RCC_ClockConfig+0x19e>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 80417e8:	697b      	ldr	r3, [r7, #20]
 80417ea:	2b80      	cmp	r3, #128	; 0x80
 80417ec:	d105      	bne.n	80417fa <HAL_RCC_ClockConfig+0x19e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80417ee:	4b27      	ldr	r3, [pc, #156]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 80417f0:	689b      	ldr	r3, [r3, #8]
 80417f2:	4a26      	ldr	r2, [pc, #152]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 80417f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80417f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80417fa:	4b23      	ldr	r3, [pc, #140]	; (8041888 <HAL_RCC_ClockConfig+0x22c>)
 80417fc:	681b      	ldr	r3, [r3, #0]
 80417fe:	f003 030f 	and.w	r3, r3, #15
 8041802:	683a      	ldr	r2, [r7, #0]
 8041804:	429a      	cmp	r2, r3
 8041806:	d210      	bcs.n	804182a <HAL_RCC_ClockConfig+0x1ce>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041808:	4b1f      	ldr	r3, [pc, #124]	; (8041888 <HAL_RCC_ClockConfig+0x22c>)
 804180a:	681b      	ldr	r3, [r3, #0]
 804180c:	f023 020f 	bic.w	r2, r3, #15
 8041810:	491d      	ldr	r1, [pc, #116]	; (8041888 <HAL_RCC_ClockConfig+0x22c>)
 8041812:	683b      	ldr	r3, [r7, #0]
 8041814:	4313      	orrs	r3, r2
 8041816:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041818:	4b1b      	ldr	r3, [pc, #108]	; (8041888 <HAL_RCC_ClockConfig+0x22c>)
 804181a:	681b      	ldr	r3, [r3, #0]
 804181c:	f003 030f 	and.w	r3, r3, #15
 8041820:	683a      	ldr	r2, [r7, #0]
 8041822:	429a      	cmp	r2, r3
 8041824:	d001      	beq.n	804182a <HAL_RCC_ClockConfig+0x1ce>
    {
      return HAL_ERROR;
 8041826:	2301      	movs	r3, #1
 8041828:	e029      	b.n	804187e <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 804182a:	687b      	ldr	r3, [r7, #4]
 804182c:	681b      	ldr	r3, [r3, #0]
 804182e:	f003 0304 	and.w	r3, r3, #4
 8041832:	2b00      	cmp	r3, #0
 8041834:	d008      	beq.n	8041848 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8041836:	4b15      	ldr	r3, [pc, #84]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 8041838:	689b      	ldr	r3, [r3, #8]
 804183a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 804183e:	687b      	ldr	r3, [r7, #4]
 8041840:	68db      	ldr	r3, [r3, #12]
 8041842:	4912      	ldr	r1, [pc, #72]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 8041844:	4313      	orrs	r3, r2
 8041846:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041848:	687b      	ldr	r3, [r7, #4]
 804184a:	681b      	ldr	r3, [r3, #0]
 804184c:	f003 0308 	and.w	r3, r3, #8
 8041850:	2b00      	cmp	r3, #0
 8041852:	d009      	beq.n	8041868 <HAL_RCC_ClockConfig+0x20c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8041854:	4b0d      	ldr	r3, [pc, #52]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 8041856:	689b      	ldr	r3, [r3, #8]
 8041858:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 804185c:	687b      	ldr	r3, [r7, #4]
 804185e:	691b      	ldr	r3, [r3, #16]
 8041860:	00db      	lsls	r3, r3, #3
 8041862:	490a      	ldr	r1, [pc, #40]	; (804188c <HAL_RCC_ClockConfig+0x230>)
 8041864:	4313      	orrs	r3, r2
 8041866:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8041868:	f000 f8b2 	bl	80419d0 <HAL_RCC_GetHCLKFreq>
 804186c:	4602      	mov	r2, r0
 804186e:	4b09      	ldr	r3, [pc, #36]	; (8041894 <HAL_RCC_ClockConfig+0x238>)
 8041870:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8041872:	4b09      	ldr	r3, [pc, #36]	; (8041898 <HAL_RCC_ClockConfig+0x23c>)
 8041874:	681b      	ldr	r3, [r3, #0]
 8041876:	4618      	mov	r0, r3
 8041878:	f7fe fe42 	bl	8040500 <HAL_InitTick>
 804187c:	4603      	mov	r3, r0
}
 804187e:	4618      	mov	r0, r3
 8041880:	3718      	adds	r7, #24
 8041882:	46bd      	mov	sp, r7
 8041884:	bd80      	pop	{r7, pc}
 8041886:	bf00      	nop
 8041888:	40022000 	.word	0x40022000
 804188c:	40021000 	.word	0x40021000
 8041890:	04c4b400 	.word	0x04c4b400
 8041894:	20018014 	.word	0x20018014
 8041898:	20018018 	.word	0x20018018

0804189c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 804189c:	b480      	push	{r7}
 804189e:	b089      	sub	sp, #36	; 0x24
 80418a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80418a2:	2300      	movs	r3, #0
 80418a4:	61fb      	str	r3, [r7, #28]
 80418a6:	2300      	movs	r3, #0
 80418a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80418aa:	4b46      	ldr	r3, [pc, #280]	; (80419c4 <HAL_RCC_GetSysClockFreq+0x128>)
 80418ac:	689b      	ldr	r3, [r3, #8]
 80418ae:	f003 030c 	and.w	r3, r3, #12
 80418b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80418b4:	4b43      	ldr	r3, [pc, #268]	; (80419c4 <HAL_RCC_GetSysClockFreq+0x128>)
 80418b6:	68db      	ldr	r3, [r3, #12]
 80418b8:	f003 0303 	and.w	r3, r3, #3
 80418bc:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80418be:	693b      	ldr	r3, [r7, #16]
 80418c0:	2b00      	cmp	r3, #0
 80418c2:	d005      	beq.n	80418d0 <HAL_RCC_GetSysClockFreq+0x34>
 80418c4:	693b      	ldr	r3, [r7, #16]
 80418c6:	2b0c      	cmp	r3, #12
 80418c8:	d121      	bne.n	804190e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80418ca:	68fb      	ldr	r3, [r7, #12]
 80418cc:	2b01      	cmp	r3, #1
 80418ce:	d11e      	bne.n	804190e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80418d0:	4b3c      	ldr	r3, [pc, #240]	; (80419c4 <HAL_RCC_GetSysClockFreq+0x128>)
 80418d2:	681b      	ldr	r3, [r3, #0]
 80418d4:	f003 0308 	and.w	r3, r3, #8
 80418d8:	2b00      	cmp	r3, #0
 80418da:	d107      	bne.n	80418ec <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80418dc:	4b39      	ldr	r3, [pc, #228]	; (80419c4 <HAL_RCC_GetSysClockFreq+0x128>)
 80418de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80418e2:	0a1b      	lsrs	r3, r3, #8
 80418e4:	f003 030f 	and.w	r3, r3, #15
 80418e8:	61fb      	str	r3, [r7, #28]
 80418ea:	e005      	b.n	80418f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80418ec:	4b35      	ldr	r3, [pc, #212]	; (80419c4 <HAL_RCC_GetSysClockFreq+0x128>)
 80418ee:	681b      	ldr	r3, [r3, #0]
 80418f0:	091b      	lsrs	r3, r3, #4
 80418f2:	f003 030f 	and.w	r3, r3, #15
 80418f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80418f8:	4a33      	ldr	r2, [pc, #204]	; (80419c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80418fa:	69fb      	ldr	r3, [r7, #28]
 80418fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041900:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8041902:	693b      	ldr	r3, [r7, #16]
 8041904:	2b00      	cmp	r3, #0
 8041906:	d10d      	bne.n	8041924 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8041908:	69fb      	ldr	r3, [r7, #28]
 804190a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 804190c:	e00a      	b.n	8041924 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 804190e:	693b      	ldr	r3, [r7, #16]
 8041910:	2b04      	cmp	r3, #4
 8041912:	d102      	bne.n	804191a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8041914:	4b2d      	ldr	r3, [pc, #180]	; (80419cc <HAL_RCC_GetSysClockFreq+0x130>)
 8041916:	61bb      	str	r3, [r7, #24]
 8041918:	e004      	b.n	8041924 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 804191a:	693b      	ldr	r3, [r7, #16]
 804191c:	2b08      	cmp	r3, #8
 804191e:	d101      	bne.n	8041924 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8041920:	4b2a      	ldr	r3, [pc, #168]	; (80419cc <HAL_RCC_GetSysClockFreq+0x130>)
 8041922:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8041924:	693b      	ldr	r3, [r7, #16]
 8041926:	2b0c      	cmp	r3, #12
 8041928:	d145      	bne.n	80419b6 <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 804192a:	4b26      	ldr	r3, [pc, #152]	; (80419c4 <HAL_RCC_GetSysClockFreq+0x128>)
 804192c:	68db      	ldr	r3, [r3, #12]
 804192e:	f003 0303 	and.w	r3, r3, #3
 8041932:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8041934:	4b23      	ldr	r3, [pc, #140]	; (80419c4 <HAL_RCC_GetSysClockFreq+0x128>)
 8041936:	68db      	ldr	r3, [r3, #12]
 8041938:	091b      	lsrs	r3, r3, #4
 804193a:	f003 030f 	and.w	r3, r3, #15
 804193e:	3301      	adds	r3, #1
 8041940:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8041942:	68bb      	ldr	r3, [r7, #8]
 8041944:	2b02      	cmp	r3, #2
 8041946:	d002      	beq.n	804194e <HAL_RCC_GetSysClockFreq+0xb2>
 8041948:	2b03      	cmp	r3, #3
 804194a:	d00d      	beq.n	8041968 <HAL_RCC_GetSysClockFreq+0xcc>
 804194c:	e019      	b.n	8041982 <HAL_RCC_GetSysClockFreq+0xe6>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 804194e:	4a1f      	ldr	r2, [pc, #124]	; (80419cc <HAL_RCC_GetSysClockFreq+0x130>)
 8041950:	687b      	ldr	r3, [r7, #4]
 8041952:	fbb2 f3f3 	udiv	r3, r2, r3
 8041956:	4a1b      	ldr	r2, [pc, #108]	; (80419c4 <HAL_RCC_GetSysClockFreq+0x128>)
 8041958:	68d2      	ldr	r2, [r2, #12]
 804195a:	0a12      	lsrs	r2, r2, #8
 804195c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041960:	fb02 f303 	mul.w	r3, r2, r3
 8041964:	617b      	str	r3, [r7, #20]
        break;
 8041966:	e019      	b.n	804199c <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041968:	4a18      	ldr	r2, [pc, #96]	; (80419cc <HAL_RCC_GetSysClockFreq+0x130>)
 804196a:	687b      	ldr	r3, [r7, #4]
 804196c:	fbb2 f3f3 	udiv	r3, r2, r3
 8041970:	4a14      	ldr	r2, [pc, #80]	; (80419c4 <HAL_RCC_GetSysClockFreq+0x128>)
 8041972:	68d2      	ldr	r2, [r2, #12]
 8041974:	0a12      	lsrs	r2, r2, #8
 8041976:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804197a:	fb02 f303 	mul.w	r3, r2, r3
 804197e:	617b      	str	r3, [r7, #20]
        break;
 8041980:	e00c      	b.n	804199c <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041982:	69fa      	ldr	r2, [r7, #28]
 8041984:	687b      	ldr	r3, [r7, #4]
 8041986:	fbb2 f3f3 	udiv	r3, r2, r3
 804198a:	4a0e      	ldr	r2, [pc, #56]	; (80419c4 <HAL_RCC_GetSysClockFreq+0x128>)
 804198c:	68d2      	ldr	r2, [r2, #12]
 804198e:	0a12      	lsrs	r2, r2, #8
 8041990:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041994:	fb02 f303 	mul.w	r3, r2, r3
 8041998:	617b      	str	r3, [r7, #20]
        break;
 804199a:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 804199c:	4b09      	ldr	r3, [pc, #36]	; (80419c4 <HAL_RCC_GetSysClockFreq+0x128>)
 804199e:	68db      	ldr	r3, [r3, #12]
 80419a0:	0e5b      	lsrs	r3, r3, #25
 80419a2:	f003 0303 	and.w	r3, r3, #3
 80419a6:	3301      	adds	r3, #1
 80419a8:	005b      	lsls	r3, r3, #1
 80419aa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80419ac:	697a      	ldr	r2, [r7, #20]
 80419ae:	683b      	ldr	r3, [r7, #0]
 80419b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80419b4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80419b6:	69bb      	ldr	r3, [r7, #24]
}
 80419b8:	4618      	mov	r0, r3
 80419ba:	3724      	adds	r7, #36	; 0x24
 80419bc:	46bd      	mov	sp, r7
 80419be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80419c2:	4770      	bx	lr
 80419c4:	40021000 	.word	0x40021000
 80419c8:	08044b7c 	.word	0x08044b7c
 80419cc:	00f42400 	.word	0x00f42400

080419d0 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80419d0:	b580      	push	{r7, lr}
 80419d2:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80419d4:	f7ff ff62 	bl	804189c <HAL_RCC_GetSysClockFreq>
 80419d8:	4601      	mov	r1, r0
 80419da:	4b05      	ldr	r3, [pc, #20]	; (80419f0 <HAL_RCC_GetHCLKFreq+0x20>)
 80419dc:	689b      	ldr	r3, [r3, #8]
 80419de:	091b      	lsrs	r3, r3, #4
 80419e0:	f003 030f 	and.w	r3, r3, #15
 80419e4:	4a03      	ldr	r2, [pc, #12]	; (80419f4 <HAL_RCC_GetHCLKFreq+0x24>)
 80419e6:	5cd3      	ldrb	r3, [r2, r3]
 80419e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80419ec:	4618      	mov	r0, r3
 80419ee:	bd80      	pop	{r7, pc}
 80419f0:	40021000 	.word	0x40021000
 80419f4:	08044b64 	.word	0x08044b64

080419f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80419f8:	b580      	push	{r7, lr}
 80419fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80419fc:	f7ff ffe8 	bl	80419d0 <HAL_RCC_GetHCLKFreq>
 8041a00:	4601      	mov	r1, r0
 8041a02:	4b05      	ldr	r3, [pc, #20]	; (8041a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8041a04:	689b      	ldr	r3, [r3, #8]
 8041a06:	0a1b      	lsrs	r3, r3, #8
 8041a08:	f003 0307 	and.w	r3, r3, #7
 8041a0c:	4a03      	ldr	r2, [pc, #12]	; (8041a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8041a0e:	5cd3      	ldrb	r3, [r2, r3]
 8041a10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8041a14:	4618      	mov	r0, r3
 8041a16:	bd80      	pop	{r7, pc}
 8041a18:	40021000 	.word	0x40021000
 8041a1c:	08044b74 	.word	0x08044b74

08041a20 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8041a20:	b480      	push	{r7}
 8041a22:	b083      	sub	sp, #12
 8041a24:	af00      	add	r7, sp, #0
 8041a26:	6078      	str	r0, [r7, #4]
 8041a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8041a2a:	687b      	ldr	r3, [r7, #4]
 8041a2c:	220f      	movs	r2, #15
 8041a2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8041a30:	4b12      	ldr	r3, [pc, #72]	; (8041a7c <HAL_RCC_GetClockConfig+0x5c>)
 8041a32:	689b      	ldr	r3, [r3, #8]
 8041a34:	f003 0203 	and.w	r2, r3, #3
 8041a38:	687b      	ldr	r3, [r7, #4]
 8041a3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8041a3c:	4b0f      	ldr	r3, [pc, #60]	; (8041a7c <HAL_RCC_GetClockConfig+0x5c>)
 8041a3e:	689b      	ldr	r3, [r3, #8]
 8041a40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8041a44:	687b      	ldr	r3, [r7, #4]
 8041a46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8041a48:	4b0c      	ldr	r3, [pc, #48]	; (8041a7c <HAL_RCC_GetClockConfig+0x5c>)
 8041a4a:	689b      	ldr	r3, [r3, #8]
 8041a4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8041a50:	687b      	ldr	r3, [r7, #4]
 8041a52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8041a54:	4b09      	ldr	r3, [pc, #36]	; (8041a7c <HAL_RCC_GetClockConfig+0x5c>)
 8041a56:	689b      	ldr	r3, [r3, #8]
 8041a58:	08db      	lsrs	r3, r3, #3
 8041a5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8041a5e:	687b      	ldr	r3, [r7, #4]
 8041a60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8041a62:	4b07      	ldr	r3, [pc, #28]	; (8041a80 <HAL_RCC_GetClockConfig+0x60>)
 8041a64:	681b      	ldr	r3, [r3, #0]
 8041a66:	f003 020f 	and.w	r2, r3, #15
 8041a6a:	683b      	ldr	r3, [r7, #0]
 8041a6c:	601a      	str	r2, [r3, #0]
}
 8041a6e:	bf00      	nop
 8041a70:	370c      	adds	r7, #12
 8041a72:	46bd      	mov	sp, r7
 8041a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a78:	4770      	bx	lr
 8041a7a:	bf00      	nop
 8041a7c:	40021000 	.word	0x40021000
 8041a80:	40022000 	.word	0x40022000

08041a84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8041a84:	b580      	push	{r7, lr}
 8041a86:	b086      	sub	sp, #24
 8041a88:	af00      	add	r7, sp, #0
 8041a8a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8041a8c:	2300      	movs	r3, #0
 8041a8e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8041a90:	4b2c      	ldr	r3, [pc, #176]	; (8041b44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041a98:	2b00      	cmp	r3, #0
 8041a9a:	d003      	beq.n	8041aa4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8041a9c:	f7ff f8ee 	bl	8040c7c <HAL_PWREx_GetVoltageRange>
 8041aa0:	6138      	str	r0, [r7, #16]
 8041aa2:	e014      	b.n	8041ace <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8041aa4:	4b27      	ldr	r3, [pc, #156]	; (8041b44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041aa8:	4a26      	ldr	r2, [pc, #152]	; (8041b44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041aae:	6593      	str	r3, [r2, #88]	; 0x58
 8041ab0:	4b24      	ldr	r3, [pc, #144]	; (8041b44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041ab8:	60fb      	str	r3, [r7, #12]
 8041aba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8041abc:	f7ff f8de 	bl	8040c7c <HAL_PWREx_GetVoltageRange>
 8041ac0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8041ac2:	4b20      	ldr	r3, [pc, #128]	; (8041b44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041ac6:	4a1f      	ldr	r2, [pc, #124]	; (8041b44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041acc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8041ace:	693b      	ldr	r3, [r7, #16]
 8041ad0:	2b00      	cmp	r3, #0
 8041ad2:	d003      	beq.n	8041adc <RCC_SetFlashLatencyFromMSIRange+0x58>
 8041ad4:	693b      	ldr	r3, [r7, #16]
 8041ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8041ada:	d10b      	bne.n	8041af4 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8041adc:	687b      	ldr	r3, [r7, #4]
 8041ade:	2b80      	cmp	r3, #128	; 0x80
 8041ae0:	d919      	bls.n	8041b16 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8041ae2:	687b      	ldr	r3, [r7, #4]
 8041ae4:	2ba0      	cmp	r3, #160	; 0xa0
 8041ae6:	d902      	bls.n	8041aee <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8041ae8:	2302      	movs	r3, #2
 8041aea:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8041aec:	e013      	b.n	8041b16 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8041aee:	2301      	movs	r3, #1
 8041af0:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8041af2:	e010      	b.n	8041b16 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8041af4:	687b      	ldr	r3, [r7, #4]
 8041af6:	2b80      	cmp	r3, #128	; 0x80
 8041af8:	d902      	bls.n	8041b00 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8041afa:	2303      	movs	r3, #3
 8041afc:	617b      	str	r3, [r7, #20]
 8041afe:	e00a      	b.n	8041b16 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8041b00:	687b      	ldr	r3, [r7, #4]
 8041b02:	2b80      	cmp	r3, #128	; 0x80
 8041b04:	d102      	bne.n	8041b0c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8041b06:	2302      	movs	r3, #2
 8041b08:	617b      	str	r3, [r7, #20]
 8041b0a:	e004      	b.n	8041b16 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8041b0c:	687b      	ldr	r3, [r7, #4]
 8041b0e:	2b70      	cmp	r3, #112	; 0x70
 8041b10:	d101      	bne.n	8041b16 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8041b12:	2301      	movs	r3, #1
 8041b14:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8041b16:	4b0c      	ldr	r3, [pc, #48]	; (8041b48 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8041b18:	681b      	ldr	r3, [r3, #0]
 8041b1a:	f023 020f 	bic.w	r2, r3, #15
 8041b1e:	490a      	ldr	r1, [pc, #40]	; (8041b48 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8041b20:	697b      	ldr	r3, [r7, #20]
 8041b22:	4313      	orrs	r3, r2
 8041b24:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8041b26:	4b08      	ldr	r3, [pc, #32]	; (8041b48 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8041b28:	681b      	ldr	r3, [r3, #0]
 8041b2a:	f003 030f 	and.w	r3, r3, #15
 8041b2e:	697a      	ldr	r2, [r7, #20]
 8041b30:	429a      	cmp	r2, r3
 8041b32:	d001      	beq.n	8041b38 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8041b34:	2301      	movs	r3, #1
 8041b36:	e000      	b.n	8041b3a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8041b38:	2300      	movs	r3, #0
}
 8041b3a:	4618      	mov	r0, r3
 8041b3c:	3718      	adds	r7, #24
 8041b3e:	46bd      	mov	sp, r7
 8041b40:	bd80      	pop	{r7, pc}
 8041b42:	bf00      	nop
 8041b44:	40021000 	.word	0x40021000
 8041b48:	40022000 	.word	0x40022000

08041b4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8041b4c:	b480      	push	{r7}
 8041b4e:	b087      	sub	sp, #28
 8041b50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8041b52:	2300      	movs	r3, #0
 8041b54:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8041b56:	4b36      	ldr	r3, [pc, #216]	; (8041c30 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041b58:	68db      	ldr	r3, [r3, #12]
 8041b5a:	f003 0303 	and.w	r3, r3, #3
 8041b5e:	2b01      	cmp	r3, #1
 8041b60:	d118      	bne.n	8041b94 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8041b62:	4b33      	ldr	r3, [pc, #204]	; (8041c30 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041b64:	681b      	ldr	r3, [r3, #0]
 8041b66:	f003 0308 	and.w	r3, r3, #8
 8041b6a:	2b00      	cmp	r3, #0
 8041b6c:	d107      	bne.n	8041b7e <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8041b6e:	4b30      	ldr	r3, [pc, #192]	; (8041c30 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041b74:	0a1b      	lsrs	r3, r3, #8
 8041b76:	f003 030f 	and.w	r3, r3, #15
 8041b7a:	617b      	str	r3, [r7, #20]
 8041b7c:	e005      	b.n	8041b8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8041b7e:	4b2c      	ldr	r3, [pc, #176]	; (8041c30 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041b80:	681b      	ldr	r3, [r3, #0]
 8041b82:	091b      	lsrs	r3, r3, #4
 8041b84:	f003 030f 	and.w	r3, r3, #15
 8041b88:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8041b8a:	4a2a      	ldr	r2, [pc, #168]	; (8041c34 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8041b8c:	697b      	ldr	r3, [r7, #20]
 8041b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041b92:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8041b94:	4b26      	ldr	r3, [pc, #152]	; (8041c30 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041b96:	68db      	ldr	r3, [r3, #12]
 8041b98:	f003 0303 	and.w	r3, r3, #3
 8041b9c:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8041b9e:	4b24      	ldr	r3, [pc, #144]	; (8041c30 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041ba0:	68db      	ldr	r3, [r3, #12]
 8041ba2:	091b      	lsrs	r3, r3, #4
 8041ba4:	f003 030f 	and.w	r3, r3, #15
 8041ba8:	3301      	adds	r3, #1
 8041baa:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8041bac:	68fb      	ldr	r3, [r7, #12]
 8041bae:	2b02      	cmp	r3, #2
 8041bb0:	d002      	beq.n	8041bb8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
 8041bb2:	2b03      	cmp	r3, #3
 8041bb4:	d00d      	beq.n	8041bd2 <RCC_GetSysClockFreqFromPLLSource+0x86>
 8041bb6:	e019      	b.n	8041bec <RCC_GetSysClockFreqFromPLLSource+0xa0>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041bb8:	4a1f      	ldr	r2, [pc, #124]	; (8041c38 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8041bba:	68bb      	ldr	r3, [r7, #8]
 8041bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8041bc0:	4a1b      	ldr	r2, [pc, #108]	; (8041c30 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041bc2:	68d2      	ldr	r2, [r2, #12]
 8041bc4:	0a12      	lsrs	r2, r2, #8
 8041bc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041bca:	fb02 f303 	mul.w	r3, r2, r3
 8041bce:	613b      	str	r3, [r7, #16]
      break;
 8041bd0:	e019      	b.n	8041c06 <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041bd2:	4a19      	ldr	r2, [pc, #100]	; (8041c38 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8041bd4:	68bb      	ldr	r3, [r7, #8]
 8041bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8041bda:	4a15      	ldr	r2, [pc, #84]	; (8041c30 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041bdc:	68d2      	ldr	r2, [r2, #12]
 8041bde:	0a12      	lsrs	r2, r2, #8
 8041be0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041be4:	fb02 f303 	mul.w	r3, r2, r3
 8041be8:	613b      	str	r3, [r7, #16]
      break;
 8041bea:	e00c      	b.n	8041c06 <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041bec:	697a      	ldr	r2, [r7, #20]
 8041bee:	68bb      	ldr	r3, [r7, #8]
 8041bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8041bf4:	4a0e      	ldr	r2, [pc, #56]	; (8041c30 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041bf6:	68d2      	ldr	r2, [r2, #12]
 8041bf8:	0a12      	lsrs	r2, r2, #8
 8041bfa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041bfe:	fb02 f303 	mul.w	r3, r2, r3
 8041c02:	613b      	str	r3, [r7, #16]
      break;
 8041c04:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8041c06:	4b0a      	ldr	r3, [pc, #40]	; (8041c30 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041c08:	68db      	ldr	r3, [r3, #12]
 8041c0a:	0e5b      	lsrs	r3, r3, #25
 8041c0c:	f003 0303 	and.w	r3, r3, #3
 8041c10:	3301      	adds	r3, #1
 8041c12:	005b      	lsls	r3, r3, #1
 8041c14:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8041c16:	693a      	ldr	r2, [r7, #16]
 8041c18:	687b      	ldr	r3, [r7, #4]
 8041c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8041c1e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8041c20:	683b      	ldr	r3, [r7, #0]
}
 8041c22:	4618      	mov	r0, r3
 8041c24:	371c      	adds	r7, #28
 8041c26:	46bd      	mov	sp, r7
 8041c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041c2c:	4770      	bx	lr
 8041c2e:	bf00      	nop
 8041c30:	40021000 	.word	0x40021000
 8041c34:	08044b7c 	.word	0x08044b7c
 8041c38:	00f42400 	.word	0x00f42400

08041c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8041c3c:	b580      	push	{r7, lr}
 8041c3e:	b082      	sub	sp, #8
 8041c40:	af00      	add	r7, sp, #0
 8041c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8041c44:	687b      	ldr	r3, [r7, #4]
 8041c46:	2b00      	cmp	r3, #0
 8041c48:	d101      	bne.n	8041c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8041c4a:	2301      	movs	r3, #1
 8041c4c:	e049      	b.n	8041ce2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8041c4e:	687b      	ldr	r3, [r7, #4]
 8041c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8041c54:	b2db      	uxtb	r3, r3
 8041c56:	2b00      	cmp	r3, #0
 8041c58:	d106      	bne.n	8041c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8041c5a:	687b      	ldr	r3, [r7, #4]
 8041c5c:	2200      	movs	r2, #0
 8041c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8041c62:	6878      	ldr	r0, [r7, #4]
 8041c64:	f000 f841 	bl	8041cea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8041c68:	687b      	ldr	r3, [r7, #4]
 8041c6a:	2202      	movs	r2, #2
 8041c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8041c70:	687b      	ldr	r3, [r7, #4]
 8041c72:	681a      	ldr	r2, [r3, #0]
 8041c74:	687b      	ldr	r3, [r7, #4]
 8041c76:	3304      	adds	r3, #4
 8041c78:	4619      	mov	r1, r3
 8041c7a:	4610      	mov	r0, r2
 8041c7c:	f000 f9f8 	bl	8042070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8041c80:	687b      	ldr	r3, [r7, #4]
 8041c82:	2201      	movs	r2, #1
 8041c84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8041c88:	687b      	ldr	r3, [r7, #4]
 8041c8a:	2201      	movs	r2, #1
 8041c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8041c90:	687b      	ldr	r3, [r7, #4]
 8041c92:	2201      	movs	r2, #1
 8041c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8041c98:	687b      	ldr	r3, [r7, #4]
 8041c9a:	2201      	movs	r2, #1
 8041c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8041ca0:	687b      	ldr	r3, [r7, #4]
 8041ca2:	2201      	movs	r2, #1
 8041ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8041ca8:	687b      	ldr	r3, [r7, #4]
 8041caa:	2201      	movs	r2, #1
 8041cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8041cb0:	687b      	ldr	r3, [r7, #4]
 8041cb2:	2201      	movs	r2, #1
 8041cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8041cb8:	687b      	ldr	r3, [r7, #4]
 8041cba:	2201      	movs	r2, #1
 8041cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8041cc0:	687b      	ldr	r3, [r7, #4]
 8041cc2:	2201      	movs	r2, #1
 8041cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8041cc8:	687b      	ldr	r3, [r7, #4]
 8041cca:	2201      	movs	r2, #1
 8041ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8041cd0:	687b      	ldr	r3, [r7, #4]
 8041cd2:	2201      	movs	r2, #1
 8041cd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8041cd8:	687b      	ldr	r3, [r7, #4]
 8041cda:	2201      	movs	r2, #1
 8041cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8041ce0:	2300      	movs	r3, #0
}
 8041ce2:	4618      	mov	r0, r3
 8041ce4:	3708      	adds	r7, #8
 8041ce6:	46bd      	mov	sp, r7
 8041ce8:	bd80      	pop	{r7, pc}

08041cea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8041cea:	b480      	push	{r7}
 8041cec:	b083      	sub	sp, #12
 8041cee:	af00      	add	r7, sp, #0
 8041cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8041cf2:	bf00      	nop
 8041cf4:	370c      	adds	r7, #12
 8041cf6:	46bd      	mov	sp, r7
 8041cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041cfc:	4770      	bx	lr
	...

08041d00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8041d00:	b480      	push	{r7}
 8041d02:	b085      	sub	sp, #20
 8041d04:	af00      	add	r7, sp, #0
 8041d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8041d08:	687b      	ldr	r3, [r7, #4]
 8041d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8041d0e:	b2db      	uxtb	r3, r3
 8041d10:	2b01      	cmp	r3, #1
 8041d12:	d001      	beq.n	8041d18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8041d14:	2301      	movs	r3, #1
 8041d16:	e04f      	b.n	8041db8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8041d18:	687b      	ldr	r3, [r7, #4]
 8041d1a:	2202      	movs	r2, #2
 8041d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8041d20:	687b      	ldr	r3, [r7, #4]
 8041d22:	681b      	ldr	r3, [r3, #0]
 8041d24:	68da      	ldr	r2, [r3, #12]
 8041d26:	687b      	ldr	r3, [r7, #4]
 8041d28:	681b      	ldr	r3, [r3, #0]
 8041d2a:	f042 0201 	orr.w	r2, r2, #1
 8041d2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8041d30:	687b      	ldr	r3, [r7, #4]
 8041d32:	681b      	ldr	r3, [r3, #0]
 8041d34:	4a23      	ldr	r2, [pc, #140]	; (8041dc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8041d36:	4293      	cmp	r3, r2
 8041d38:	d01d      	beq.n	8041d76 <HAL_TIM_Base_Start_IT+0x76>
 8041d3a:	687b      	ldr	r3, [r7, #4]
 8041d3c:	681b      	ldr	r3, [r3, #0]
 8041d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8041d42:	d018      	beq.n	8041d76 <HAL_TIM_Base_Start_IT+0x76>
 8041d44:	687b      	ldr	r3, [r7, #4]
 8041d46:	681b      	ldr	r3, [r3, #0]
 8041d48:	4a1f      	ldr	r2, [pc, #124]	; (8041dc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8041d4a:	4293      	cmp	r3, r2
 8041d4c:	d013      	beq.n	8041d76 <HAL_TIM_Base_Start_IT+0x76>
 8041d4e:	687b      	ldr	r3, [r7, #4]
 8041d50:	681b      	ldr	r3, [r3, #0]
 8041d52:	4a1e      	ldr	r2, [pc, #120]	; (8041dcc <HAL_TIM_Base_Start_IT+0xcc>)
 8041d54:	4293      	cmp	r3, r2
 8041d56:	d00e      	beq.n	8041d76 <HAL_TIM_Base_Start_IT+0x76>
 8041d58:	687b      	ldr	r3, [r7, #4]
 8041d5a:	681b      	ldr	r3, [r3, #0]
 8041d5c:	4a1c      	ldr	r2, [pc, #112]	; (8041dd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8041d5e:	4293      	cmp	r3, r2
 8041d60:	d009      	beq.n	8041d76 <HAL_TIM_Base_Start_IT+0x76>
 8041d62:	687b      	ldr	r3, [r7, #4]
 8041d64:	681b      	ldr	r3, [r3, #0]
 8041d66:	4a1b      	ldr	r2, [pc, #108]	; (8041dd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8041d68:	4293      	cmp	r3, r2
 8041d6a:	d004      	beq.n	8041d76 <HAL_TIM_Base_Start_IT+0x76>
 8041d6c:	687b      	ldr	r3, [r7, #4]
 8041d6e:	681b      	ldr	r3, [r3, #0]
 8041d70:	4a19      	ldr	r2, [pc, #100]	; (8041dd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8041d72:	4293      	cmp	r3, r2
 8041d74:	d115      	bne.n	8041da2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8041d76:	687b      	ldr	r3, [r7, #4]
 8041d78:	681b      	ldr	r3, [r3, #0]
 8041d7a:	689a      	ldr	r2, [r3, #8]
 8041d7c:	4b17      	ldr	r3, [pc, #92]	; (8041ddc <HAL_TIM_Base_Start_IT+0xdc>)
 8041d7e:	4013      	ands	r3, r2
 8041d80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8041d82:	68fb      	ldr	r3, [r7, #12]
 8041d84:	2b06      	cmp	r3, #6
 8041d86:	d015      	beq.n	8041db4 <HAL_TIM_Base_Start_IT+0xb4>
 8041d88:	68fb      	ldr	r3, [r7, #12]
 8041d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8041d8e:	d011      	beq.n	8041db4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8041d90:	687b      	ldr	r3, [r7, #4]
 8041d92:	681b      	ldr	r3, [r3, #0]
 8041d94:	681a      	ldr	r2, [r3, #0]
 8041d96:	687b      	ldr	r3, [r7, #4]
 8041d98:	681b      	ldr	r3, [r3, #0]
 8041d9a:	f042 0201 	orr.w	r2, r2, #1
 8041d9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8041da0:	e008      	b.n	8041db4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8041da2:	687b      	ldr	r3, [r7, #4]
 8041da4:	681b      	ldr	r3, [r3, #0]
 8041da6:	681a      	ldr	r2, [r3, #0]
 8041da8:	687b      	ldr	r3, [r7, #4]
 8041daa:	681b      	ldr	r3, [r3, #0]
 8041dac:	f042 0201 	orr.w	r2, r2, #1
 8041db0:	601a      	str	r2, [r3, #0]
 8041db2:	e000      	b.n	8041db6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8041db4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8041db6:	2300      	movs	r3, #0
}
 8041db8:	4618      	mov	r0, r3
 8041dba:	3714      	adds	r7, #20
 8041dbc:	46bd      	mov	sp, r7
 8041dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041dc2:	4770      	bx	lr
 8041dc4:	40012c00 	.word	0x40012c00
 8041dc8:	40000400 	.word	0x40000400
 8041dcc:	40000800 	.word	0x40000800
 8041dd0:	40000c00 	.word	0x40000c00
 8041dd4:	40013400 	.word	0x40013400
 8041dd8:	40014000 	.word	0x40014000
 8041ddc:	00010007 	.word	0x00010007

08041de0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8041de0:	b580      	push	{r7, lr}
 8041de2:	b082      	sub	sp, #8
 8041de4:	af00      	add	r7, sp, #0
 8041de6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8041de8:	687b      	ldr	r3, [r7, #4]
 8041dea:	681b      	ldr	r3, [r3, #0]
 8041dec:	691b      	ldr	r3, [r3, #16]
 8041dee:	f003 0302 	and.w	r3, r3, #2
 8041df2:	2b02      	cmp	r3, #2
 8041df4:	d122      	bne.n	8041e3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8041df6:	687b      	ldr	r3, [r7, #4]
 8041df8:	681b      	ldr	r3, [r3, #0]
 8041dfa:	68db      	ldr	r3, [r3, #12]
 8041dfc:	f003 0302 	and.w	r3, r3, #2
 8041e00:	2b02      	cmp	r3, #2
 8041e02:	d11b      	bne.n	8041e3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8041e04:	687b      	ldr	r3, [r7, #4]
 8041e06:	681b      	ldr	r3, [r3, #0]
 8041e08:	f06f 0202 	mvn.w	r2, #2
 8041e0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8041e0e:	687b      	ldr	r3, [r7, #4]
 8041e10:	2201      	movs	r2, #1
 8041e12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8041e14:	687b      	ldr	r3, [r7, #4]
 8041e16:	681b      	ldr	r3, [r3, #0]
 8041e18:	699b      	ldr	r3, [r3, #24]
 8041e1a:	f003 0303 	and.w	r3, r3, #3
 8041e1e:	2b00      	cmp	r3, #0
 8041e20:	d003      	beq.n	8041e2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8041e22:	6878      	ldr	r0, [r7, #4]
 8041e24:	f000 f905 	bl	8042032 <HAL_TIM_IC_CaptureCallback>
 8041e28:	e005      	b.n	8041e36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8041e2a:	6878      	ldr	r0, [r7, #4]
 8041e2c:	f000 f8f7 	bl	804201e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8041e30:	6878      	ldr	r0, [r7, #4]
 8041e32:	f000 f908 	bl	8042046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8041e36:	687b      	ldr	r3, [r7, #4]
 8041e38:	2200      	movs	r2, #0
 8041e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8041e3c:	687b      	ldr	r3, [r7, #4]
 8041e3e:	681b      	ldr	r3, [r3, #0]
 8041e40:	691b      	ldr	r3, [r3, #16]
 8041e42:	f003 0304 	and.w	r3, r3, #4
 8041e46:	2b04      	cmp	r3, #4
 8041e48:	d122      	bne.n	8041e90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8041e4a:	687b      	ldr	r3, [r7, #4]
 8041e4c:	681b      	ldr	r3, [r3, #0]
 8041e4e:	68db      	ldr	r3, [r3, #12]
 8041e50:	f003 0304 	and.w	r3, r3, #4
 8041e54:	2b04      	cmp	r3, #4
 8041e56:	d11b      	bne.n	8041e90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8041e58:	687b      	ldr	r3, [r7, #4]
 8041e5a:	681b      	ldr	r3, [r3, #0]
 8041e5c:	f06f 0204 	mvn.w	r2, #4
 8041e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8041e62:	687b      	ldr	r3, [r7, #4]
 8041e64:	2202      	movs	r2, #2
 8041e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8041e68:	687b      	ldr	r3, [r7, #4]
 8041e6a:	681b      	ldr	r3, [r3, #0]
 8041e6c:	699b      	ldr	r3, [r3, #24]
 8041e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8041e72:	2b00      	cmp	r3, #0
 8041e74:	d003      	beq.n	8041e7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8041e76:	6878      	ldr	r0, [r7, #4]
 8041e78:	f000 f8db 	bl	8042032 <HAL_TIM_IC_CaptureCallback>
 8041e7c:	e005      	b.n	8041e8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8041e7e:	6878      	ldr	r0, [r7, #4]
 8041e80:	f000 f8cd 	bl	804201e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8041e84:	6878      	ldr	r0, [r7, #4]
 8041e86:	f000 f8de 	bl	8042046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8041e8a:	687b      	ldr	r3, [r7, #4]
 8041e8c:	2200      	movs	r2, #0
 8041e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8041e90:	687b      	ldr	r3, [r7, #4]
 8041e92:	681b      	ldr	r3, [r3, #0]
 8041e94:	691b      	ldr	r3, [r3, #16]
 8041e96:	f003 0308 	and.w	r3, r3, #8
 8041e9a:	2b08      	cmp	r3, #8
 8041e9c:	d122      	bne.n	8041ee4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8041e9e:	687b      	ldr	r3, [r7, #4]
 8041ea0:	681b      	ldr	r3, [r3, #0]
 8041ea2:	68db      	ldr	r3, [r3, #12]
 8041ea4:	f003 0308 	and.w	r3, r3, #8
 8041ea8:	2b08      	cmp	r3, #8
 8041eaa:	d11b      	bne.n	8041ee4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8041eac:	687b      	ldr	r3, [r7, #4]
 8041eae:	681b      	ldr	r3, [r3, #0]
 8041eb0:	f06f 0208 	mvn.w	r2, #8
 8041eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8041eb6:	687b      	ldr	r3, [r7, #4]
 8041eb8:	2204      	movs	r2, #4
 8041eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8041ebc:	687b      	ldr	r3, [r7, #4]
 8041ebe:	681b      	ldr	r3, [r3, #0]
 8041ec0:	69db      	ldr	r3, [r3, #28]
 8041ec2:	f003 0303 	and.w	r3, r3, #3
 8041ec6:	2b00      	cmp	r3, #0
 8041ec8:	d003      	beq.n	8041ed2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8041eca:	6878      	ldr	r0, [r7, #4]
 8041ecc:	f000 f8b1 	bl	8042032 <HAL_TIM_IC_CaptureCallback>
 8041ed0:	e005      	b.n	8041ede <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8041ed2:	6878      	ldr	r0, [r7, #4]
 8041ed4:	f000 f8a3 	bl	804201e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8041ed8:	6878      	ldr	r0, [r7, #4]
 8041eda:	f000 f8b4 	bl	8042046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8041ede:	687b      	ldr	r3, [r7, #4]
 8041ee0:	2200      	movs	r2, #0
 8041ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8041ee4:	687b      	ldr	r3, [r7, #4]
 8041ee6:	681b      	ldr	r3, [r3, #0]
 8041ee8:	691b      	ldr	r3, [r3, #16]
 8041eea:	f003 0310 	and.w	r3, r3, #16
 8041eee:	2b10      	cmp	r3, #16
 8041ef0:	d122      	bne.n	8041f38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8041ef2:	687b      	ldr	r3, [r7, #4]
 8041ef4:	681b      	ldr	r3, [r3, #0]
 8041ef6:	68db      	ldr	r3, [r3, #12]
 8041ef8:	f003 0310 	and.w	r3, r3, #16
 8041efc:	2b10      	cmp	r3, #16
 8041efe:	d11b      	bne.n	8041f38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8041f00:	687b      	ldr	r3, [r7, #4]
 8041f02:	681b      	ldr	r3, [r3, #0]
 8041f04:	f06f 0210 	mvn.w	r2, #16
 8041f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8041f0a:	687b      	ldr	r3, [r7, #4]
 8041f0c:	2208      	movs	r2, #8
 8041f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8041f10:	687b      	ldr	r3, [r7, #4]
 8041f12:	681b      	ldr	r3, [r3, #0]
 8041f14:	69db      	ldr	r3, [r3, #28]
 8041f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8041f1a:	2b00      	cmp	r3, #0
 8041f1c:	d003      	beq.n	8041f26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8041f1e:	6878      	ldr	r0, [r7, #4]
 8041f20:	f000 f887 	bl	8042032 <HAL_TIM_IC_CaptureCallback>
 8041f24:	e005      	b.n	8041f32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8041f26:	6878      	ldr	r0, [r7, #4]
 8041f28:	f000 f879 	bl	804201e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8041f2c:	6878      	ldr	r0, [r7, #4]
 8041f2e:	f000 f88a 	bl	8042046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8041f32:	687b      	ldr	r3, [r7, #4]
 8041f34:	2200      	movs	r2, #0
 8041f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8041f38:	687b      	ldr	r3, [r7, #4]
 8041f3a:	681b      	ldr	r3, [r3, #0]
 8041f3c:	691b      	ldr	r3, [r3, #16]
 8041f3e:	f003 0301 	and.w	r3, r3, #1
 8041f42:	2b01      	cmp	r3, #1
 8041f44:	d10e      	bne.n	8041f64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8041f46:	687b      	ldr	r3, [r7, #4]
 8041f48:	681b      	ldr	r3, [r3, #0]
 8041f4a:	68db      	ldr	r3, [r3, #12]
 8041f4c:	f003 0301 	and.w	r3, r3, #1
 8041f50:	2b01      	cmp	r3, #1
 8041f52:	d107      	bne.n	8041f64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8041f54:	687b      	ldr	r3, [r7, #4]
 8041f56:	681b      	ldr	r3, [r3, #0]
 8041f58:	f06f 0201 	mvn.w	r2, #1
 8041f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8041f5e:	6878      	ldr	r0, [r7, #4]
 8041f60:	f7fe fa84 	bl	804046c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8041f64:	687b      	ldr	r3, [r7, #4]
 8041f66:	681b      	ldr	r3, [r3, #0]
 8041f68:	691b      	ldr	r3, [r3, #16]
 8041f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041f6e:	2b80      	cmp	r3, #128	; 0x80
 8041f70:	d10e      	bne.n	8041f90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8041f72:	687b      	ldr	r3, [r7, #4]
 8041f74:	681b      	ldr	r3, [r3, #0]
 8041f76:	68db      	ldr	r3, [r3, #12]
 8041f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041f7c:	2b80      	cmp	r3, #128	; 0x80
 8041f7e:	d107      	bne.n	8041f90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8041f80:	687b      	ldr	r3, [r7, #4]
 8041f82:	681b      	ldr	r3, [r3, #0]
 8041f84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8041f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8041f8a:	6878      	ldr	r0, [r7, #4]
 8041f8c:	f000 f914 	bl	80421b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8041f90:	687b      	ldr	r3, [r7, #4]
 8041f92:	681b      	ldr	r3, [r3, #0]
 8041f94:	691b      	ldr	r3, [r3, #16]
 8041f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8041f9e:	d10e      	bne.n	8041fbe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8041fa0:	687b      	ldr	r3, [r7, #4]
 8041fa2:	681b      	ldr	r3, [r3, #0]
 8041fa4:	68db      	ldr	r3, [r3, #12]
 8041fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041faa:	2b80      	cmp	r3, #128	; 0x80
 8041fac:	d107      	bne.n	8041fbe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8041fae:	687b      	ldr	r3, [r7, #4]
 8041fb0:	681b      	ldr	r3, [r3, #0]
 8041fb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8041fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8041fb8:	6878      	ldr	r0, [r7, #4]
 8041fba:	f000 f907 	bl	80421cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8041fbe:	687b      	ldr	r3, [r7, #4]
 8041fc0:	681b      	ldr	r3, [r3, #0]
 8041fc2:	691b      	ldr	r3, [r3, #16]
 8041fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041fc8:	2b40      	cmp	r3, #64	; 0x40
 8041fca:	d10e      	bne.n	8041fea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8041fcc:	687b      	ldr	r3, [r7, #4]
 8041fce:	681b      	ldr	r3, [r3, #0]
 8041fd0:	68db      	ldr	r3, [r3, #12]
 8041fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041fd6:	2b40      	cmp	r3, #64	; 0x40
 8041fd8:	d107      	bne.n	8041fea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8041fda:	687b      	ldr	r3, [r7, #4]
 8041fdc:	681b      	ldr	r3, [r3, #0]
 8041fde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8041fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8041fe4:	6878      	ldr	r0, [r7, #4]
 8041fe6:	f000 f838 	bl	804205a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8041fea:	687b      	ldr	r3, [r7, #4]
 8041fec:	681b      	ldr	r3, [r3, #0]
 8041fee:	691b      	ldr	r3, [r3, #16]
 8041ff0:	f003 0320 	and.w	r3, r3, #32
 8041ff4:	2b20      	cmp	r3, #32
 8041ff6:	d10e      	bne.n	8042016 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8041ff8:	687b      	ldr	r3, [r7, #4]
 8041ffa:	681b      	ldr	r3, [r3, #0]
 8041ffc:	68db      	ldr	r3, [r3, #12]
 8041ffe:	f003 0320 	and.w	r3, r3, #32
 8042002:	2b20      	cmp	r3, #32
 8042004:	d107      	bne.n	8042016 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8042006:	687b      	ldr	r3, [r7, #4]
 8042008:	681b      	ldr	r3, [r3, #0]
 804200a:	f06f 0220 	mvn.w	r2, #32
 804200e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8042010:	6878      	ldr	r0, [r7, #4]
 8042012:	f000 f8c7 	bl	80421a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8042016:	bf00      	nop
 8042018:	3708      	adds	r7, #8
 804201a:	46bd      	mov	sp, r7
 804201c:	bd80      	pop	{r7, pc}

0804201e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 804201e:	b480      	push	{r7}
 8042020:	b083      	sub	sp, #12
 8042022:	af00      	add	r7, sp, #0
 8042024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8042026:	bf00      	nop
 8042028:	370c      	adds	r7, #12
 804202a:	46bd      	mov	sp, r7
 804202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042030:	4770      	bx	lr

08042032 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8042032:	b480      	push	{r7}
 8042034:	b083      	sub	sp, #12
 8042036:	af00      	add	r7, sp, #0
 8042038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 804203a:	bf00      	nop
 804203c:	370c      	adds	r7, #12
 804203e:	46bd      	mov	sp, r7
 8042040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042044:	4770      	bx	lr

08042046 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8042046:	b480      	push	{r7}
 8042048:	b083      	sub	sp, #12
 804204a:	af00      	add	r7, sp, #0
 804204c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 804204e:	bf00      	nop
 8042050:	370c      	adds	r7, #12
 8042052:	46bd      	mov	sp, r7
 8042054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042058:	4770      	bx	lr

0804205a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 804205a:	b480      	push	{r7}
 804205c:	b083      	sub	sp, #12
 804205e:	af00      	add	r7, sp, #0
 8042060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8042062:	bf00      	nop
 8042064:	370c      	adds	r7, #12
 8042066:	46bd      	mov	sp, r7
 8042068:	f85d 7b04 	ldr.w	r7, [sp], #4
 804206c:	4770      	bx	lr
	...

08042070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8042070:	b480      	push	{r7}
 8042072:	b085      	sub	sp, #20
 8042074:	af00      	add	r7, sp, #0
 8042076:	6078      	str	r0, [r7, #4]
 8042078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 804207a:	687b      	ldr	r3, [r7, #4]
 804207c:	681b      	ldr	r3, [r3, #0]
 804207e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8042080:	687b      	ldr	r3, [r7, #4]
 8042082:	4a40      	ldr	r2, [pc, #256]	; (8042184 <TIM_Base_SetConfig+0x114>)
 8042084:	4293      	cmp	r3, r2
 8042086:	d013      	beq.n	80420b0 <TIM_Base_SetConfig+0x40>
 8042088:	687b      	ldr	r3, [r7, #4]
 804208a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804208e:	d00f      	beq.n	80420b0 <TIM_Base_SetConfig+0x40>
 8042090:	687b      	ldr	r3, [r7, #4]
 8042092:	4a3d      	ldr	r2, [pc, #244]	; (8042188 <TIM_Base_SetConfig+0x118>)
 8042094:	4293      	cmp	r3, r2
 8042096:	d00b      	beq.n	80420b0 <TIM_Base_SetConfig+0x40>
 8042098:	687b      	ldr	r3, [r7, #4]
 804209a:	4a3c      	ldr	r2, [pc, #240]	; (804218c <TIM_Base_SetConfig+0x11c>)
 804209c:	4293      	cmp	r3, r2
 804209e:	d007      	beq.n	80420b0 <TIM_Base_SetConfig+0x40>
 80420a0:	687b      	ldr	r3, [r7, #4]
 80420a2:	4a3b      	ldr	r2, [pc, #236]	; (8042190 <TIM_Base_SetConfig+0x120>)
 80420a4:	4293      	cmp	r3, r2
 80420a6:	d003      	beq.n	80420b0 <TIM_Base_SetConfig+0x40>
 80420a8:	687b      	ldr	r3, [r7, #4]
 80420aa:	4a3a      	ldr	r2, [pc, #232]	; (8042194 <TIM_Base_SetConfig+0x124>)
 80420ac:	4293      	cmp	r3, r2
 80420ae:	d108      	bne.n	80420c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80420b0:	68fb      	ldr	r3, [r7, #12]
 80420b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80420b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80420b8:	683b      	ldr	r3, [r7, #0]
 80420ba:	685b      	ldr	r3, [r3, #4]
 80420bc:	68fa      	ldr	r2, [r7, #12]
 80420be:	4313      	orrs	r3, r2
 80420c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80420c2:	687b      	ldr	r3, [r7, #4]
 80420c4:	4a2f      	ldr	r2, [pc, #188]	; (8042184 <TIM_Base_SetConfig+0x114>)
 80420c6:	4293      	cmp	r3, r2
 80420c8:	d01f      	beq.n	804210a <TIM_Base_SetConfig+0x9a>
 80420ca:	687b      	ldr	r3, [r7, #4]
 80420cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80420d0:	d01b      	beq.n	804210a <TIM_Base_SetConfig+0x9a>
 80420d2:	687b      	ldr	r3, [r7, #4]
 80420d4:	4a2c      	ldr	r2, [pc, #176]	; (8042188 <TIM_Base_SetConfig+0x118>)
 80420d6:	4293      	cmp	r3, r2
 80420d8:	d017      	beq.n	804210a <TIM_Base_SetConfig+0x9a>
 80420da:	687b      	ldr	r3, [r7, #4]
 80420dc:	4a2b      	ldr	r2, [pc, #172]	; (804218c <TIM_Base_SetConfig+0x11c>)
 80420de:	4293      	cmp	r3, r2
 80420e0:	d013      	beq.n	804210a <TIM_Base_SetConfig+0x9a>
 80420e2:	687b      	ldr	r3, [r7, #4]
 80420e4:	4a2a      	ldr	r2, [pc, #168]	; (8042190 <TIM_Base_SetConfig+0x120>)
 80420e6:	4293      	cmp	r3, r2
 80420e8:	d00f      	beq.n	804210a <TIM_Base_SetConfig+0x9a>
 80420ea:	687b      	ldr	r3, [r7, #4]
 80420ec:	4a29      	ldr	r2, [pc, #164]	; (8042194 <TIM_Base_SetConfig+0x124>)
 80420ee:	4293      	cmp	r3, r2
 80420f0:	d00b      	beq.n	804210a <TIM_Base_SetConfig+0x9a>
 80420f2:	687b      	ldr	r3, [r7, #4]
 80420f4:	4a28      	ldr	r2, [pc, #160]	; (8042198 <TIM_Base_SetConfig+0x128>)
 80420f6:	4293      	cmp	r3, r2
 80420f8:	d007      	beq.n	804210a <TIM_Base_SetConfig+0x9a>
 80420fa:	687b      	ldr	r3, [r7, #4]
 80420fc:	4a27      	ldr	r2, [pc, #156]	; (804219c <TIM_Base_SetConfig+0x12c>)
 80420fe:	4293      	cmp	r3, r2
 8042100:	d003      	beq.n	804210a <TIM_Base_SetConfig+0x9a>
 8042102:	687b      	ldr	r3, [r7, #4]
 8042104:	4a26      	ldr	r2, [pc, #152]	; (80421a0 <TIM_Base_SetConfig+0x130>)
 8042106:	4293      	cmp	r3, r2
 8042108:	d108      	bne.n	804211c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 804210a:	68fb      	ldr	r3, [r7, #12]
 804210c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8042110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8042112:	683b      	ldr	r3, [r7, #0]
 8042114:	68db      	ldr	r3, [r3, #12]
 8042116:	68fa      	ldr	r2, [r7, #12]
 8042118:	4313      	orrs	r3, r2
 804211a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 804211c:	68fb      	ldr	r3, [r7, #12]
 804211e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8042122:	683b      	ldr	r3, [r7, #0]
 8042124:	695b      	ldr	r3, [r3, #20]
 8042126:	4313      	orrs	r3, r2
 8042128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 804212a:	687b      	ldr	r3, [r7, #4]
 804212c:	68fa      	ldr	r2, [r7, #12]
 804212e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8042130:	683b      	ldr	r3, [r7, #0]
 8042132:	689a      	ldr	r2, [r3, #8]
 8042134:	687b      	ldr	r3, [r7, #4]
 8042136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8042138:	683b      	ldr	r3, [r7, #0]
 804213a:	681a      	ldr	r2, [r3, #0]
 804213c:	687b      	ldr	r3, [r7, #4]
 804213e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8042140:	687b      	ldr	r3, [r7, #4]
 8042142:	4a10      	ldr	r2, [pc, #64]	; (8042184 <TIM_Base_SetConfig+0x114>)
 8042144:	4293      	cmp	r3, r2
 8042146:	d00f      	beq.n	8042168 <TIM_Base_SetConfig+0xf8>
 8042148:	687b      	ldr	r3, [r7, #4]
 804214a:	4a12      	ldr	r2, [pc, #72]	; (8042194 <TIM_Base_SetConfig+0x124>)
 804214c:	4293      	cmp	r3, r2
 804214e:	d00b      	beq.n	8042168 <TIM_Base_SetConfig+0xf8>
 8042150:	687b      	ldr	r3, [r7, #4]
 8042152:	4a11      	ldr	r2, [pc, #68]	; (8042198 <TIM_Base_SetConfig+0x128>)
 8042154:	4293      	cmp	r3, r2
 8042156:	d007      	beq.n	8042168 <TIM_Base_SetConfig+0xf8>
 8042158:	687b      	ldr	r3, [r7, #4]
 804215a:	4a10      	ldr	r2, [pc, #64]	; (804219c <TIM_Base_SetConfig+0x12c>)
 804215c:	4293      	cmp	r3, r2
 804215e:	d003      	beq.n	8042168 <TIM_Base_SetConfig+0xf8>
 8042160:	687b      	ldr	r3, [r7, #4]
 8042162:	4a0f      	ldr	r2, [pc, #60]	; (80421a0 <TIM_Base_SetConfig+0x130>)
 8042164:	4293      	cmp	r3, r2
 8042166:	d103      	bne.n	8042170 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8042168:	683b      	ldr	r3, [r7, #0]
 804216a:	691a      	ldr	r2, [r3, #16]
 804216c:	687b      	ldr	r3, [r7, #4]
 804216e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8042170:	687b      	ldr	r3, [r7, #4]
 8042172:	2201      	movs	r2, #1
 8042174:	615a      	str	r2, [r3, #20]
}
 8042176:	bf00      	nop
 8042178:	3714      	adds	r7, #20
 804217a:	46bd      	mov	sp, r7
 804217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042180:	4770      	bx	lr
 8042182:	bf00      	nop
 8042184:	40012c00 	.word	0x40012c00
 8042188:	40000400 	.word	0x40000400
 804218c:	40000800 	.word	0x40000800
 8042190:	40000c00 	.word	0x40000c00
 8042194:	40013400 	.word	0x40013400
 8042198:	40014000 	.word	0x40014000
 804219c:	40014400 	.word	0x40014400
 80421a0:	40014800 	.word	0x40014800

080421a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80421a4:	b480      	push	{r7}
 80421a6:	b083      	sub	sp, #12
 80421a8:	af00      	add	r7, sp, #0
 80421aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80421ac:	bf00      	nop
 80421ae:	370c      	adds	r7, #12
 80421b0:	46bd      	mov	sp, r7
 80421b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80421b6:	4770      	bx	lr

080421b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80421b8:	b480      	push	{r7}
 80421ba:	b083      	sub	sp, #12
 80421bc:	af00      	add	r7, sp, #0
 80421be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80421c0:	bf00      	nop
 80421c2:	370c      	adds	r7, #12
 80421c4:	46bd      	mov	sp, r7
 80421c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80421ca:	4770      	bx	lr

080421cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80421cc:	b480      	push	{r7}
 80421ce:	b083      	sub	sp, #12
 80421d0:	af00      	add	r7, sp, #0
 80421d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80421d4:	bf00      	nop
 80421d6:	370c      	adds	r7, #12
 80421d8:	46bd      	mov	sp, r7
 80421da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80421de:	4770      	bx	lr

080421e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80421e0:	b480      	push	{r7}
 80421e2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80421e4:	bf00      	nop
 80421e6:	46bd      	mov	sp, r7
 80421e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80421ec:	4770      	bx	lr
	...

080421f0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80421f0:	b480      	push	{r7}
 80421f2:	b085      	sub	sp, #20
 80421f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80421f6:	f3ef 8305 	mrs	r3, IPSR
 80421fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80421fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80421fe:	2b00      	cmp	r3, #0
 8042200:	d10f      	bne.n	8042222 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8042202:	f3ef 8310 	mrs	r3, PRIMASK
 8042206:	607b      	str	r3, [r7, #4]
  return(result);
 8042208:	687b      	ldr	r3, [r7, #4]
 804220a:	2b00      	cmp	r3, #0
 804220c:	d105      	bne.n	804221a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 804220e:	f3ef 8311 	mrs	r3, BASEPRI
 8042212:	603b      	str	r3, [r7, #0]
  return(result);
 8042214:	683b      	ldr	r3, [r7, #0]
 8042216:	2b00      	cmp	r3, #0
 8042218:	d007      	beq.n	804222a <osKernelInitialize+0x3a>
 804221a:	4b0e      	ldr	r3, [pc, #56]	; (8042254 <osKernelInitialize+0x64>)
 804221c:	681b      	ldr	r3, [r3, #0]
 804221e:	2b02      	cmp	r3, #2
 8042220:	d103      	bne.n	804222a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8042222:	f06f 0305 	mvn.w	r3, #5
 8042226:	60fb      	str	r3, [r7, #12]
 8042228:	e00c      	b.n	8042244 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 804222a:	4b0a      	ldr	r3, [pc, #40]	; (8042254 <osKernelInitialize+0x64>)
 804222c:	681b      	ldr	r3, [r3, #0]
 804222e:	2b00      	cmp	r3, #0
 8042230:	d105      	bne.n	804223e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8042232:	4b08      	ldr	r3, [pc, #32]	; (8042254 <osKernelInitialize+0x64>)
 8042234:	2201      	movs	r2, #1
 8042236:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8042238:	2300      	movs	r3, #0
 804223a:	60fb      	str	r3, [r7, #12]
 804223c:	e002      	b.n	8042244 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 804223e:	f04f 33ff 	mov.w	r3, #4294967295
 8042242:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8042244:	68fb      	ldr	r3, [r7, #12]
}
 8042246:	4618      	mov	r0, r3
 8042248:	3714      	adds	r7, #20
 804224a:	46bd      	mov	sp, r7
 804224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042250:	4770      	bx	lr
 8042252:	bf00      	nop
 8042254:	20018044 	.word	0x20018044

08042258 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8042258:	b580      	push	{r7, lr}
 804225a:	b084      	sub	sp, #16
 804225c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 804225e:	f3ef 8305 	mrs	r3, IPSR
 8042262:	60bb      	str	r3, [r7, #8]
  return(result);
 8042264:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8042266:	2b00      	cmp	r3, #0
 8042268:	d10f      	bne.n	804228a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804226a:	f3ef 8310 	mrs	r3, PRIMASK
 804226e:	607b      	str	r3, [r7, #4]
  return(result);
 8042270:	687b      	ldr	r3, [r7, #4]
 8042272:	2b00      	cmp	r3, #0
 8042274:	d105      	bne.n	8042282 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8042276:	f3ef 8311 	mrs	r3, BASEPRI
 804227a:	603b      	str	r3, [r7, #0]
  return(result);
 804227c:	683b      	ldr	r3, [r7, #0]
 804227e:	2b00      	cmp	r3, #0
 8042280:	d007      	beq.n	8042292 <osKernelStart+0x3a>
 8042282:	4b0f      	ldr	r3, [pc, #60]	; (80422c0 <osKernelStart+0x68>)
 8042284:	681b      	ldr	r3, [r3, #0]
 8042286:	2b02      	cmp	r3, #2
 8042288:	d103      	bne.n	8042292 <osKernelStart+0x3a>
    stat = osErrorISR;
 804228a:	f06f 0305 	mvn.w	r3, #5
 804228e:	60fb      	str	r3, [r7, #12]
 8042290:	e010      	b.n	80422b4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8042292:	4b0b      	ldr	r3, [pc, #44]	; (80422c0 <osKernelStart+0x68>)
 8042294:	681b      	ldr	r3, [r3, #0]
 8042296:	2b01      	cmp	r3, #1
 8042298:	d109      	bne.n	80422ae <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 804229a:	f7ff ffa1 	bl	80421e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 804229e:	4b08      	ldr	r3, [pc, #32]	; (80422c0 <osKernelStart+0x68>)
 80422a0:	2202      	movs	r2, #2
 80422a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80422a4:	f001 fb66 	bl	8043974 <vTaskStartScheduler>
      stat = osOK;
 80422a8:	2300      	movs	r3, #0
 80422aa:	60fb      	str	r3, [r7, #12]
 80422ac:	e002      	b.n	80422b4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80422ae:	f04f 33ff 	mov.w	r3, #4294967295
 80422b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80422b4:	68fb      	ldr	r3, [r7, #12]
}
 80422b6:	4618      	mov	r0, r3
 80422b8:	3710      	adds	r7, #16
 80422ba:	46bd      	mov	sp, r7
 80422bc:	bd80      	pop	{r7, pc}
 80422be:	bf00      	nop
 80422c0:	20018044 	.word	0x20018044

080422c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80422c4:	b580      	push	{r7, lr}
 80422c6:	b090      	sub	sp, #64	; 0x40
 80422c8:	af04      	add	r7, sp, #16
 80422ca:	60f8      	str	r0, [r7, #12]
 80422cc:	60b9      	str	r1, [r7, #8]
 80422ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80422d0:	2300      	movs	r3, #0
 80422d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80422d4:	f3ef 8305 	mrs	r3, IPSR
 80422d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80422da:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80422dc:	2b00      	cmp	r3, #0
 80422de:	f040 8090 	bne.w	8042402 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80422e2:	f3ef 8310 	mrs	r3, PRIMASK
 80422e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80422e8:	69bb      	ldr	r3, [r7, #24]
 80422ea:	2b00      	cmp	r3, #0
 80422ec:	d105      	bne.n	80422fa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80422ee:	f3ef 8311 	mrs	r3, BASEPRI
 80422f2:	617b      	str	r3, [r7, #20]
  return(result);
 80422f4:	697b      	ldr	r3, [r7, #20]
 80422f6:	2b00      	cmp	r3, #0
 80422f8:	d003      	beq.n	8042302 <osThreadNew+0x3e>
 80422fa:	4b44      	ldr	r3, [pc, #272]	; (804240c <osThreadNew+0x148>)
 80422fc:	681b      	ldr	r3, [r3, #0]
 80422fe:	2b02      	cmp	r3, #2
 8042300:	d07f      	beq.n	8042402 <osThreadNew+0x13e>
 8042302:	68fb      	ldr	r3, [r7, #12]
 8042304:	2b00      	cmp	r3, #0
 8042306:	d07c      	beq.n	8042402 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8042308:	f44f 7300 	mov.w	r3, #512	; 0x200
 804230c:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 804230e:	2318      	movs	r3, #24
 8042310:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8042312:	2300      	movs	r3, #0
 8042314:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8042316:	f04f 33ff 	mov.w	r3, #4294967295
 804231a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 804231c:	687b      	ldr	r3, [r7, #4]
 804231e:	2b00      	cmp	r3, #0
 8042320:	d045      	beq.n	80423ae <osThreadNew+0xea>
      if (attr->name != NULL) {
 8042322:	687b      	ldr	r3, [r7, #4]
 8042324:	681b      	ldr	r3, [r3, #0]
 8042326:	2b00      	cmp	r3, #0
 8042328:	d002      	beq.n	8042330 <osThreadNew+0x6c>
        name = attr->name;
 804232a:	687b      	ldr	r3, [r7, #4]
 804232c:	681b      	ldr	r3, [r3, #0]
 804232e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8042330:	687b      	ldr	r3, [r7, #4]
 8042332:	699b      	ldr	r3, [r3, #24]
 8042334:	2b00      	cmp	r3, #0
 8042336:	d002      	beq.n	804233e <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 8042338:	687b      	ldr	r3, [r7, #4]
 804233a:	699b      	ldr	r3, [r3, #24]
 804233c:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 804233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042340:	2b00      	cmp	r3, #0
 8042342:	d008      	beq.n	8042356 <osThreadNew+0x92>
 8042344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042346:	2b38      	cmp	r3, #56	; 0x38
 8042348:	d805      	bhi.n	8042356 <osThreadNew+0x92>
 804234a:	687b      	ldr	r3, [r7, #4]
 804234c:	685b      	ldr	r3, [r3, #4]
 804234e:	f003 0301 	and.w	r3, r3, #1
 8042352:	2b00      	cmp	r3, #0
 8042354:	d001      	beq.n	804235a <osThreadNew+0x96>
        return (NULL);
 8042356:	2300      	movs	r3, #0
 8042358:	e054      	b.n	8042404 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 804235a:	687b      	ldr	r3, [r7, #4]
 804235c:	695b      	ldr	r3, [r3, #20]
 804235e:	2b00      	cmp	r3, #0
 8042360:	d003      	beq.n	804236a <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8042362:	687b      	ldr	r3, [r7, #4]
 8042364:	695b      	ldr	r3, [r3, #20]
 8042366:	089b      	lsrs	r3, r3, #2
 8042368:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 804236a:	687b      	ldr	r3, [r7, #4]
 804236c:	689b      	ldr	r3, [r3, #8]
 804236e:	2b00      	cmp	r3, #0
 8042370:	d00e      	beq.n	8042390 <osThreadNew+0xcc>
 8042372:	687b      	ldr	r3, [r7, #4]
 8042374:	68db      	ldr	r3, [r3, #12]
 8042376:	2b5b      	cmp	r3, #91	; 0x5b
 8042378:	d90a      	bls.n	8042390 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 804237a:	687b      	ldr	r3, [r7, #4]
 804237c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 804237e:	2b00      	cmp	r3, #0
 8042380:	d006      	beq.n	8042390 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8042382:	687b      	ldr	r3, [r7, #4]
 8042384:	695b      	ldr	r3, [r3, #20]
 8042386:	2b00      	cmp	r3, #0
 8042388:	d002      	beq.n	8042390 <osThreadNew+0xcc>
        mem = 1;
 804238a:	2301      	movs	r3, #1
 804238c:	623b      	str	r3, [r7, #32]
 804238e:	e010      	b.n	80423b2 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8042390:	687b      	ldr	r3, [r7, #4]
 8042392:	689b      	ldr	r3, [r3, #8]
 8042394:	2b00      	cmp	r3, #0
 8042396:	d10c      	bne.n	80423b2 <osThreadNew+0xee>
 8042398:	687b      	ldr	r3, [r7, #4]
 804239a:	68db      	ldr	r3, [r3, #12]
 804239c:	2b00      	cmp	r3, #0
 804239e:	d108      	bne.n	80423b2 <osThreadNew+0xee>
 80423a0:	687b      	ldr	r3, [r7, #4]
 80423a2:	691b      	ldr	r3, [r3, #16]
 80423a4:	2b00      	cmp	r3, #0
 80423a6:	d104      	bne.n	80423b2 <osThreadNew+0xee>
          mem = 0;
 80423a8:	2300      	movs	r3, #0
 80423aa:	623b      	str	r3, [r7, #32]
 80423ac:	e001      	b.n	80423b2 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 80423ae:	2300      	movs	r3, #0
 80423b0:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80423b2:	6a3b      	ldr	r3, [r7, #32]
 80423b4:	2b01      	cmp	r3, #1
 80423b6:	d110      	bne.n	80423da <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80423b8:	687b      	ldr	r3, [r7, #4]
 80423ba:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80423bc:	687a      	ldr	r2, [r7, #4]
 80423be:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80423c0:	9202      	str	r2, [sp, #8]
 80423c2:	9301      	str	r3, [sp, #4]
 80423c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80423c6:	9300      	str	r3, [sp, #0]
 80423c8:	68bb      	ldr	r3, [r7, #8]
 80423ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80423cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80423ce:	68f8      	ldr	r0, [r7, #12]
 80423d0:	f001 f934 	bl	804363c <xTaskCreateStatic>
 80423d4:	4603      	mov	r3, r0
 80423d6:	613b      	str	r3, [r7, #16]
 80423d8:	e013      	b.n	8042402 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 80423da:	6a3b      	ldr	r3, [r7, #32]
 80423dc:	2b00      	cmp	r3, #0
 80423de:	d110      	bne.n	8042402 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80423e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80423e2:	b29a      	uxth	r2, r3
 80423e4:	f107 0310 	add.w	r3, r7, #16
 80423e8:	9301      	str	r3, [sp, #4]
 80423ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80423ec:	9300      	str	r3, [sp, #0]
 80423ee:	68bb      	ldr	r3, [r7, #8]
 80423f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80423f2:	68f8      	ldr	r0, [r7, #12]
 80423f4:	f001 f964 	bl	80436c0 <xTaskCreate>
 80423f8:	4603      	mov	r3, r0
 80423fa:	2b01      	cmp	r3, #1
 80423fc:	d001      	beq.n	8042402 <osThreadNew+0x13e>
          hTask = NULL;
 80423fe:	2300      	movs	r3, #0
 8042400:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8042402:	693b      	ldr	r3, [r7, #16]
}
 8042404:	4618      	mov	r0, r3
 8042406:	3730      	adds	r7, #48	; 0x30
 8042408:	46bd      	mov	sp, r7
 804240a:	bd80      	pop	{r7, pc}
 804240c:	20018044 	.word	0x20018044

08042410 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8042410:	b580      	push	{r7, lr}
 8042412:	b086      	sub	sp, #24
 8042414:	af00      	add	r7, sp, #0
 8042416:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8042418:	f3ef 8305 	mrs	r3, IPSR
 804241c:	613b      	str	r3, [r7, #16]
  return(result);
 804241e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8042420:	2b00      	cmp	r3, #0
 8042422:	d10f      	bne.n	8042444 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8042424:	f3ef 8310 	mrs	r3, PRIMASK
 8042428:	60fb      	str	r3, [r7, #12]
  return(result);
 804242a:	68fb      	ldr	r3, [r7, #12]
 804242c:	2b00      	cmp	r3, #0
 804242e:	d105      	bne.n	804243c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8042430:	f3ef 8311 	mrs	r3, BASEPRI
 8042434:	60bb      	str	r3, [r7, #8]
  return(result);
 8042436:	68bb      	ldr	r3, [r7, #8]
 8042438:	2b00      	cmp	r3, #0
 804243a:	d007      	beq.n	804244c <osDelay+0x3c>
 804243c:	4b0a      	ldr	r3, [pc, #40]	; (8042468 <osDelay+0x58>)
 804243e:	681b      	ldr	r3, [r3, #0]
 8042440:	2b02      	cmp	r3, #2
 8042442:	d103      	bne.n	804244c <osDelay+0x3c>
    stat = osErrorISR;
 8042444:	f06f 0305 	mvn.w	r3, #5
 8042448:	617b      	str	r3, [r7, #20]
 804244a:	e007      	b.n	804245c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 804244c:	2300      	movs	r3, #0
 804244e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8042450:	687b      	ldr	r3, [r7, #4]
 8042452:	2b00      	cmp	r3, #0
 8042454:	d002      	beq.n	804245c <osDelay+0x4c>
      vTaskDelay(ticks);
 8042456:	6878      	ldr	r0, [r7, #4]
 8042458:	f001 fa68 	bl	804392c <vTaskDelay>
    }
  }

  return (stat);
 804245c:	697b      	ldr	r3, [r7, #20]
}
 804245e:	4618      	mov	r0, r3
 8042460:	3718      	adds	r7, #24
 8042462:	46bd      	mov	sp, r7
 8042464:	bd80      	pop	{r7, pc}
 8042466:	bf00      	nop
 8042468:	20018044 	.word	0x20018044

0804246c <vApplicationStackOverflowHook>:

/**
  Dummy implementation of the callback function vApplicationStackOverflowHook().
*/
#if (configCHECK_FOR_STACK_OVERFLOW > 0)
__WEAK void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName) {
 804246c:	b480      	push	{r7}
 804246e:	b083      	sub	sp, #12
 8042470:	af00      	add	r7, sp, #0
 8042472:	6078      	str	r0, [r7, #4]
 8042474:	6039      	str	r1, [r7, #0]
  (void)xTask;
  (void)pcTaskName;
}
 8042476:	bf00      	nop
 8042478:	370c      	adds	r7, #12
 804247a:	46bd      	mov	sp, r7
 804247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042480:	4770      	bx	lr
	...

08042484 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8042484:	b480      	push	{r7}
 8042486:	b085      	sub	sp, #20
 8042488:	af00      	add	r7, sp, #0
 804248a:	60f8      	str	r0, [r7, #12]
 804248c:	60b9      	str	r1, [r7, #8]
 804248e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8042490:	68fb      	ldr	r3, [r7, #12]
 8042492:	4a07      	ldr	r2, [pc, #28]	; (80424b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8042494:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8042496:	68bb      	ldr	r3, [r7, #8]
 8042498:	4a06      	ldr	r2, [pc, #24]	; (80424b4 <vApplicationGetIdleTaskMemory+0x30>)
 804249a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 804249c:	687b      	ldr	r3, [r7, #4]
 804249e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80424a2:	601a      	str	r2, [r3, #0]
}
 80424a4:	bf00      	nop
 80424a6:	3714      	adds	r7, #20
 80424a8:	46bd      	mov	sp, r7
 80424aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80424ae:	4770      	bx	lr
 80424b0:	20018048 	.word	0x20018048
 80424b4:	200180a4 	.word	0x200180a4

080424b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80424b8:	b480      	push	{r7}
 80424ba:	b085      	sub	sp, #20
 80424bc:	af00      	add	r7, sp, #0
 80424be:	60f8      	str	r0, [r7, #12]
 80424c0:	60b9      	str	r1, [r7, #8]
 80424c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80424c4:	68fb      	ldr	r3, [r7, #12]
 80424c6:	4a07      	ldr	r2, [pc, #28]	; (80424e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80424c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80424ca:	68bb      	ldr	r3, [r7, #8]
 80424cc:	4a06      	ldr	r2, [pc, #24]	; (80424e8 <vApplicationGetTimerTaskMemory+0x30>)
 80424ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80424d0:	687b      	ldr	r3, [r7, #4]
 80424d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80424d6:	601a      	str	r2, [r3, #0]
}
 80424d8:	bf00      	nop
 80424da:	3714      	adds	r7, #20
 80424dc:	46bd      	mov	sp, r7
 80424de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80424e2:	4770      	bx	lr
 80424e4:	200188a4 	.word	0x200188a4
 80424e8:	20018900 	.word	0x20018900

080424ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80424ec:	b580      	push	{r7, lr}
 80424ee:	b086      	sub	sp, #24
 80424f0:	af00      	add	r7, sp, #0
 80424f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80424f4:	2300      	movs	r3, #0
 80424f6:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80424f8:	f001 fa90 	bl	8043a1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80424fc:	4b4a      	ldr	r3, [pc, #296]	; (8042628 <pvPortMalloc+0x13c>)
 80424fe:	681b      	ldr	r3, [r3, #0]
 8042500:	2b00      	cmp	r3, #0
 8042502:	d101      	bne.n	8042508 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8042504:	f000 f8e2 	bl	80426cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8042508:	4b48      	ldr	r3, [pc, #288]	; (804262c <pvPortMalloc+0x140>)
 804250a:	681a      	ldr	r2, [r3, #0]
 804250c:	687b      	ldr	r3, [r7, #4]
 804250e:	4013      	ands	r3, r2
 8042510:	2b00      	cmp	r3, #0
 8042512:	d17b      	bne.n	804260c <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8042514:	687b      	ldr	r3, [r7, #4]
 8042516:	2b00      	cmp	r3, #0
 8042518:	d014      	beq.n	8042544 <pvPortMalloc+0x58>
			{
				xWantedSize += xHeapStructSize;
 804251a:	2208      	movs	r2, #8
 804251c:	687b      	ldr	r3, [r7, #4]
 804251e:	4413      	add	r3, r2
 8042520:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8042522:	687b      	ldr	r3, [r7, #4]
 8042524:	f003 0307 	and.w	r3, r3, #7
 8042528:	2b00      	cmp	r3, #0
 804252a:	d00b      	beq.n	8042544 <pvPortMalloc+0x58>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 804252c:	687b      	ldr	r3, [r7, #4]
 804252e:	f023 0307 	bic.w	r3, r3, #7
 8042532:	3308      	adds	r3, #8
 8042534:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8042536:	687b      	ldr	r3, [r7, #4]
 8042538:	f003 0307 	and.w	r3, r3, #7
 804253c:	2b00      	cmp	r3, #0
 804253e:	d001      	beq.n	8042544 <pvPortMalloc+0x58>
 8042540:	b672      	cpsid	i
 8042542:	e7fe      	b.n	8042542 <pvPortMalloc+0x56>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8042544:	687b      	ldr	r3, [r7, #4]
 8042546:	2b00      	cmp	r3, #0
 8042548:	d060      	beq.n	804260c <pvPortMalloc+0x120>
 804254a:	4b39      	ldr	r3, [pc, #228]	; (8042630 <pvPortMalloc+0x144>)
 804254c:	681b      	ldr	r3, [r3, #0]
 804254e:	687a      	ldr	r2, [r7, #4]
 8042550:	429a      	cmp	r2, r3
 8042552:	d85b      	bhi.n	804260c <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8042554:	4b37      	ldr	r3, [pc, #220]	; (8042634 <pvPortMalloc+0x148>)
 8042556:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8042558:	4b36      	ldr	r3, [pc, #216]	; (8042634 <pvPortMalloc+0x148>)
 804255a:	681b      	ldr	r3, [r3, #0]
 804255c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 804255e:	e004      	b.n	804256a <pvPortMalloc+0x7e>
				{
					pxPreviousBlock = pxBlock;
 8042560:	697b      	ldr	r3, [r7, #20]
 8042562:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8042564:	697b      	ldr	r3, [r7, #20]
 8042566:	681b      	ldr	r3, [r3, #0]
 8042568:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 804256a:	697b      	ldr	r3, [r7, #20]
 804256c:	685b      	ldr	r3, [r3, #4]
 804256e:	687a      	ldr	r2, [r7, #4]
 8042570:	429a      	cmp	r2, r3
 8042572:	d903      	bls.n	804257c <pvPortMalloc+0x90>
 8042574:	697b      	ldr	r3, [r7, #20]
 8042576:	681b      	ldr	r3, [r3, #0]
 8042578:	2b00      	cmp	r3, #0
 804257a:	d1f1      	bne.n	8042560 <pvPortMalloc+0x74>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 804257c:	4b2a      	ldr	r3, [pc, #168]	; (8042628 <pvPortMalloc+0x13c>)
 804257e:	681b      	ldr	r3, [r3, #0]
 8042580:	697a      	ldr	r2, [r7, #20]
 8042582:	429a      	cmp	r2, r3
 8042584:	d042      	beq.n	804260c <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8042586:	693b      	ldr	r3, [r7, #16]
 8042588:	681b      	ldr	r3, [r3, #0]
 804258a:	2208      	movs	r2, #8
 804258c:	4413      	add	r3, r2
 804258e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8042590:	697b      	ldr	r3, [r7, #20]
 8042592:	681a      	ldr	r2, [r3, #0]
 8042594:	693b      	ldr	r3, [r7, #16]
 8042596:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8042598:	697b      	ldr	r3, [r7, #20]
 804259a:	685a      	ldr	r2, [r3, #4]
 804259c:	687b      	ldr	r3, [r7, #4]
 804259e:	1ad2      	subs	r2, r2, r3
 80425a0:	2308      	movs	r3, #8
 80425a2:	005b      	lsls	r3, r3, #1
 80425a4:	429a      	cmp	r2, r3
 80425a6:	d916      	bls.n	80425d6 <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80425a8:	697a      	ldr	r2, [r7, #20]
 80425aa:	687b      	ldr	r3, [r7, #4]
 80425ac:	4413      	add	r3, r2
 80425ae:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80425b0:	68bb      	ldr	r3, [r7, #8]
 80425b2:	f003 0307 	and.w	r3, r3, #7
 80425b6:	2b00      	cmp	r3, #0
 80425b8:	d001      	beq.n	80425be <pvPortMalloc+0xd2>
 80425ba:	b672      	cpsid	i
 80425bc:	e7fe      	b.n	80425bc <pvPortMalloc+0xd0>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80425be:	697b      	ldr	r3, [r7, #20]
 80425c0:	685a      	ldr	r2, [r3, #4]
 80425c2:	687b      	ldr	r3, [r7, #4]
 80425c4:	1ad2      	subs	r2, r2, r3
 80425c6:	68bb      	ldr	r3, [r7, #8]
 80425c8:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80425ca:	697b      	ldr	r3, [r7, #20]
 80425cc:	687a      	ldr	r2, [r7, #4]
 80425ce:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80425d0:	68b8      	ldr	r0, [r7, #8]
 80425d2:	f000 f8dd 	bl	8042790 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80425d6:	4b16      	ldr	r3, [pc, #88]	; (8042630 <pvPortMalloc+0x144>)
 80425d8:	681a      	ldr	r2, [r3, #0]
 80425da:	697b      	ldr	r3, [r7, #20]
 80425dc:	685b      	ldr	r3, [r3, #4]
 80425de:	1ad3      	subs	r3, r2, r3
 80425e0:	4a13      	ldr	r2, [pc, #76]	; (8042630 <pvPortMalloc+0x144>)
 80425e2:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80425e4:	4b12      	ldr	r3, [pc, #72]	; (8042630 <pvPortMalloc+0x144>)
 80425e6:	681a      	ldr	r2, [r3, #0]
 80425e8:	4b13      	ldr	r3, [pc, #76]	; (8042638 <pvPortMalloc+0x14c>)
 80425ea:	681b      	ldr	r3, [r3, #0]
 80425ec:	429a      	cmp	r2, r3
 80425ee:	d203      	bcs.n	80425f8 <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80425f0:	4b0f      	ldr	r3, [pc, #60]	; (8042630 <pvPortMalloc+0x144>)
 80425f2:	681b      	ldr	r3, [r3, #0]
 80425f4:	4a10      	ldr	r2, [pc, #64]	; (8042638 <pvPortMalloc+0x14c>)
 80425f6:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80425f8:	697b      	ldr	r3, [r7, #20]
 80425fa:	685a      	ldr	r2, [r3, #4]
 80425fc:	4b0b      	ldr	r3, [pc, #44]	; (804262c <pvPortMalloc+0x140>)
 80425fe:	681b      	ldr	r3, [r3, #0]
 8042600:	431a      	orrs	r2, r3
 8042602:	697b      	ldr	r3, [r7, #20]
 8042604:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8042606:	697b      	ldr	r3, [r7, #20]
 8042608:	2200      	movs	r2, #0
 804260a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 804260c:	f001 fa4c 	bl	8043aa8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8042610:	68fb      	ldr	r3, [r7, #12]
 8042612:	f003 0307 	and.w	r3, r3, #7
 8042616:	2b00      	cmp	r3, #0
 8042618:	d001      	beq.n	804261e <pvPortMalloc+0x132>
 804261a:	b672      	cpsid	i
 804261c:	e7fe      	b.n	804261c <pvPortMalloc+0x130>
	return pvReturn;
 804261e:	68fb      	ldr	r3, [r7, #12]
}
 8042620:	4618      	mov	r0, r3
 8042622:	3718      	adds	r7, #24
 8042624:	46bd      	mov	sp, r7
 8042626:	bd80      	pop	{r7, pc}
 8042628:	2001b108 	.word	0x2001b108
 804262c:	2001b114 	.word	0x2001b114
 8042630:	2001b10c 	.word	0x2001b10c
 8042634:	2001b100 	.word	0x2001b100
 8042638:	2001b110 	.word	0x2001b110

0804263c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 804263c:	b580      	push	{r7, lr}
 804263e:	b084      	sub	sp, #16
 8042640:	af00      	add	r7, sp, #0
 8042642:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8042644:	687b      	ldr	r3, [r7, #4]
 8042646:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8042648:	687b      	ldr	r3, [r7, #4]
 804264a:	2b00      	cmp	r3, #0
 804264c:	d036      	beq.n	80426bc <vPortFree+0x80>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 804264e:	2308      	movs	r3, #8
 8042650:	425b      	negs	r3, r3
 8042652:	68fa      	ldr	r2, [r7, #12]
 8042654:	4413      	add	r3, r2
 8042656:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8042658:	68fb      	ldr	r3, [r7, #12]
 804265a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 804265c:	68bb      	ldr	r3, [r7, #8]
 804265e:	685a      	ldr	r2, [r3, #4]
 8042660:	4b18      	ldr	r3, [pc, #96]	; (80426c4 <vPortFree+0x88>)
 8042662:	681b      	ldr	r3, [r3, #0]
 8042664:	4013      	ands	r3, r2
 8042666:	2b00      	cmp	r3, #0
 8042668:	d101      	bne.n	804266e <vPortFree+0x32>
 804266a:	b672      	cpsid	i
 804266c:	e7fe      	b.n	804266c <vPortFree+0x30>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 804266e:	68bb      	ldr	r3, [r7, #8]
 8042670:	681b      	ldr	r3, [r3, #0]
 8042672:	2b00      	cmp	r3, #0
 8042674:	d001      	beq.n	804267a <vPortFree+0x3e>
 8042676:	b672      	cpsid	i
 8042678:	e7fe      	b.n	8042678 <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 804267a:	68bb      	ldr	r3, [r7, #8]
 804267c:	685a      	ldr	r2, [r3, #4]
 804267e:	4b11      	ldr	r3, [pc, #68]	; (80426c4 <vPortFree+0x88>)
 8042680:	681b      	ldr	r3, [r3, #0]
 8042682:	4013      	ands	r3, r2
 8042684:	2b00      	cmp	r3, #0
 8042686:	d019      	beq.n	80426bc <vPortFree+0x80>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8042688:	68bb      	ldr	r3, [r7, #8]
 804268a:	681b      	ldr	r3, [r3, #0]
 804268c:	2b00      	cmp	r3, #0
 804268e:	d115      	bne.n	80426bc <vPortFree+0x80>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8042690:	68bb      	ldr	r3, [r7, #8]
 8042692:	685a      	ldr	r2, [r3, #4]
 8042694:	4b0b      	ldr	r3, [pc, #44]	; (80426c4 <vPortFree+0x88>)
 8042696:	681b      	ldr	r3, [r3, #0]
 8042698:	43db      	mvns	r3, r3
 804269a:	401a      	ands	r2, r3
 804269c:	68bb      	ldr	r3, [r7, #8]
 804269e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80426a0:	f001 f9bc 	bl	8043a1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80426a4:	68bb      	ldr	r3, [r7, #8]
 80426a6:	685a      	ldr	r2, [r3, #4]
 80426a8:	4b07      	ldr	r3, [pc, #28]	; (80426c8 <vPortFree+0x8c>)
 80426aa:	681b      	ldr	r3, [r3, #0]
 80426ac:	4413      	add	r3, r2
 80426ae:	4a06      	ldr	r2, [pc, #24]	; (80426c8 <vPortFree+0x8c>)
 80426b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80426b2:	68b8      	ldr	r0, [r7, #8]
 80426b4:	f000 f86c 	bl	8042790 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80426b8:	f001 f9f6 	bl	8043aa8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80426bc:	bf00      	nop
 80426be:	3710      	adds	r7, #16
 80426c0:	46bd      	mov	sp, r7
 80426c2:	bd80      	pop	{r7, pc}
 80426c4:	2001b114 	.word	0x2001b114
 80426c8:	2001b10c 	.word	0x2001b10c

080426cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80426cc:	b480      	push	{r7}
 80426ce:	b085      	sub	sp, #20
 80426d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80426d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80426d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80426d8:	4b27      	ldr	r3, [pc, #156]	; (8042778 <prvHeapInit+0xac>)
 80426da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80426dc:	68fb      	ldr	r3, [r7, #12]
 80426de:	f003 0307 	and.w	r3, r3, #7
 80426e2:	2b00      	cmp	r3, #0
 80426e4:	d00c      	beq.n	8042700 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80426e6:	68fb      	ldr	r3, [r7, #12]
 80426e8:	3307      	adds	r3, #7
 80426ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80426ec:	68fb      	ldr	r3, [r7, #12]
 80426ee:	f023 0307 	bic.w	r3, r3, #7
 80426f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80426f4:	68ba      	ldr	r2, [r7, #8]
 80426f6:	68fb      	ldr	r3, [r7, #12]
 80426f8:	1ad3      	subs	r3, r2, r3
 80426fa:	4a1f      	ldr	r2, [pc, #124]	; (8042778 <prvHeapInit+0xac>)
 80426fc:	4413      	add	r3, r2
 80426fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8042700:	68fb      	ldr	r3, [r7, #12]
 8042702:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8042704:	4a1d      	ldr	r2, [pc, #116]	; (804277c <prvHeapInit+0xb0>)
 8042706:	687b      	ldr	r3, [r7, #4]
 8042708:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 804270a:	4b1c      	ldr	r3, [pc, #112]	; (804277c <prvHeapInit+0xb0>)
 804270c:	2200      	movs	r2, #0
 804270e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8042710:	687b      	ldr	r3, [r7, #4]
 8042712:	68ba      	ldr	r2, [r7, #8]
 8042714:	4413      	add	r3, r2
 8042716:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8042718:	2208      	movs	r2, #8
 804271a:	68fb      	ldr	r3, [r7, #12]
 804271c:	1a9b      	subs	r3, r3, r2
 804271e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8042720:	68fb      	ldr	r3, [r7, #12]
 8042722:	f023 0307 	bic.w	r3, r3, #7
 8042726:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8042728:	68fb      	ldr	r3, [r7, #12]
 804272a:	4a15      	ldr	r2, [pc, #84]	; (8042780 <prvHeapInit+0xb4>)
 804272c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 804272e:	4b14      	ldr	r3, [pc, #80]	; (8042780 <prvHeapInit+0xb4>)
 8042730:	681b      	ldr	r3, [r3, #0]
 8042732:	2200      	movs	r2, #0
 8042734:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8042736:	4b12      	ldr	r3, [pc, #72]	; (8042780 <prvHeapInit+0xb4>)
 8042738:	681b      	ldr	r3, [r3, #0]
 804273a:	2200      	movs	r2, #0
 804273c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 804273e:	687b      	ldr	r3, [r7, #4]
 8042740:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8042742:	683b      	ldr	r3, [r7, #0]
 8042744:	68fa      	ldr	r2, [r7, #12]
 8042746:	1ad2      	subs	r2, r2, r3
 8042748:	683b      	ldr	r3, [r7, #0]
 804274a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 804274c:	4b0c      	ldr	r3, [pc, #48]	; (8042780 <prvHeapInit+0xb4>)
 804274e:	681a      	ldr	r2, [r3, #0]
 8042750:	683b      	ldr	r3, [r7, #0]
 8042752:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8042754:	683b      	ldr	r3, [r7, #0]
 8042756:	685b      	ldr	r3, [r3, #4]
 8042758:	4a0a      	ldr	r2, [pc, #40]	; (8042784 <prvHeapInit+0xb8>)
 804275a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 804275c:	683b      	ldr	r3, [r7, #0]
 804275e:	685b      	ldr	r3, [r3, #4]
 8042760:	4a09      	ldr	r2, [pc, #36]	; (8042788 <prvHeapInit+0xbc>)
 8042762:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8042764:	4b09      	ldr	r3, [pc, #36]	; (804278c <prvHeapInit+0xc0>)
 8042766:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 804276a:	601a      	str	r2, [r3, #0]
}
 804276c:	bf00      	nop
 804276e:	3714      	adds	r7, #20
 8042770:	46bd      	mov	sp, r7
 8042772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042776:	4770      	bx	lr
 8042778:	20019100 	.word	0x20019100
 804277c:	2001b100 	.word	0x2001b100
 8042780:	2001b108 	.word	0x2001b108
 8042784:	2001b110 	.word	0x2001b110
 8042788:	2001b10c 	.word	0x2001b10c
 804278c:	2001b114 	.word	0x2001b114

08042790 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8042790:	b480      	push	{r7}
 8042792:	b085      	sub	sp, #20
 8042794:	af00      	add	r7, sp, #0
 8042796:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8042798:	4b28      	ldr	r3, [pc, #160]	; (804283c <prvInsertBlockIntoFreeList+0xac>)
 804279a:	60fb      	str	r3, [r7, #12]
 804279c:	e002      	b.n	80427a4 <prvInsertBlockIntoFreeList+0x14>
 804279e:	68fb      	ldr	r3, [r7, #12]
 80427a0:	681b      	ldr	r3, [r3, #0]
 80427a2:	60fb      	str	r3, [r7, #12]
 80427a4:	68fb      	ldr	r3, [r7, #12]
 80427a6:	681b      	ldr	r3, [r3, #0]
 80427a8:	687a      	ldr	r2, [r7, #4]
 80427aa:	429a      	cmp	r2, r3
 80427ac:	d8f7      	bhi.n	804279e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80427ae:	68fb      	ldr	r3, [r7, #12]
 80427b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80427b2:	68fb      	ldr	r3, [r7, #12]
 80427b4:	685b      	ldr	r3, [r3, #4]
 80427b6:	68ba      	ldr	r2, [r7, #8]
 80427b8:	4413      	add	r3, r2
 80427ba:	687a      	ldr	r2, [r7, #4]
 80427bc:	429a      	cmp	r2, r3
 80427be:	d108      	bne.n	80427d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80427c0:	68fb      	ldr	r3, [r7, #12]
 80427c2:	685a      	ldr	r2, [r3, #4]
 80427c4:	687b      	ldr	r3, [r7, #4]
 80427c6:	685b      	ldr	r3, [r3, #4]
 80427c8:	441a      	add	r2, r3
 80427ca:	68fb      	ldr	r3, [r7, #12]
 80427cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80427ce:	68fb      	ldr	r3, [r7, #12]
 80427d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80427d2:	687b      	ldr	r3, [r7, #4]
 80427d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80427d6:	687b      	ldr	r3, [r7, #4]
 80427d8:	685b      	ldr	r3, [r3, #4]
 80427da:	68ba      	ldr	r2, [r7, #8]
 80427dc:	441a      	add	r2, r3
 80427de:	68fb      	ldr	r3, [r7, #12]
 80427e0:	681b      	ldr	r3, [r3, #0]
 80427e2:	429a      	cmp	r2, r3
 80427e4:	d118      	bne.n	8042818 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80427e6:	68fb      	ldr	r3, [r7, #12]
 80427e8:	681a      	ldr	r2, [r3, #0]
 80427ea:	4b15      	ldr	r3, [pc, #84]	; (8042840 <prvInsertBlockIntoFreeList+0xb0>)
 80427ec:	681b      	ldr	r3, [r3, #0]
 80427ee:	429a      	cmp	r2, r3
 80427f0:	d00d      	beq.n	804280e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80427f2:	687b      	ldr	r3, [r7, #4]
 80427f4:	685a      	ldr	r2, [r3, #4]
 80427f6:	68fb      	ldr	r3, [r7, #12]
 80427f8:	681b      	ldr	r3, [r3, #0]
 80427fa:	685b      	ldr	r3, [r3, #4]
 80427fc:	441a      	add	r2, r3
 80427fe:	687b      	ldr	r3, [r7, #4]
 8042800:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8042802:	68fb      	ldr	r3, [r7, #12]
 8042804:	681b      	ldr	r3, [r3, #0]
 8042806:	681a      	ldr	r2, [r3, #0]
 8042808:	687b      	ldr	r3, [r7, #4]
 804280a:	601a      	str	r2, [r3, #0]
 804280c:	e008      	b.n	8042820 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 804280e:	4b0c      	ldr	r3, [pc, #48]	; (8042840 <prvInsertBlockIntoFreeList+0xb0>)
 8042810:	681a      	ldr	r2, [r3, #0]
 8042812:	687b      	ldr	r3, [r7, #4]
 8042814:	601a      	str	r2, [r3, #0]
 8042816:	e003      	b.n	8042820 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8042818:	68fb      	ldr	r3, [r7, #12]
 804281a:	681a      	ldr	r2, [r3, #0]
 804281c:	687b      	ldr	r3, [r7, #4]
 804281e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8042820:	68fa      	ldr	r2, [r7, #12]
 8042822:	687b      	ldr	r3, [r7, #4]
 8042824:	429a      	cmp	r2, r3
 8042826:	d002      	beq.n	804282e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8042828:	68fb      	ldr	r3, [r7, #12]
 804282a:	687a      	ldr	r2, [r7, #4]
 804282c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 804282e:	bf00      	nop
 8042830:	3714      	adds	r7, #20
 8042832:	46bd      	mov	sp, r7
 8042834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042838:	4770      	bx	lr
 804283a:	bf00      	nop
 804283c:	2001b100 	.word	0x2001b100
 8042840:	2001b108 	.word	0x2001b108

08042844 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8042844:	b480      	push	{r7}
 8042846:	b083      	sub	sp, #12
 8042848:	af00      	add	r7, sp, #0
 804284a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 804284c:	687b      	ldr	r3, [r7, #4]
 804284e:	f103 0208 	add.w	r2, r3, #8
 8042852:	687b      	ldr	r3, [r7, #4]
 8042854:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8042856:	687b      	ldr	r3, [r7, #4]
 8042858:	f04f 32ff 	mov.w	r2, #4294967295
 804285c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 804285e:	687b      	ldr	r3, [r7, #4]
 8042860:	f103 0208 	add.w	r2, r3, #8
 8042864:	687b      	ldr	r3, [r7, #4]
 8042866:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8042868:	687b      	ldr	r3, [r7, #4]
 804286a:	f103 0208 	add.w	r2, r3, #8
 804286e:	687b      	ldr	r3, [r7, #4]
 8042870:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8042872:	687b      	ldr	r3, [r7, #4]
 8042874:	2200      	movs	r2, #0
 8042876:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8042878:	bf00      	nop
 804287a:	370c      	adds	r7, #12
 804287c:	46bd      	mov	sp, r7
 804287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042882:	4770      	bx	lr

08042884 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8042884:	b480      	push	{r7}
 8042886:	b083      	sub	sp, #12
 8042888:	af00      	add	r7, sp, #0
 804288a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 804288c:	687b      	ldr	r3, [r7, #4]
 804288e:	2200      	movs	r2, #0
 8042890:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8042892:	bf00      	nop
 8042894:	370c      	adds	r7, #12
 8042896:	46bd      	mov	sp, r7
 8042898:	f85d 7b04 	ldr.w	r7, [sp], #4
 804289c:	4770      	bx	lr

0804289e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 804289e:	b480      	push	{r7}
 80428a0:	b085      	sub	sp, #20
 80428a2:	af00      	add	r7, sp, #0
 80428a4:	6078      	str	r0, [r7, #4]
 80428a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80428a8:	687b      	ldr	r3, [r7, #4]
 80428aa:	685b      	ldr	r3, [r3, #4]
 80428ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80428ae:	683b      	ldr	r3, [r7, #0]
 80428b0:	68fa      	ldr	r2, [r7, #12]
 80428b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80428b4:	68fb      	ldr	r3, [r7, #12]
 80428b6:	689a      	ldr	r2, [r3, #8]
 80428b8:	683b      	ldr	r3, [r7, #0]
 80428ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80428bc:	68fb      	ldr	r3, [r7, #12]
 80428be:	689b      	ldr	r3, [r3, #8]
 80428c0:	683a      	ldr	r2, [r7, #0]
 80428c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80428c4:	68fb      	ldr	r3, [r7, #12]
 80428c6:	683a      	ldr	r2, [r7, #0]
 80428c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80428ca:	683b      	ldr	r3, [r7, #0]
 80428cc:	687a      	ldr	r2, [r7, #4]
 80428ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80428d0:	687b      	ldr	r3, [r7, #4]
 80428d2:	681b      	ldr	r3, [r3, #0]
 80428d4:	1c5a      	adds	r2, r3, #1
 80428d6:	687b      	ldr	r3, [r7, #4]
 80428d8:	601a      	str	r2, [r3, #0]
}
 80428da:	bf00      	nop
 80428dc:	3714      	adds	r7, #20
 80428de:	46bd      	mov	sp, r7
 80428e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80428e4:	4770      	bx	lr

080428e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80428e6:	b480      	push	{r7}
 80428e8:	b085      	sub	sp, #20
 80428ea:	af00      	add	r7, sp, #0
 80428ec:	6078      	str	r0, [r7, #4]
 80428ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80428f0:	683b      	ldr	r3, [r7, #0]
 80428f2:	681b      	ldr	r3, [r3, #0]
 80428f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80428f6:	68bb      	ldr	r3, [r7, #8]
 80428f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80428fc:	d103      	bne.n	8042906 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80428fe:	687b      	ldr	r3, [r7, #4]
 8042900:	691b      	ldr	r3, [r3, #16]
 8042902:	60fb      	str	r3, [r7, #12]
 8042904:	e00c      	b.n	8042920 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8042906:	687b      	ldr	r3, [r7, #4]
 8042908:	3308      	adds	r3, #8
 804290a:	60fb      	str	r3, [r7, #12]
 804290c:	e002      	b.n	8042914 <vListInsert+0x2e>
 804290e:	68fb      	ldr	r3, [r7, #12]
 8042910:	685b      	ldr	r3, [r3, #4]
 8042912:	60fb      	str	r3, [r7, #12]
 8042914:	68fb      	ldr	r3, [r7, #12]
 8042916:	685b      	ldr	r3, [r3, #4]
 8042918:	681b      	ldr	r3, [r3, #0]
 804291a:	68ba      	ldr	r2, [r7, #8]
 804291c:	429a      	cmp	r2, r3
 804291e:	d2f6      	bcs.n	804290e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8042920:	68fb      	ldr	r3, [r7, #12]
 8042922:	685a      	ldr	r2, [r3, #4]
 8042924:	683b      	ldr	r3, [r7, #0]
 8042926:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8042928:	683b      	ldr	r3, [r7, #0]
 804292a:	685b      	ldr	r3, [r3, #4]
 804292c:	683a      	ldr	r2, [r7, #0]
 804292e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8042930:	683b      	ldr	r3, [r7, #0]
 8042932:	68fa      	ldr	r2, [r7, #12]
 8042934:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8042936:	68fb      	ldr	r3, [r7, #12]
 8042938:	683a      	ldr	r2, [r7, #0]
 804293a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 804293c:	683b      	ldr	r3, [r7, #0]
 804293e:	687a      	ldr	r2, [r7, #4]
 8042940:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8042942:	687b      	ldr	r3, [r7, #4]
 8042944:	681b      	ldr	r3, [r3, #0]
 8042946:	1c5a      	adds	r2, r3, #1
 8042948:	687b      	ldr	r3, [r7, #4]
 804294a:	601a      	str	r2, [r3, #0]
}
 804294c:	bf00      	nop
 804294e:	3714      	adds	r7, #20
 8042950:	46bd      	mov	sp, r7
 8042952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042956:	4770      	bx	lr

08042958 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8042958:	b480      	push	{r7}
 804295a:	b085      	sub	sp, #20
 804295c:	af00      	add	r7, sp, #0
 804295e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8042960:	687b      	ldr	r3, [r7, #4]
 8042962:	691b      	ldr	r3, [r3, #16]
 8042964:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8042966:	687b      	ldr	r3, [r7, #4]
 8042968:	685b      	ldr	r3, [r3, #4]
 804296a:	687a      	ldr	r2, [r7, #4]
 804296c:	6892      	ldr	r2, [r2, #8]
 804296e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8042970:	687b      	ldr	r3, [r7, #4]
 8042972:	689b      	ldr	r3, [r3, #8]
 8042974:	687a      	ldr	r2, [r7, #4]
 8042976:	6852      	ldr	r2, [r2, #4]
 8042978:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 804297a:	68fb      	ldr	r3, [r7, #12]
 804297c:	685b      	ldr	r3, [r3, #4]
 804297e:	687a      	ldr	r2, [r7, #4]
 8042980:	429a      	cmp	r2, r3
 8042982:	d103      	bne.n	804298c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8042984:	687b      	ldr	r3, [r7, #4]
 8042986:	689a      	ldr	r2, [r3, #8]
 8042988:	68fb      	ldr	r3, [r7, #12]
 804298a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 804298c:	687b      	ldr	r3, [r7, #4]
 804298e:	2200      	movs	r2, #0
 8042990:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8042992:	68fb      	ldr	r3, [r7, #12]
 8042994:	681b      	ldr	r3, [r3, #0]
 8042996:	1e5a      	subs	r2, r3, #1
 8042998:	68fb      	ldr	r3, [r7, #12]
 804299a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 804299c:	68fb      	ldr	r3, [r7, #12]
 804299e:	681b      	ldr	r3, [r3, #0]
}
 80429a0:	4618      	mov	r0, r3
 80429a2:	3714      	adds	r7, #20
 80429a4:	46bd      	mov	sp, r7
 80429a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80429aa:	4770      	bx	lr

080429ac <prvSetupTimerInterrupt>:
	portDONT_DISCARD volatile SecureContextHandle_t xSecureContext = portNO_SECURE_CONTEXT;
#endif /* configENABLE_TRUSTZONE */
/*-----------------------------------------------------------*/

static void prvSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 80429ac:	b480      	push	{r7}
 80429ae:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*( portNVIC_SYSTICK_CTRL ) = 0UL;
 80429b0:	4b0b      	ldr	r3, [pc, #44]	; (80429e0 <prvSetupTimerInterrupt+0x34>)
 80429b2:	2200      	movs	r2, #0
 80429b4:	601a      	str	r2, [r3, #0]
	*( portNVIC_SYSTICK_CURRENT_VALUE ) = 0UL;
 80429b6:	4b0b      	ldr	r3, [pc, #44]	; (80429e4 <prvSetupTimerInterrupt+0x38>)
 80429b8:	2200      	movs	r2, #0
 80429ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*( portNVIC_SYSTICK_LOAD ) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80429bc:	4b0a      	ldr	r3, [pc, #40]	; (80429e8 <prvSetupTimerInterrupt+0x3c>)
 80429be:	681b      	ldr	r3, [r3, #0]
 80429c0:	4a0a      	ldr	r2, [pc, #40]	; (80429ec <prvSetupTimerInterrupt+0x40>)
 80429c2:	fba2 2303 	umull	r2, r3, r2, r3
 80429c6:	099b      	lsrs	r3, r3, #6
 80429c8:	4a09      	ldr	r2, [pc, #36]	; (80429f0 <prvSetupTimerInterrupt+0x44>)
 80429ca:	3b01      	subs	r3, #1
 80429cc:	6013      	str	r3, [r2, #0]
	*( portNVIC_SYSTICK_CTRL ) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80429ce:	4b04      	ldr	r3, [pc, #16]	; (80429e0 <prvSetupTimerInterrupt+0x34>)
 80429d0:	2207      	movs	r2, #7
 80429d2:	601a      	str	r2, [r3, #0]
}
 80429d4:	bf00      	nop
 80429d6:	46bd      	mov	sp, r7
 80429d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80429dc:	4770      	bx	lr
 80429de:	bf00      	nop
 80429e0:	e000e010 	.word	0xe000e010
 80429e4:	e000e018 	.word	0xe000e018
 80429e8:	20018014 	.word	0x20018014
 80429ec:	10624dd3 	.word	0x10624dd3
 80429f0:	e000e014 	.word	0xe000e014

080429f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80429f4:	b480      	push	{r7}
 80429f6:	b083      	sub	sp, #12
 80429f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80429fa:	2300      	movs	r3, #0
 80429fc:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 80429fe:	4b09      	ldr	r3, [pc, #36]	; (8042a24 <prvTaskExitError+0x30>)
 8042a00:	681b      	ldr	r3, [r3, #0]
 8042a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042a06:	d001      	beq.n	8042a0c <prvTaskExitError+0x18>
 8042a08:	b672      	cpsid	i
 8042a0a:	e7fe      	b.n	8042a0a <prvTaskExitError+0x16>
	portDISABLE_INTERRUPTS();
 8042a0c:	b672      	cpsid	i

	while( ulDummy == 0 )
 8042a0e:	bf00      	nop
 8042a10:	687b      	ldr	r3, [r7, #4]
 8042a12:	2b00      	cmp	r3, #0
 8042a14:	d0fc      	beq.n	8042a10 <prvTaskExitError+0x1c>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 8042a16:	bf00      	nop
 8042a18:	370c      	adds	r7, #12
 8042a1a:	46bd      	mov	sp, r7
 8042a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042a20:	4770      	bx	lr
 8042a22:	bf00      	nop
 8042a24:	20018020 	.word	0x20018020

08042a28 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8042a28:	b480      	push	{r7}
 8042a2a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8042a2c:	4b06      	ldr	r3, [pc, #24]	; (8042a48 <vPortYield+0x20>)
 8042a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8042a32:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8042a34:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8042a38:	f3bf 8f6f 	isb	sy
}
 8042a3c:	bf00      	nop
 8042a3e:	46bd      	mov	sp, r7
 8042a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042a44:	4770      	bx	lr
 8042a46:	bf00      	nop
 8042a48:	e000ed04 	.word	0xe000ed04

08042a4c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8042a4c:	b480      	push	{r7}
 8042a4e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8042a50:	b672      	cpsid	i
	ulCriticalNesting++;
 8042a52:	4b07      	ldr	r3, [pc, #28]	; (8042a70 <vPortEnterCritical+0x24>)
 8042a54:	681b      	ldr	r3, [r3, #0]
 8042a56:	3301      	adds	r3, #1
 8042a58:	4a05      	ldr	r2, [pc, #20]	; (8042a70 <vPortEnterCritical+0x24>)
 8042a5a:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8042a5c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8042a60:	f3bf 8f6f 	isb	sy
}
 8042a64:	bf00      	nop
 8042a66:	46bd      	mov	sp, r7
 8042a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042a6c:	4770      	bx	lr
 8042a6e:	bf00      	nop
 8042a70:	20018020 	.word	0x20018020

08042a74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8042a74:	b480      	push	{r7}
 8042a76:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 8042a78:	4b0a      	ldr	r3, [pc, #40]	; (8042aa4 <vPortExitCritical+0x30>)
 8042a7a:	681b      	ldr	r3, [r3, #0]
 8042a7c:	2b00      	cmp	r3, #0
 8042a7e:	d101      	bne.n	8042a84 <vPortExitCritical+0x10>
 8042a80:	b672      	cpsid	i
 8042a82:	e7fe      	b.n	8042a82 <vPortExitCritical+0xe>
	ulCriticalNesting--;
 8042a84:	4b07      	ldr	r3, [pc, #28]	; (8042aa4 <vPortExitCritical+0x30>)
 8042a86:	681b      	ldr	r3, [r3, #0]
 8042a88:	3b01      	subs	r3, #1
 8042a8a:	4a06      	ldr	r2, [pc, #24]	; (8042aa4 <vPortExitCritical+0x30>)
 8042a8c:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 8042a8e:	4b05      	ldr	r3, [pc, #20]	; (8042aa4 <vPortExitCritical+0x30>)
 8042a90:	681b      	ldr	r3, [r3, #0]
 8042a92:	2b00      	cmp	r3, #0
 8042a94:	d100      	bne.n	8042a98 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8042a96:	b662      	cpsie	i
	}
}
 8042a98:	bf00      	nop
 8042a9a:	46bd      	mov	sp, r7
 8042a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042aa0:	4770      	bx	lr
 8042aa2:	bf00      	nop
 8042aa4:	20018020 	.word	0x20018020

08042aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8042aa8:	b580      	push	{r7, lr}
 8042aaa:	b082      	sub	sp, #8
 8042aac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8042aae:	f000 f93b 	bl	8042d28 <ulSetInterruptMaskFromISR>
 8042ab2:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8042ab4:	f001 f894 	bl	8043be0 <xTaskIncrementTick>
 8042ab8:	4603      	mov	r3, r0
 8042aba:	2b00      	cmp	r3, #0
 8042abc:	d003      	beq.n	8042ac6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8042abe:	4b05      	ldr	r3, [pc, #20]	; (8042ad4 <SysTick_Handler+0x2c>)
 8042ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8042ac4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8042ac6:	6878      	ldr	r0, [r7, #4]
 8042ac8:	f000 f934 	bl	8042d34 <vClearInterruptMaskFromISR>
}
 8042acc:	bf00      	nop
 8042ace:	3708      	adds	r7, #8
 8042ad0:	46bd      	mov	sp, r7
 8042ad2:	bd80      	pop	{r7, pc}
 8042ad4:	e000ed04 	.word	0xe000ed04

08042ad8 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8042ad8:	b580      	push	{r7, lr}
 8042ada:	b086      	sub	sp, #24
 8042adc:	af00      	add	r7, sp, #0
 8042ade:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 8042ae0:	687b      	ldr	r3, [r7, #4]
 8042ae2:	699b      	ldr	r3, [r3, #24]
 8042ae4:	617b      	str	r3, [r7, #20]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 8042ae6:	697b      	ldr	r3, [r7, #20]
 8042ae8:	3b02      	subs	r3, #2
 8042aea:	781b      	ldrb	r3, [r3, #0]
 8042aec:	74fb      	strb	r3, [r7, #19]

	switch( ucSVCNumber )
 8042aee:	7cfb      	ldrb	r3, [r7, #19]
 8042af0:	2b01      	cmp	r3, #1
 8042af2:	d018      	beq.n	8042b26 <vPortSVCHandler_C+0x4e>
 8042af4:	2b02      	cmp	r3, #2
 8042af6:	d01e      	beq.n	8042b36 <vPortSVCHandler_C+0x5e>
 8042af8:	2b00      	cmp	r3, #0
 8042afa:	d123      	bne.n	8042b44 <vPortSVCHandler_C+0x6c>
		#if( configENABLE_TRUSTZONE == 1 )
			case portSVC_ALLOCATE_SECURE_CONTEXT:
			{
				/* R0 contains the stack size passed as parameter to the
				 * vPortAllocateSecureContext function. */
				ulR0 = pulCallerStackAddress[ 0 ];
 8042afc:	687b      	ldr	r3, [r7, #4]
 8042afe:	681b      	ldr	r3, [r3, #0]
 8042b00:	60fb      	str	r3, [r7, #12]
					xSecureContext = SecureContext_AllocateContext( ulR0, ulIsTaskPrivileged );
				}
				#else
				{
					/* Allocate and load a context for the secure task. */
					xSecureContext = SecureContext_AllocateContext( ulR0 );
 8042b02:	68f8      	ldr	r0, [r7, #12]
 8042b04:	f001 ffb0 	bl	8044a68 <__SecureContext_AllocateContext_veneer>
 8042b08:	4602      	mov	r2, r0
 8042b0a:	4b11      	ldr	r3, [pc, #68]	; (8042b50 <vPortSVCHandler_C+0x78>)
 8042b0c:	601a      	str	r2, [r3, #0]
				}
				#endif /* configENABLE_MPU */

				configASSERT( xSecureContext != NULL );
 8042b0e:	4b10      	ldr	r3, [pc, #64]	; (8042b50 <vPortSVCHandler_C+0x78>)
 8042b10:	681b      	ldr	r3, [r3, #0]
 8042b12:	2b00      	cmp	r3, #0
 8042b14:	d101      	bne.n	8042b1a <vPortSVCHandler_C+0x42>
 8042b16:	b672      	cpsid	i
 8042b18:	e7fe      	b.n	8042b18 <vPortSVCHandler_C+0x40>
				SecureContext_LoadContext( xSecureContext );
 8042b1a:	4b0d      	ldr	r3, [pc, #52]	; (8042b50 <vPortSVCHandler_C+0x78>)
 8042b1c:	681b      	ldr	r3, [r3, #0]
 8042b1e:	4618      	mov	r0, r3
 8042b20:	f001 ffc2 	bl	8044aa8 <__SecureContext_LoadContext_veneer>
			}
			break;
 8042b24:	e010      	b.n	8042b48 <vPortSVCHandler_C+0x70>

			case portSVC_FREE_SECURE_CONTEXT:
			{
				/* R0 contains the secure context handle to be freed. */
				ulR0 = pulCallerStackAddress[ 0 ];
 8042b26:	687b      	ldr	r3, [r7, #4]
 8042b28:	681b      	ldr	r3, [r3, #0]
 8042b2a:	60fb      	str	r3, [r7, #12]

				/* Free the secure context. */
				SecureContext_FreeContext( ( SecureContextHandle_t ) ulR0 );
 8042b2c:	68fb      	ldr	r3, [r7, #12]
 8042b2e:	4618      	mov	r0, r3
 8042b30:	f001 ffc2 	bl	8044ab8 <__SecureContext_FreeContext_veneer>
			}
			break;
 8042b34:	e008      	b.n	8042b48 <vPortSVCHandler_C+0x70>
		{
			#if( configENABLE_TRUSTZONE == 1 )
			{
				/* De-prioritize the non-secure exceptions so that the
				 * non-secure pendSV runs at the lowest priority. */
				SecureInit_DePrioritizeNSExceptions();
 8042b36:	f001 ff9f 	bl	8044a78 <__SecureInit_DePrioritizeNSExceptions_veneer>

				/* Initialize the secure context management system. */
				SecureContext_Init();
 8042b3a:	f001 ff8d 	bl	8044a58 <__SecureContext_Init_veneer>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 8042b3e:	f000 f8bf 	bl	8042cc0 <vRestoreContextOfFirstTask>
		}
		break;
 8042b42:	e001      	b.n	8042b48 <vPortSVCHandler_C+0x70>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 8042b44:	b672      	cpsid	i
 8042b46:	e7fe      	b.n	8042b46 <vPortSVCHandler_C+0x6e>
		}
	}
}
 8042b48:	bf00      	nop
 8042b4a:	3718      	adds	r7, #24
 8042b4c:	46bd      	mov	sp, r7
 8042b4e:	bd80      	pop	{r7, pc}
 8042b50:	2001b118 	.word	0x2001b118

08042b54 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 8042b54:	b480      	push	{r7}
 8042b56:	b085      	sub	sp, #20
 8042b58:	af00      	add	r7, sp, #0
 8042b5a:	60f8      	str	r0, [r7, #12]
 8042b5c:	60b9      	str	r1, [r7, #8]
 8042b5e:	607a      	str	r2, [r7, #4]
 8042b60:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8042b62:	68fb      	ldr	r3, [r7, #12]
 8042b64:	3b04      	subs	r3, #4
 8042b66:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 8042b68:	68fb      	ldr	r3, [r7, #12]
 8042b6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8042b6e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042b70:	68fb      	ldr	r3, [r7, #12]
 8042b72:	3b04      	subs	r3, #4
 8042b74:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 8042b76:	687a      	ldr	r2, [r7, #4]
 8042b78:	68fb      	ldr	r3, [r7, #12]
 8042b7a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042b7c:	68fb      	ldr	r3, [r7, #12]
 8042b7e:	3b04      	subs	r3, #4
 8042b80:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8042b82:	4a3b      	ldr	r2, [pc, #236]	; (8042c70 <pxPortInitialiseStack+0x11c>)
 8042b84:	68fb      	ldr	r3, [r7, #12]
 8042b86:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042b88:	68fb      	ldr	r3, [r7, #12]
 8042b8a:	3b04      	subs	r3, #4
 8042b8c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 8042b8e:	68fb      	ldr	r3, [r7, #12]
 8042b90:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8042b94:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042b96:	68fb      	ldr	r3, [r7, #12]
 8042b98:	3b04      	subs	r3, #4
 8042b9a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 8042b9c:	68fb      	ldr	r3, [r7, #12]
 8042b9e:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8042ba2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042ba4:	68fb      	ldr	r3, [r7, #12]
 8042ba6:	3b04      	subs	r3, #4
 8042ba8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 8042baa:	68fb      	ldr	r3, [r7, #12]
 8042bac:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8042bb0:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042bb2:	68fb      	ldr	r3, [r7, #12]
 8042bb4:	3b04      	subs	r3, #4
 8042bb6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 8042bb8:	68fb      	ldr	r3, [r7, #12]
 8042bba:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8042bbe:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042bc0:	68fb      	ldr	r3, [r7, #12]
 8042bc2:	3b04      	subs	r3, #4
 8042bc4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 8042bc6:	683a      	ldr	r2, [r7, #0]
 8042bc8:	68fb      	ldr	r3, [r7, #12]
 8042bca:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042bcc:	68fb      	ldr	r3, [r7, #12]
 8042bce:	3b04      	subs	r3, #4
 8042bd0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 8042bd2:	68fb      	ldr	r3, [r7, #12]
 8042bd4:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8042bd8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042bda:	68fb      	ldr	r3, [r7, #12]
 8042bdc:	3b04      	subs	r3, #4
 8042bde:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 8042be0:	68fb      	ldr	r3, [r7, #12]
 8042be2:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8042be6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042be8:	68fb      	ldr	r3, [r7, #12]
 8042bea:	3b04      	subs	r3, #4
 8042bec:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 8042bee:	68fb      	ldr	r3, [r7, #12]
 8042bf0:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8042bf4:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042bf6:	68fb      	ldr	r3, [r7, #12]
 8042bf8:	3b04      	subs	r3, #4
 8042bfa:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 8042bfc:	68fb      	ldr	r3, [r7, #12]
 8042bfe:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8042c02:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042c04:	68fb      	ldr	r3, [r7, #12]
 8042c06:	3b04      	subs	r3, #4
 8042c08:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 8042c0a:	68fb      	ldr	r3, [r7, #12]
 8042c0c:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8042c10:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042c12:	68fb      	ldr	r3, [r7, #12]
 8042c14:	3b04      	subs	r3, #4
 8042c16:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 8042c18:	68fb      	ldr	r3, [r7, #12]
 8042c1a:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8042c1e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042c20:	68fb      	ldr	r3, [r7, #12]
 8042c22:	3b04      	subs	r3, #4
 8042c24:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 8042c26:	68fb      	ldr	r3, [r7, #12]
 8042c28:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8042c2c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042c2e:	68fb      	ldr	r3, [r7, #12]
 8042c30:	3b04      	subs	r3, #4
 8042c32:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 8042c34:	68fb      	ldr	r3, [r7, #12]
 8042c36:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8042c3a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042c3c:	68fb      	ldr	r3, [r7, #12]
 8042c3e:	3b04      	subs	r3, #4
 8042c40:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 8042c42:	68fb      	ldr	r3, [r7, #12]
 8042c44:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8042c48:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 8042c4a:	68fb      	ldr	r3, [r7, #12]
 8042c4c:	3b04      	subs	r3, #4
 8042c4e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 8042c50:	68ba      	ldr	r2, [r7, #8]
 8042c52:	68fb      	ldr	r3, [r7, #12]
 8042c54:	601a      	str	r2, [r3, #0]

		#if( configENABLE_TRUSTZONE == 1 )
		{
			pxTopOfStack--;
 8042c56:	68fb      	ldr	r3, [r7, #12]
 8042c58:	3b04      	subs	r3, #4
 8042c5a:	60fb      	str	r3, [r7, #12]
			*pxTopOfStack = portNO_SECURE_CONTEXT;		/* Slot used to hold this task's xSecureContext value. */
 8042c5c:	68fb      	ldr	r3, [r7, #12]
 8042c5e:	2200      	movs	r2, #0
 8042c60:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 8042c62:	68fb      	ldr	r3, [r7, #12]
}
 8042c64:	4618      	mov	r0, r3
 8042c66:	3714      	adds	r7, #20
 8042c68:	46bd      	mov	sp, r7
 8042c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c6e:	4770      	bx	lr
 8042c70:	080429f5 	.word	0x080429f5

08042c74 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8042c74:	b580      	push	{r7, lr}
 8042c76:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*( portNVIC_SYSPRI2 ) |= portNVIC_PENDSV_PRI;
 8042c78:	4b0c      	ldr	r3, [pc, #48]	; (8042cac <xPortStartScheduler+0x38>)
 8042c7a:	681b      	ldr	r3, [r3, #0]
 8042c7c:	4a0b      	ldr	r2, [pc, #44]	; (8042cac <xPortStartScheduler+0x38>)
 8042c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8042c82:	6013      	str	r3, [r2, #0]
	*( portNVIC_SYSPRI2 ) |= portNVIC_SYSTICK_PRI;
 8042c84:	4b09      	ldr	r3, [pc, #36]	; (8042cac <xPortStartScheduler+0x38>)
 8042c86:	681b      	ldr	r3, [r3, #0]
 8042c88:	4a08      	ldr	r2, [pc, #32]	; (8042cac <xPortStartScheduler+0x38>)
 8042c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8042c8e:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	prvSetupTimerInterrupt();
 8042c90:	f7ff fe8c 	bl	80429ac <prvSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 8042c94:	4b06      	ldr	r3, [pc, #24]	; (8042cb0 <xPortStartScheduler+0x3c>)
 8042c96:	2200      	movs	r2, #0
 8042c98:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 8042c9a:	f000 f831 	bl	8042d00 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 8042c9e:	f001 f84f 	bl	8043d40 <vTaskSwitchContext>
	prvTaskExitError();
 8042ca2:	f7ff fea7 	bl	80429f4 <prvTaskExitError>

	/* Should not get here. */
	return 0;
 8042ca6:	2300      	movs	r3, #0
}
 8042ca8:	4618      	mov	r0, r3
 8042caa:	bd80      	pop	{r7, pc}
 8042cac:	e000ed20 	.word	0xe000ed20
 8042cb0:	20018020 	.word	0x20018020
	...

08042cc0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8042cc0:	4a0b      	ldr	r2, [pc, #44]	; (8042cf0 <pxCurrentTCBConst2>)
 8042cc2:	6813      	ldr	r3, [r2, #0]
 8042cc4:	6818      	ldr	r0, [r3, #0]
 8042cc6:	c80e      	ldmia	r0!, {r1, r2, r3}
 8042cc8:	4c0a      	ldr	r4, [pc, #40]	; (8042cf4 <xSecureContextConst2>)
 8042cca:	6021      	str	r1, [r4, #0]
 8042ccc:	f382 880b 	msr	PSPLIM, r2
 8042cd0:	2102      	movs	r1, #2
 8042cd2:	f381 8814 	msr	CONTROL, r1
 8042cd6:	3020      	adds	r0, #32
 8042cd8:	f380 8809 	msr	PSP, r0
 8042cdc:	f3bf 8f6f 	isb	sy
 8042ce0:	4718      	bx	r3
 8042ce2:	bf00      	nop
 8042ce4:	f3af 8000 	nop.w
 8042ce8:	f3af 8000 	nop.w
 8042cec:	f3af 8000 	nop.w

08042cf0 <pxCurrentTCBConst2>:
 8042cf0:	2001b11c 	.word	0x2001b11c

08042cf4 <xSecureContextConst2>:
 8042cf4:	2001b118 	.word	0x2001b118
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8042cf8:	bf00      	nop
 8042cfa:	bf00      	nop
 8042cfc:	0000      	movs	r0, r0
	...

08042d00 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8042d00:	4807      	ldr	r0, [pc, #28]	; (8042d20 <xVTORConst>)
 8042d02:	6800      	ldr	r0, [r0, #0]
 8042d04:	6800      	ldr	r0, [r0, #0]
 8042d06:	f380 8808 	msr	MSP, r0
 8042d0a:	b662      	cpsie	i
 8042d0c:	b661      	cpsie	f
 8042d0e:	f3bf 8f4f 	dsb	sy
 8042d12:	f3bf 8f6f 	isb	sy
 8042d16:	df02      	svc	2
 8042d18:	bf00      	nop
 8042d1a:	bf00      	nop
 8042d1c:	f3af 8000 	nop.w

08042d20 <xVTORConst>:
 8042d20:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 8042d24:	bf00      	nop
 8042d26:	bf00      	nop

08042d28 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8042d28:	f3ef 8010 	mrs	r0, PRIMASK
 8042d2c:	b672      	cpsid	i
 8042d2e:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will never be reached,
	 * but some compilers warn if it is not included, while others won't compile
	 * if it is. */
	return 0;
#endif
}
 8042d30:	bf00      	nop
 8042d32:	4618      	mov	r0, r3

08042d34 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8042d34:	f380 8810 	msr	PRIMASK, r0
 8042d38:	4770      	bx	lr
	 * the compiler can't see that.  Some compilers generate warnings without
	 * the following line, while others generate warnings if the line is
	 * included. */
	( void ) ulMask;
#endif
}
 8042d3a:	bf00      	nop
 8042d3c:	0000      	movs	r0, r0
	...

08042d40 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8042d40:	f3ef 8109 	mrs	r1, PSP
 8042d44:	4a1f      	ldr	r2, [pc, #124]	; (8042dc4 <xSecureContextConst>)
 8042d46:	6810      	ldr	r0, [r2, #0]
 8042d48:	b178      	cbz	r0, 8042d6a <save_ns_context>
 8042d4a:	b507      	push	{r0, r1, r2, lr}
 8042d4c:	f001 fea4 	bl	8044a98 <__SecureContext_SaveContext_veneer>
 8042d50:	bc0f      	pop	{r0, r1, r2, r3}
 8042d52:	469e      	mov	lr, r3
 8042d54:	065a      	lsls	r2, r3, #25
 8042d56:	d508      	bpl.n	8042d6a <save_ns_context>
 8042d58:	4b19      	ldr	r3, [pc, #100]	; (8042dc0 <pxCurrentTCBConst>)
 8042d5a:	681a      	ldr	r2, [r3, #0]
 8042d5c:	390c      	subs	r1, #12
 8042d5e:	6011      	str	r1, [r2, #0]
 8042d60:	f3ef 820b 	mrs	r2, PSPLIM
 8042d64:	4673      	mov	r3, lr
 8042d66:	c10d      	stmia	r1!, {r0, r2, r3}
 8042d68:	e00b      	b.n	8042d82 <select_next_task>

08042d6a <save_ns_context>:
 8042d6a:	4b15      	ldr	r3, [pc, #84]	; (8042dc0 <pxCurrentTCBConst>)
 8042d6c:	681a      	ldr	r2, [r3, #0]
 8042d6e:	392c      	subs	r1, #44	; 0x2c
 8042d70:	6011      	str	r1, [r2, #0]
 8042d72:	310c      	adds	r1, #12
 8042d74:	e881 0ff0 	stmia.w	r1, {r4, r5, r6, r7, r8, r9, sl, fp}
 8042d78:	f3ef 820b 	mrs	r2, PSPLIM
 8042d7c:	4673      	mov	r3, lr
 8042d7e:	390c      	subs	r1, #12
 8042d80:	c10d      	stmia	r1!, {r0, r2, r3}

08042d82 <select_next_task>:
 8042d82:	b672      	cpsid	i
 8042d84:	f000 ffdc 	bl	8043d40 <vTaskSwitchContext>
 8042d88:	b662      	cpsie	i
 8042d8a:	4a0d      	ldr	r2, [pc, #52]	; (8042dc0 <pxCurrentTCBConst>)
 8042d8c:	6813      	ldr	r3, [r2, #0]
 8042d8e:	6819      	ldr	r1, [r3, #0]
 8042d90:	c90d      	ldmia	r1!, {r0, r2, r3}
 8042d92:	f382 880b 	msr	PSPLIM, r2
 8042d96:	469e      	mov	lr, r3
 8042d98:	4a0a      	ldr	r2, [pc, #40]	; (8042dc4 <xSecureContextConst>)
 8042d9a:	6010      	str	r0, [r2, #0]
 8042d9c:	b148      	cbz	r0, 8042db2 <restore_ns_context>
 8042d9e:	b40a      	push	{r1, r3}
 8042da0:	f001 fe82 	bl	8044aa8 <__SecureContext_LoadContext_veneer>
 8042da4:	bc0a      	pop	{r1, r3}
 8042da6:	469e      	mov	lr, r3
 8042da8:	065a      	lsls	r2, r3, #25
 8042daa:	d502      	bpl.n	8042db2 <restore_ns_context>
 8042dac:	f381 8809 	msr	PSP, r1
 8042db0:	4770      	bx	lr

08042db2 <restore_ns_context>:
 8042db2:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8042db6:	f381 8809 	msr	PSP, r1
 8042dba:	4770      	bx	lr
 8042dbc:	f3af 8000 	nop.w

08042dc0 <pxCurrentTCBConst>:
 8042dc0:	2001b11c 	.word	0x2001b11c

08042dc4 <xSecureContextConst>:
 8042dc4:	2001b118 	.word	0x2001b118
	"xMAIR0Const: .word 0xe000edc0						\n"
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8042dc8:	bf00      	nop
 8042dca:	bf00      	nop
 8042dcc:	0000      	movs	r0, r0
	...

08042dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8042dd0:	f01e 0f04 	tst.w	lr, #4
 8042dd4:	bf0c      	ite	eq
 8042dd6:	f3ef 8008 	mrseq	r0, MSP
 8042dda:	f3ef 8009 	mrsne	r0, PSP
 8042dde:	4904      	ldr	r1, [pc, #16]	; (8042df0 <svchandler_address_const>)
 8042de0:	4708      	bx	r1
 8042de2:	bf00      	nop
 8042de4:	f3af 8000 	nop.w
 8042de8:	f3af 8000 	nop.w
 8042dec:	f3af 8000 	nop.w

08042df0 <svchandler_address_const>:
 8042df0:	08042ad9 	.word	0x08042ad9
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 8042df4:	bf00      	nop
 8042df6:	bf00      	nop

08042df8 <vPortAllocateSecureContext>:
/*-----------------------------------------------------------*/

void vPortAllocateSecureContext( uint32_t ulSecureStackSize ) /* __attribute__ (( naked )) */
{
	__asm volatile
 8042df8:	df00      	svc	0
 8042dfa:	4770      	bx	lr
	(
	"	svc %0											\n" /* Secure context is allocated in the supervisor call. */
	"	bx lr											\n" /* Return. */
	:: "i" ( portSVC_ALLOCATE_SECURE_CONTEXT ) : "memory"
	);
}
 8042dfc:	bf00      	nop

08042dfe <vPortFreeSecureContext>:
/*-----------------------------------------------------------*/

void vPortFreeSecureContext( uint32_t *pulTCB ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8042dfe:	6801      	ldr	r1, [r0, #0]
 8042e00:	6808      	ldr	r0, [r1, #0]
 8042e02:	2800      	cmp	r0, #0
 8042e04:	bf18      	it	ne
 8042e06:	df01      	svcne	1
 8042e08:	4770      	bx	lr
	"	it ne											\n"
	"	svcne %0										\n" /* Secure context is freed in the supervisor call. */
	"	bx lr											\n" /* Return. */
	:: "i" ( portSVC_FREE_SECURE_CONTEXT ) : "memory"
	);
}
 8042e0a:	bf00      	nop

08042e0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8042e0c:	b580      	push	{r7, lr}
 8042e0e:	b084      	sub	sp, #16
 8042e10:	af00      	add	r7, sp, #0
 8042e12:	6078      	str	r0, [r7, #4]
 8042e14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8042e16:	687b      	ldr	r3, [r7, #4]
 8042e18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8042e1a:	68fb      	ldr	r3, [r7, #12]
 8042e1c:	2b00      	cmp	r3, #0
 8042e1e:	d101      	bne.n	8042e24 <xQueueGenericReset+0x18>
 8042e20:	b672      	cpsid	i
 8042e22:	e7fe      	b.n	8042e22 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8042e24:	f7ff fe12 	bl	8042a4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8042e28:	68fb      	ldr	r3, [r7, #12]
 8042e2a:	681a      	ldr	r2, [r3, #0]
 8042e2c:	68fb      	ldr	r3, [r7, #12]
 8042e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042e30:	68f9      	ldr	r1, [r7, #12]
 8042e32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8042e34:	fb01 f303 	mul.w	r3, r1, r3
 8042e38:	441a      	add	r2, r3
 8042e3a:	68fb      	ldr	r3, [r7, #12]
 8042e3c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8042e3e:	68fb      	ldr	r3, [r7, #12]
 8042e40:	2200      	movs	r2, #0
 8042e42:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8042e44:	68fb      	ldr	r3, [r7, #12]
 8042e46:	681a      	ldr	r2, [r3, #0]
 8042e48:	68fb      	ldr	r3, [r7, #12]
 8042e4a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8042e4c:	68fb      	ldr	r3, [r7, #12]
 8042e4e:	681a      	ldr	r2, [r3, #0]
 8042e50:	68fb      	ldr	r3, [r7, #12]
 8042e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042e54:	3b01      	subs	r3, #1
 8042e56:	68f9      	ldr	r1, [r7, #12]
 8042e58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8042e5a:	fb01 f303 	mul.w	r3, r1, r3
 8042e5e:	441a      	add	r2, r3
 8042e60:	68fb      	ldr	r3, [r7, #12]
 8042e62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8042e64:	68fb      	ldr	r3, [r7, #12]
 8042e66:	22ff      	movs	r2, #255	; 0xff
 8042e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8042e6c:	68fb      	ldr	r3, [r7, #12]
 8042e6e:	22ff      	movs	r2, #255	; 0xff
 8042e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8042e74:	683b      	ldr	r3, [r7, #0]
 8042e76:	2b00      	cmp	r3, #0
 8042e78:	d10e      	bne.n	8042e98 <xQueueGenericReset+0x8c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8042e7a:	68fb      	ldr	r3, [r7, #12]
 8042e7c:	691b      	ldr	r3, [r3, #16]
 8042e7e:	2b00      	cmp	r3, #0
 8042e80:	d014      	beq.n	8042eac <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8042e82:	68fb      	ldr	r3, [r7, #12]
 8042e84:	3310      	adds	r3, #16
 8042e86:	4618      	mov	r0, r3
 8042e88:	f001 f812 	bl	8043eb0 <xTaskRemoveFromEventList>
 8042e8c:	4603      	mov	r3, r0
 8042e8e:	2b00      	cmp	r3, #0
 8042e90:	d00c      	beq.n	8042eac <xQueueGenericReset+0xa0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8042e92:	f7ff fdc9 	bl	8042a28 <vPortYield>
 8042e96:	e009      	b.n	8042eac <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8042e98:	68fb      	ldr	r3, [r7, #12]
 8042e9a:	3310      	adds	r3, #16
 8042e9c:	4618      	mov	r0, r3
 8042e9e:	f7ff fcd1 	bl	8042844 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8042ea2:	68fb      	ldr	r3, [r7, #12]
 8042ea4:	3324      	adds	r3, #36	; 0x24
 8042ea6:	4618      	mov	r0, r3
 8042ea8:	f7ff fccc 	bl	8042844 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8042eac:	f7ff fde2 	bl	8042a74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8042eb0:	2301      	movs	r3, #1
}
 8042eb2:	4618      	mov	r0, r3
 8042eb4:	3710      	adds	r7, #16
 8042eb6:	46bd      	mov	sp, r7
 8042eb8:	bd80      	pop	{r7, pc}

08042eba <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8042eba:	b580      	push	{r7, lr}
 8042ebc:	b088      	sub	sp, #32
 8042ebe:	af02      	add	r7, sp, #8
 8042ec0:	60f8      	str	r0, [r7, #12]
 8042ec2:	60b9      	str	r1, [r7, #8]
 8042ec4:	607a      	str	r2, [r7, #4]
 8042ec6:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8042ec8:	68fb      	ldr	r3, [r7, #12]
 8042eca:	2b00      	cmp	r3, #0
 8042ecc:	d101      	bne.n	8042ed2 <xQueueGenericCreateStatic+0x18>
 8042ece:	b672      	cpsid	i
 8042ed0:	e7fe      	b.n	8042ed0 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8042ed2:	683b      	ldr	r3, [r7, #0]
 8042ed4:	2b00      	cmp	r3, #0
 8042ed6:	d101      	bne.n	8042edc <xQueueGenericCreateStatic+0x22>
 8042ed8:	b672      	cpsid	i
 8042eda:	e7fe      	b.n	8042eda <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8042edc:	687b      	ldr	r3, [r7, #4]
 8042ede:	2b00      	cmp	r3, #0
 8042ee0:	d002      	beq.n	8042ee8 <xQueueGenericCreateStatic+0x2e>
 8042ee2:	68bb      	ldr	r3, [r7, #8]
 8042ee4:	2b00      	cmp	r3, #0
 8042ee6:	d001      	beq.n	8042eec <xQueueGenericCreateStatic+0x32>
 8042ee8:	2301      	movs	r3, #1
 8042eea:	e000      	b.n	8042eee <xQueueGenericCreateStatic+0x34>
 8042eec:	2300      	movs	r3, #0
 8042eee:	2b00      	cmp	r3, #0
 8042ef0:	d101      	bne.n	8042ef6 <xQueueGenericCreateStatic+0x3c>
 8042ef2:	b672      	cpsid	i
 8042ef4:	e7fe      	b.n	8042ef4 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8042ef6:	687b      	ldr	r3, [r7, #4]
 8042ef8:	2b00      	cmp	r3, #0
 8042efa:	d102      	bne.n	8042f02 <xQueueGenericCreateStatic+0x48>
 8042efc:	68bb      	ldr	r3, [r7, #8]
 8042efe:	2b00      	cmp	r3, #0
 8042f00:	d101      	bne.n	8042f06 <xQueueGenericCreateStatic+0x4c>
 8042f02:	2301      	movs	r3, #1
 8042f04:	e000      	b.n	8042f08 <xQueueGenericCreateStatic+0x4e>
 8042f06:	2300      	movs	r3, #0
 8042f08:	2b00      	cmp	r3, #0
 8042f0a:	d101      	bne.n	8042f10 <xQueueGenericCreateStatic+0x56>
 8042f0c:	b672      	cpsid	i
 8042f0e:	e7fe      	b.n	8042f0e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8042f10:	2350      	movs	r3, #80	; 0x50
 8042f12:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8042f14:	693b      	ldr	r3, [r7, #16]
 8042f16:	2b50      	cmp	r3, #80	; 0x50
 8042f18:	d001      	beq.n	8042f1e <xQueueGenericCreateStatic+0x64>
 8042f1a:	b672      	cpsid	i
 8042f1c:	e7fe      	b.n	8042f1c <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8042f1e:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8042f20:	683b      	ldr	r3, [r7, #0]
 8042f22:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8042f24:	697b      	ldr	r3, [r7, #20]
 8042f26:	2b00      	cmp	r3, #0
 8042f28:	d00d      	beq.n	8042f46 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8042f2a:	697b      	ldr	r3, [r7, #20]
 8042f2c:	2201      	movs	r2, #1
 8042f2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8042f32:	f897 2020 	ldrb.w	r2, [r7, #32]
 8042f36:	697b      	ldr	r3, [r7, #20]
 8042f38:	9300      	str	r3, [sp, #0]
 8042f3a:	4613      	mov	r3, r2
 8042f3c:	687a      	ldr	r2, [r7, #4]
 8042f3e:	68b9      	ldr	r1, [r7, #8]
 8042f40:	68f8      	ldr	r0, [r7, #12]
 8042f42:	f000 f805 	bl	8042f50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8042f46:	697b      	ldr	r3, [r7, #20]
	}
 8042f48:	4618      	mov	r0, r3
 8042f4a:	3718      	adds	r7, #24
 8042f4c:	46bd      	mov	sp, r7
 8042f4e:	bd80      	pop	{r7, pc}

08042f50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8042f50:	b580      	push	{r7, lr}
 8042f52:	b084      	sub	sp, #16
 8042f54:	af00      	add	r7, sp, #0
 8042f56:	60f8      	str	r0, [r7, #12]
 8042f58:	60b9      	str	r1, [r7, #8]
 8042f5a:	607a      	str	r2, [r7, #4]
 8042f5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8042f5e:	68bb      	ldr	r3, [r7, #8]
 8042f60:	2b00      	cmp	r3, #0
 8042f62:	d103      	bne.n	8042f6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8042f64:	69bb      	ldr	r3, [r7, #24]
 8042f66:	69ba      	ldr	r2, [r7, #24]
 8042f68:	601a      	str	r2, [r3, #0]
 8042f6a:	e002      	b.n	8042f72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8042f6c:	69bb      	ldr	r3, [r7, #24]
 8042f6e:	687a      	ldr	r2, [r7, #4]
 8042f70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8042f72:	69bb      	ldr	r3, [r7, #24]
 8042f74:	68fa      	ldr	r2, [r7, #12]
 8042f76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8042f78:	69bb      	ldr	r3, [r7, #24]
 8042f7a:	68ba      	ldr	r2, [r7, #8]
 8042f7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8042f7e:	2101      	movs	r1, #1
 8042f80:	69b8      	ldr	r0, [r7, #24]
 8042f82:	f7ff ff43 	bl	8042e0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8042f86:	69bb      	ldr	r3, [r7, #24]
 8042f88:	78fa      	ldrb	r2, [r7, #3]
 8042f8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8042f8e:	bf00      	nop
 8042f90:	3710      	adds	r7, #16
 8042f92:	46bd      	mov	sp, r7
 8042f94:	bd80      	pop	{r7, pc}

08042f96 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8042f96:	b580      	push	{r7, lr}
 8042f98:	b08a      	sub	sp, #40	; 0x28
 8042f9a:	af00      	add	r7, sp, #0
 8042f9c:	60f8      	str	r0, [r7, #12]
 8042f9e:	60b9      	str	r1, [r7, #8]
 8042fa0:	607a      	str	r2, [r7, #4]
 8042fa2:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8042fa4:	2300      	movs	r3, #0
 8042fa6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8042fa8:	68fb      	ldr	r3, [r7, #12]
 8042faa:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8042fac:	6a3b      	ldr	r3, [r7, #32]
 8042fae:	2b00      	cmp	r3, #0
 8042fb0:	d101      	bne.n	8042fb6 <xQueueGenericSend+0x20>
 8042fb2:	b672      	cpsid	i
 8042fb4:	e7fe      	b.n	8042fb4 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8042fb6:	68bb      	ldr	r3, [r7, #8]
 8042fb8:	2b00      	cmp	r3, #0
 8042fba:	d103      	bne.n	8042fc4 <xQueueGenericSend+0x2e>
 8042fbc:	6a3b      	ldr	r3, [r7, #32]
 8042fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042fc0:	2b00      	cmp	r3, #0
 8042fc2:	d101      	bne.n	8042fc8 <xQueueGenericSend+0x32>
 8042fc4:	2301      	movs	r3, #1
 8042fc6:	e000      	b.n	8042fca <xQueueGenericSend+0x34>
 8042fc8:	2300      	movs	r3, #0
 8042fca:	2b00      	cmp	r3, #0
 8042fcc:	d101      	bne.n	8042fd2 <xQueueGenericSend+0x3c>
 8042fce:	b672      	cpsid	i
 8042fd0:	e7fe      	b.n	8042fd0 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8042fd2:	683b      	ldr	r3, [r7, #0]
 8042fd4:	2b02      	cmp	r3, #2
 8042fd6:	d103      	bne.n	8042fe0 <xQueueGenericSend+0x4a>
 8042fd8:	6a3b      	ldr	r3, [r7, #32]
 8042fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042fdc:	2b01      	cmp	r3, #1
 8042fde:	d101      	bne.n	8042fe4 <xQueueGenericSend+0x4e>
 8042fe0:	2301      	movs	r3, #1
 8042fe2:	e000      	b.n	8042fe6 <xQueueGenericSend+0x50>
 8042fe4:	2300      	movs	r3, #0
 8042fe6:	2b00      	cmp	r3, #0
 8042fe8:	d101      	bne.n	8042fee <xQueueGenericSend+0x58>
 8042fea:	b672      	cpsid	i
 8042fec:	e7fe      	b.n	8042fec <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8042fee:	f001 f90f 	bl	8044210 <xTaskGetSchedulerState>
 8042ff2:	4603      	mov	r3, r0
 8042ff4:	2b00      	cmp	r3, #0
 8042ff6:	d102      	bne.n	8042ffe <xQueueGenericSend+0x68>
 8042ff8:	687b      	ldr	r3, [r7, #4]
 8042ffa:	2b00      	cmp	r3, #0
 8042ffc:	d101      	bne.n	8043002 <xQueueGenericSend+0x6c>
 8042ffe:	2301      	movs	r3, #1
 8043000:	e000      	b.n	8043004 <xQueueGenericSend+0x6e>
 8043002:	2300      	movs	r3, #0
 8043004:	2b00      	cmp	r3, #0
 8043006:	d101      	bne.n	804300c <xQueueGenericSend+0x76>
 8043008:	b672      	cpsid	i
 804300a:	e7fe      	b.n	804300a <xQueueGenericSend+0x74>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 804300c:	f7ff fd1e 	bl	8042a4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8043010:	6a3b      	ldr	r3, [r7, #32]
 8043012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8043014:	6a3b      	ldr	r3, [r7, #32]
 8043016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043018:	429a      	cmp	r2, r3
 804301a:	d302      	bcc.n	8043022 <xQueueGenericSend+0x8c>
 804301c:	683b      	ldr	r3, [r7, #0]
 804301e:	2b02      	cmp	r3, #2
 8043020:	d11d      	bne.n	804305e <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8043022:	683a      	ldr	r2, [r7, #0]
 8043024:	68b9      	ldr	r1, [r7, #8]
 8043026:	6a38      	ldr	r0, [r7, #32]
 8043028:	f000 f99b 	bl	8043362 <prvCopyDataToQueue>
 804302c:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 804302e:	6a3b      	ldr	r3, [r7, #32]
 8043030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043032:	2b00      	cmp	r3, #0
 8043034:	d00a      	beq.n	804304c <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8043036:	6a3b      	ldr	r3, [r7, #32]
 8043038:	3324      	adds	r3, #36	; 0x24
 804303a:	4618      	mov	r0, r3
 804303c:	f000 ff38 	bl	8043eb0 <xTaskRemoveFromEventList>
 8043040:	4603      	mov	r3, r0
 8043042:	2b00      	cmp	r3, #0
 8043044:	d007      	beq.n	8043056 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8043046:	f7ff fcef 	bl	8042a28 <vPortYield>
 804304a:	e004      	b.n	8043056 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 804304c:	69fb      	ldr	r3, [r7, #28]
 804304e:	2b00      	cmp	r3, #0
 8043050:	d001      	beq.n	8043056 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8043052:	f7ff fce9 	bl	8042a28 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8043056:	f7ff fd0d 	bl	8042a74 <vPortExitCritical>
				return pdPASS;
 804305a:	2301      	movs	r3, #1
 804305c:	e05c      	b.n	8043118 <xQueueGenericSend+0x182>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 804305e:	687b      	ldr	r3, [r7, #4]
 8043060:	2b00      	cmp	r3, #0
 8043062:	d103      	bne.n	804306c <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8043064:	f7ff fd06 	bl	8042a74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8043068:	2300      	movs	r3, #0
 804306a:	e055      	b.n	8043118 <xQueueGenericSend+0x182>
				}
				else if( xEntryTimeSet == pdFALSE )
 804306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804306e:	2b00      	cmp	r3, #0
 8043070:	d106      	bne.n	8043080 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8043072:	f107 0314 	add.w	r3, r7, #20
 8043076:	4618      	mov	r0, r3
 8043078:	f000 ff76 	bl	8043f68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 804307c:	2301      	movs	r3, #1
 804307e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8043080:	f7ff fcf8 	bl	8042a74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8043084:	f000 fcca 	bl	8043a1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8043088:	f7ff fce0 	bl	8042a4c <vPortEnterCritical>
 804308c:	6a3b      	ldr	r3, [r7, #32]
 804308e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8043092:	b25b      	sxtb	r3, r3
 8043094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043098:	d103      	bne.n	80430a2 <xQueueGenericSend+0x10c>
 804309a:	6a3b      	ldr	r3, [r7, #32]
 804309c:	2200      	movs	r2, #0
 804309e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80430a2:	6a3b      	ldr	r3, [r7, #32]
 80430a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80430a8:	b25b      	sxtb	r3, r3
 80430aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80430ae:	d103      	bne.n	80430b8 <xQueueGenericSend+0x122>
 80430b0:	6a3b      	ldr	r3, [r7, #32]
 80430b2:	2200      	movs	r2, #0
 80430b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80430b8:	f7ff fcdc 	bl	8042a74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80430bc:	1d3a      	adds	r2, r7, #4
 80430be:	f107 0314 	add.w	r3, r7, #20
 80430c2:	4611      	mov	r1, r2
 80430c4:	4618      	mov	r0, r3
 80430c6:	f000 ff65 	bl	8043f94 <xTaskCheckForTimeOut>
 80430ca:	4603      	mov	r3, r0
 80430cc:	2b00      	cmp	r3, #0
 80430ce:	d11d      	bne.n	804310c <xQueueGenericSend+0x176>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80430d0:	6a38      	ldr	r0, [r7, #32]
 80430d2:	f000 fa3e 	bl	8043552 <prvIsQueueFull>
 80430d6:	4603      	mov	r3, r0
 80430d8:	2b00      	cmp	r3, #0
 80430da:	d011      	beq.n	8043100 <xQueueGenericSend+0x16a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80430dc:	6a3b      	ldr	r3, [r7, #32]
 80430de:	3310      	adds	r3, #16
 80430e0:	687a      	ldr	r2, [r7, #4]
 80430e2:	4611      	mov	r1, r2
 80430e4:	4618      	mov	r0, r3
 80430e6:	f000 fea5 	bl	8043e34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80430ea:	6a38      	ldr	r0, [r7, #32]
 80430ec:	f000 f9c9 	bl	8043482 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80430f0:	f000 fcda 	bl	8043aa8 <xTaskResumeAll>
 80430f4:	4603      	mov	r3, r0
 80430f6:	2b00      	cmp	r3, #0
 80430f8:	d188      	bne.n	804300c <xQueueGenericSend+0x76>
				{
					portYIELD_WITHIN_API();
 80430fa:	f7ff fc95 	bl	8042a28 <vPortYield>
 80430fe:	e785      	b.n	804300c <xQueueGenericSend+0x76>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8043100:	6a38      	ldr	r0, [r7, #32]
 8043102:	f000 f9be 	bl	8043482 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8043106:	f000 fccf 	bl	8043aa8 <xTaskResumeAll>
 804310a:	e77f      	b.n	804300c <xQueueGenericSend+0x76>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 804310c:	6a38      	ldr	r0, [r7, #32]
 804310e:	f000 f9b8 	bl	8043482 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8043112:	f000 fcc9 	bl	8043aa8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8043116:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8043118:	4618      	mov	r0, r3
 804311a:	3728      	adds	r7, #40	; 0x28
 804311c:	46bd      	mov	sp, r7
 804311e:	bd80      	pop	{r7, pc}

08043120 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8043120:	b580      	push	{r7, lr}
 8043122:	b088      	sub	sp, #32
 8043124:	af00      	add	r7, sp, #0
 8043126:	60f8      	str	r0, [r7, #12]
 8043128:	60b9      	str	r1, [r7, #8]
 804312a:	607a      	str	r2, [r7, #4]
 804312c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 804312e:	68fb      	ldr	r3, [r7, #12]
 8043130:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8043132:	69bb      	ldr	r3, [r7, #24]
 8043134:	2b00      	cmp	r3, #0
 8043136:	d101      	bne.n	804313c <xQueueGenericSendFromISR+0x1c>
 8043138:	b672      	cpsid	i
 804313a:	e7fe      	b.n	804313a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 804313c:	68bb      	ldr	r3, [r7, #8]
 804313e:	2b00      	cmp	r3, #0
 8043140:	d103      	bne.n	804314a <xQueueGenericSendFromISR+0x2a>
 8043142:	69bb      	ldr	r3, [r7, #24]
 8043144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043146:	2b00      	cmp	r3, #0
 8043148:	d101      	bne.n	804314e <xQueueGenericSendFromISR+0x2e>
 804314a:	2301      	movs	r3, #1
 804314c:	e000      	b.n	8043150 <xQueueGenericSendFromISR+0x30>
 804314e:	2300      	movs	r3, #0
 8043150:	2b00      	cmp	r3, #0
 8043152:	d101      	bne.n	8043158 <xQueueGenericSendFromISR+0x38>
 8043154:	b672      	cpsid	i
 8043156:	e7fe      	b.n	8043156 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8043158:	683b      	ldr	r3, [r7, #0]
 804315a:	2b02      	cmp	r3, #2
 804315c:	d103      	bne.n	8043166 <xQueueGenericSendFromISR+0x46>
 804315e:	69bb      	ldr	r3, [r7, #24]
 8043160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043162:	2b01      	cmp	r3, #1
 8043164:	d101      	bne.n	804316a <xQueueGenericSendFromISR+0x4a>
 8043166:	2301      	movs	r3, #1
 8043168:	e000      	b.n	804316c <xQueueGenericSendFromISR+0x4c>
 804316a:	2300      	movs	r3, #0
 804316c:	2b00      	cmp	r3, #0
 804316e:	d101      	bne.n	8043174 <xQueueGenericSendFromISR+0x54>
 8043170:	b672      	cpsid	i
 8043172:	e7fe      	b.n	8043172 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8043174:	f7ff fdd8 	bl	8042d28 <ulSetInterruptMaskFromISR>
 8043178:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 804317a:	69bb      	ldr	r3, [r7, #24]
 804317c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 804317e:	69bb      	ldr	r3, [r7, #24]
 8043180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043182:	429a      	cmp	r2, r3
 8043184:	d302      	bcc.n	804318c <xQueueGenericSendFromISR+0x6c>
 8043186:	683b      	ldr	r3, [r7, #0]
 8043188:	2b02      	cmp	r3, #2
 804318a:	d12a      	bne.n	80431e2 <xQueueGenericSendFromISR+0xc2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 804318c:	69bb      	ldr	r3, [r7, #24]
 804318e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8043192:	74fb      	strb	r3, [r7, #19]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8043194:	683a      	ldr	r2, [r7, #0]
 8043196:	68b9      	ldr	r1, [r7, #8]
 8043198:	69b8      	ldr	r0, [r7, #24]
 804319a:	f000 f8e2 	bl	8043362 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 804319e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80431a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80431a6:	d112      	bne.n	80431ce <xQueueGenericSendFromISR+0xae>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80431a8:	69bb      	ldr	r3, [r7, #24]
 80431aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80431ac:	2b00      	cmp	r3, #0
 80431ae:	d015      	beq.n	80431dc <xQueueGenericSendFromISR+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80431b0:	69bb      	ldr	r3, [r7, #24]
 80431b2:	3324      	adds	r3, #36	; 0x24
 80431b4:	4618      	mov	r0, r3
 80431b6:	f000 fe7b 	bl	8043eb0 <xTaskRemoveFromEventList>
 80431ba:	4603      	mov	r3, r0
 80431bc:	2b00      	cmp	r3, #0
 80431be:	d00d      	beq.n	80431dc <xQueueGenericSendFromISR+0xbc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80431c0:	687b      	ldr	r3, [r7, #4]
 80431c2:	2b00      	cmp	r3, #0
 80431c4:	d00a      	beq.n	80431dc <xQueueGenericSendFromISR+0xbc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80431c6:	687b      	ldr	r3, [r7, #4]
 80431c8:	2201      	movs	r2, #1
 80431ca:	601a      	str	r2, [r3, #0]
 80431cc:	e006      	b.n	80431dc <xQueueGenericSendFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80431ce:	7cfb      	ldrb	r3, [r7, #19]
 80431d0:	3301      	adds	r3, #1
 80431d2:	b2db      	uxtb	r3, r3
 80431d4:	b25a      	sxtb	r2, r3
 80431d6:	69bb      	ldr	r3, [r7, #24]
 80431d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80431dc:	2301      	movs	r3, #1
 80431de:	61fb      	str	r3, [r7, #28]
		{
 80431e0:	e001      	b.n	80431e6 <xQueueGenericSendFromISR+0xc6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80431e2:	2300      	movs	r3, #0
 80431e4:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80431e6:	6978      	ldr	r0, [r7, #20]
 80431e8:	f7ff fda4 	bl	8042d34 <vClearInterruptMaskFromISR>

	return xReturn;
 80431ec:	69fb      	ldr	r3, [r7, #28]
}
 80431ee:	4618      	mov	r0, r3
 80431f0:	3720      	adds	r7, #32
 80431f2:	46bd      	mov	sp, r7
 80431f4:	bd80      	pop	{r7, pc}

080431f6 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80431f6:	b580      	push	{r7, lr}
 80431f8:	b08a      	sub	sp, #40	; 0x28
 80431fa:	af00      	add	r7, sp, #0
 80431fc:	60f8      	str	r0, [r7, #12]
 80431fe:	60b9      	str	r1, [r7, #8]
 8043200:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8043202:	2300      	movs	r3, #0
 8043204:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8043206:	68fb      	ldr	r3, [r7, #12]
 8043208:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 804320a:	6a3b      	ldr	r3, [r7, #32]
 804320c:	2b00      	cmp	r3, #0
 804320e:	d101      	bne.n	8043214 <xQueueReceive+0x1e>
 8043210:	b672      	cpsid	i
 8043212:	e7fe      	b.n	8043212 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8043214:	68bb      	ldr	r3, [r7, #8]
 8043216:	2b00      	cmp	r3, #0
 8043218:	d103      	bne.n	8043222 <xQueueReceive+0x2c>
 804321a:	6a3b      	ldr	r3, [r7, #32]
 804321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804321e:	2b00      	cmp	r3, #0
 8043220:	d101      	bne.n	8043226 <xQueueReceive+0x30>
 8043222:	2301      	movs	r3, #1
 8043224:	e000      	b.n	8043228 <xQueueReceive+0x32>
 8043226:	2300      	movs	r3, #0
 8043228:	2b00      	cmp	r3, #0
 804322a:	d101      	bne.n	8043230 <xQueueReceive+0x3a>
 804322c:	b672      	cpsid	i
 804322e:	e7fe      	b.n	804322e <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8043230:	f000 ffee 	bl	8044210 <xTaskGetSchedulerState>
 8043234:	4603      	mov	r3, r0
 8043236:	2b00      	cmp	r3, #0
 8043238:	d102      	bne.n	8043240 <xQueueReceive+0x4a>
 804323a:	687b      	ldr	r3, [r7, #4]
 804323c:	2b00      	cmp	r3, #0
 804323e:	d101      	bne.n	8043244 <xQueueReceive+0x4e>
 8043240:	2301      	movs	r3, #1
 8043242:	e000      	b.n	8043246 <xQueueReceive+0x50>
 8043244:	2300      	movs	r3, #0
 8043246:	2b00      	cmp	r3, #0
 8043248:	d101      	bne.n	804324e <xQueueReceive+0x58>
 804324a:	b672      	cpsid	i
 804324c:	e7fe      	b.n	804324c <xQueueReceive+0x56>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 804324e:	f7ff fbfd 	bl	8042a4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8043252:	6a3b      	ldr	r3, [r7, #32]
 8043254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043256:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8043258:	69fb      	ldr	r3, [r7, #28]
 804325a:	2b00      	cmp	r3, #0
 804325c:	d019      	beq.n	8043292 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 804325e:	68b9      	ldr	r1, [r7, #8]
 8043260:	6a38      	ldr	r0, [r7, #32]
 8043262:	f000 f8e8 	bl	8043436 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8043266:	69fb      	ldr	r3, [r7, #28]
 8043268:	1e5a      	subs	r2, r3, #1
 804326a:	6a3b      	ldr	r3, [r7, #32]
 804326c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 804326e:	6a3b      	ldr	r3, [r7, #32]
 8043270:	691b      	ldr	r3, [r3, #16]
 8043272:	2b00      	cmp	r3, #0
 8043274:	d009      	beq.n	804328a <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8043276:	6a3b      	ldr	r3, [r7, #32]
 8043278:	3310      	adds	r3, #16
 804327a:	4618      	mov	r0, r3
 804327c:	f000 fe18 	bl	8043eb0 <xTaskRemoveFromEventList>
 8043280:	4603      	mov	r3, r0
 8043282:	2b00      	cmp	r3, #0
 8043284:	d001      	beq.n	804328a <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8043286:	f7ff fbcf 	bl	8042a28 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 804328a:	f7ff fbf3 	bl	8042a74 <vPortExitCritical>
				return pdPASS;
 804328e:	2301      	movs	r3, #1
 8043290:	e063      	b.n	804335a <xQueueReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8043292:	687b      	ldr	r3, [r7, #4]
 8043294:	2b00      	cmp	r3, #0
 8043296:	d103      	bne.n	80432a0 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8043298:	f7ff fbec 	bl	8042a74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 804329c:	2300      	movs	r3, #0
 804329e:	e05c      	b.n	804335a <xQueueReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
 80432a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80432a2:	2b00      	cmp	r3, #0
 80432a4:	d106      	bne.n	80432b4 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80432a6:	f107 0314 	add.w	r3, r7, #20
 80432aa:	4618      	mov	r0, r3
 80432ac:	f000 fe5c 	bl	8043f68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80432b0:	2301      	movs	r3, #1
 80432b2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80432b4:	f7ff fbde 	bl	8042a74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80432b8:	f000 fbb0 	bl	8043a1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80432bc:	f7ff fbc6 	bl	8042a4c <vPortEnterCritical>
 80432c0:	6a3b      	ldr	r3, [r7, #32]
 80432c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80432c6:	b25b      	sxtb	r3, r3
 80432c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80432cc:	d103      	bne.n	80432d6 <xQueueReceive+0xe0>
 80432ce:	6a3b      	ldr	r3, [r7, #32]
 80432d0:	2200      	movs	r2, #0
 80432d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80432d6:	6a3b      	ldr	r3, [r7, #32]
 80432d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80432dc:	b25b      	sxtb	r3, r3
 80432de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80432e2:	d103      	bne.n	80432ec <xQueueReceive+0xf6>
 80432e4:	6a3b      	ldr	r3, [r7, #32]
 80432e6:	2200      	movs	r2, #0
 80432e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80432ec:	f7ff fbc2 	bl	8042a74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80432f0:	1d3a      	adds	r2, r7, #4
 80432f2:	f107 0314 	add.w	r3, r7, #20
 80432f6:	4611      	mov	r1, r2
 80432f8:	4618      	mov	r0, r3
 80432fa:	f000 fe4b 	bl	8043f94 <xTaskCheckForTimeOut>
 80432fe:	4603      	mov	r3, r0
 8043300:	2b00      	cmp	r3, #0
 8043302:	d11d      	bne.n	8043340 <xQueueReceive+0x14a>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8043304:	6a38      	ldr	r0, [r7, #32]
 8043306:	f000 f90e 	bl	8043526 <prvIsQueueEmpty>
 804330a:	4603      	mov	r3, r0
 804330c:	2b00      	cmp	r3, #0
 804330e:	d011      	beq.n	8043334 <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8043310:	6a3b      	ldr	r3, [r7, #32]
 8043312:	3324      	adds	r3, #36	; 0x24
 8043314:	687a      	ldr	r2, [r7, #4]
 8043316:	4611      	mov	r1, r2
 8043318:	4618      	mov	r0, r3
 804331a:	f000 fd8b 	bl	8043e34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 804331e:	6a38      	ldr	r0, [r7, #32]
 8043320:	f000 f8af 	bl	8043482 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8043324:	f000 fbc0 	bl	8043aa8 <xTaskResumeAll>
 8043328:	4603      	mov	r3, r0
 804332a:	2b00      	cmp	r3, #0
 804332c:	d18f      	bne.n	804324e <xQueueReceive+0x58>
				{
					portYIELD_WITHIN_API();
 804332e:	f7ff fb7b 	bl	8042a28 <vPortYield>
 8043332:	e78c      	b.n	804324e <xQueueReceive+0x58>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8043334:	6a38      	ldr	r0, [r7, #32]
 8043336:	f000 f8a4 	bl	8043482 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 804333a:	f000 fbb5 	bl	8043aa8 <xTaskResumeAll>
 804333e:	e786      	b.n	804324e <xQueueReceive+0x58>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8043340:	6a38      	ldr	r0, [r7, #32]
 8043342:	f000 f89e 	bl	8043482 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8043346:	f000 fbaf 	bl	8043aa8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 804334a:	6a38      	ldr	r0, [r7, #32]
 804334c:	f000 f8eb 	bl	8043526 <prvIsQueueEmpty>
 8043350:	4603      	mov	r3, r0
 8043352:	2b00      	cmp	r3, #0
 8043354:	f43f af7b 	beq.w	804324e <xQueueReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8043358:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 804335a:	4618      	mov	r0, r3
 804335c:	3728      	adds	r7, #40	; 0x28
 804335e:	46bd      	mov	sp, r7
 8043360:	bd80      	pop	{r7, pc}

08043362 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8043362:	b580      	push	{r7, lr}
 8043364:	b086      	sub	sp, #24
 8043366:	af00      	add	r7, sp, #0
 8043368:	60f8      	str	r0, [r7, #12]
 804336a:	60b9      	str	r1, [r7, #8]
 804336c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 804336e:	2300      	movs	r3, #0
 8043370:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8043372:	68fb      	ldr	r3, [r7, #12]
 8043374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043376:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8043378:	68fb      	ldr	r3, [r7, #12]
 804337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804337c:	2b00      	cmp	r3, #0
 804337e:	d10d      	bne.n	804339c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8043380:	68fb      	ldr	r3, [r7, #12]
 8043382:	681b      	ldr	r3, [r3, #0]
 8043384:	2b00      	cmp	r3, #0
 8043386:	d14d      	bne.n	8043424 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8043388:	68fb      	ldr	r3, [r7, #12]
 804338a:	689b      	ldr	r3, [r3, #8]
 804338c:	4618      	mov	r0, r3
 804338e:	f000 ff5d 	bl	804424c <xTaskPriorityDisinherit>
 8043392:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8043394:	68fb      	ldr	r3, [r7, #12]
 8043396:	2200      	movs	r2, #0
 8043398:	609a      	str	r2, [r3, #8]
 804339a:	e043      	b.n	8043424 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 804339c:	687b      	ldr	r3, [r7, #4]
 804339e:	2b00      	cmp	r3, #0
 80433a0:	d119      	bne.n	80433d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80433a2:	68fb      	ldr	r3, [r7, #12]
 80433a4:	6858      	ldr	r0, [r3, #4]
 80433a6:	68fb      	ldr	r3, [r7, #12]
 80433a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80433aa:	461a      	mov	r2, r3
 80433ac:	68b9      	ldr	r1, [r7, #8]
 80433ae:	f001 fb29 	bl	8044a04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80433b2:	68fb      	ldr	r3, [r7, #12]
 80433b4:	685a      	ldr	r2, [r3, #4]
 80433b6:	68fb      	ldr	r3, [r7, #12]
 80433b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80433ba:	441a      	add	r2, r3
 80433bc:	68fb      	ldr	r3, [r7, #12]
 80433be:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80433c0:	68fb      	ldr	r3, [r7, #12]
 80433c2:	685a      	ldr	r2, [r3, #4]
 80433c4:	68fb      	ldr	r3, [r7, #12]
 80433c6:	689b      	ldr	r3, [r3, #8]
 80433c8:	429a      	cmp	r2, r3
 80433ca:	d32b      	bcc.n	8043424 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80433cc:	68fb      	ldr	r3, [r7, #12]
 80433ce:	681a      	ldr	r2, [r3, #0]
 80433d0:	68fb      	ldr	r3, [r7, #12]
 80433d2:	605a      	str	r2, [r3, #4]
 80433d4:	e026      	b.n	8043424 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80433d6:	68fb      	ldr	r3, [r7, #12]
 80433d8:	68d8      	ldr	r0, [r3, #12]
 80433da:	68fb      	ldr	r3, [r7, #12]
 80433dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80433de:	461a      	mov	r2, r3
 80433e0:	68b9      	ldr	r1, [r7, #8]
 80433e2:	f001 fb0f 	bl	8044a04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80433e6:	68fb      	ldr	r3, [r7, #12]
 80433e8:	68da      	ldr	r2, [r3, #12]
 80433ea:	68fb      	ldr	r3, [r7, #12]
 80433ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80433ee:	425b      	negs	r3, r3
 80433f0:	441a      	add	r2, r3
 80433f2:	68fb      	ldr	r3, [r7, #12]
 80433f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80433f6:	68fb      	ldr	r3, [r7, #12]
 80433f8:	68da      	ldr	r2, [r3, #12]
 80433fa:	68fb      	ldr	r3, [r7, #12]
 80433fc:	681b      	ldr	r3, [r3, #0]
 80433fe:	429a      	cmp	r2, r3
 8043400:	d207      	bcs.n	8043412 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8043402:	68fb      	ldr	r3, [r7, #12]
 8043404:	689a      	ldr	r2, [r3, #8]
 8043406:	68fb      	ldr	r3, [r7, #12]
 8043408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804340a:	425b      	negs	r3, r3
 804340c:	441a      	add	r2, r3
 804340e:	68fb      	ldr	r3, [r7, #12]
 8043410:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8043412:	687b      	ldr	r3, [r7, #4]
 8043414:	2b02      	cmp	r3, #2
 8043416:	d105      	bne.n	8043424 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8043418:	693b      	ldr	r3, [r7, #16]
 804341a:	2b00      	cmp	r3, #0
 804341c:	d002      	beq.n	8043424 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 804341e:	693b      	ldr	r3, [r7, #16]
 8043420:	3b01      	subs	r3, #1
 8043422:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8043424:	693b      	ldr	r3, [r7, #16]
 8043426:	1c5a      	adds	r2, r3, #1
 8043428:	68fb      	ldr	r3, [r7, #12]
 804342a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 804342c:	697b      	ldr	r3, [r7, #20]
}
 804342e:	4618      	mov	r0, r3
 8043430:	3718      	adds	r7, #24
 8043432:	46bd      	mov	sp, r7
 8043434:	bd80      	pop	{r7, pc}

08043436 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8043436:	b580      	push	{r7, lr}
 8043438:	b082      	sub	sp, #8
 804343a:	af00      	add	r7, sp, #0
 804343c:	6078      	str	r0, [r7, #4]
 804343e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8043440:	687b      	ldr	r3, [r7, #4]
 8043442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043444:	2b00      	cmp	r3, #0
 8043446:	d018      	beq.n	804347a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8043448:	687b      	ldr	r3, [r7, #4]
 804344a:	68da      	ldr	r2, [r3, #12]
 804344c:	687b      	ldr	r3, [r7, #4]
 804344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043450:	441a      	add	r2, r3
 8043452:	687b      	ldr	r3, [r7, #4]
 8043454:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8043456:	687b      	ldr	r3, [r7, #4]
 8043458:	68da      	ldr	r2, [r3, #12]
 804345a:	687b      	ldr	r3, [r7, #4]
 804345c:	689b      	ldr	r3, [r3, #8]
 804345e:	429a      	cmp	r2, r3
 8043460:	d303      	bcc.n	804346a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8043462:	687b      	ldr	r3, [r7, #4]
 8043464:	681a      	ldr	r2, [r3, #0]
 8043466:	687b      	ldr	r3, [r7, #4]
 8043468:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 804346a:	687b      	ldr	r3, [r7, #4]
 804346c:	68d9      	ldr	r1, [r3, #12]
 804346e:	687b      	ldr	r3, [r7, #4]
 8043470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043472:	461a      	mov	r2, r3
 8043474:	6838      	ldr	r0, [r7, #0]
 8043476:	f001 fac5 	bl	8044a04 <memcpy>
	}
}
 804347a:	bf00      	nop
 804347c:	3708      	adds	r7, #8
 804347e:	46bd      	mov	sp, r7
 8043480:	bd80      	pop	{r7, pc}

08043482 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8043482:	b580      	push	{r7, lr}
 8043484:	b084      	sub	sp, #16
 8043486:	af00      	add	r7, sp, #0
 8043488:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 804348a:	f7ff fadf 	bl	8042a4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 804348e:	687b      	ldr	r3, [r7, #4]
 8043490:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8043494:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8043496:	e011      	b.n	80434bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8043498:	687b      	ldr	r3, [r7, #4]
 804349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804349c:	2b00      	cmp	r3, #0
 804349e:	d012      	beq.n	80434c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80434a0:	687b      	ldr	r3, [r7, #4]
 80434a2:	3324      	adds	r3, #36	; 0x24
 80434a4:	4618      	mov	r0, r3
 80434a6:	f000 fd03 	bl	8043eb0 <xTaskRemoveFromEventList>
 80434aa:	4603      	mov	r3, r0
 80434ac:	2b00      	cmp	r3, #0
 80434ae:	d001      	beq.n	80434b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80434b0:	f000 fdc0 	bl	8044034 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80434b4:	7bfb      	ldrb	r3, [r7, #15]
 80434b6:	3b01      	subs	r3, #1
 80434b8:	b2db      	uxtb	r3, r3
 80434ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80434bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80434c0:	2b00      	cmp	r3, #0
 80434c2:	dce9      	bgt.n	8043498 <prvUnlockQueue+0x16>
 80434c4:	e000      	b.n	80434c8 <prvUnlockQueue+0x46>
					break;
 80434c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80434c8:	687b      	ldr	r3, [r7, #4]
 80434ca:	22ff      	movs	r2, #255	; 0xff
 80434cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80434d0:	f7ff fad0 	bl	8042a74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80434d4:	f7ff faba 	bl	8042a4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80434d8:	687b      	ldr	r3, [r7, #4]
 80434da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80434de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80434e0:	e011      	b.n	8043506 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80434e2:	687b      	ldr	r3, [r7, #4]
 80434e4:	691b      	ldr	r3, [r3, #16]
 80434e6:	2b00      	cmp	r3, #0
 80434e8:	d012      	beq.n	8043510 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80434ea:	687b      	ldr	r3, [r7, #4]
 80434ec:	3310      	adds	r3, #16
 80434ee:	4618      	mov	r0, r3
 80434f0:	f000 fcde 	bl	8043eb0 <xTaskRemoveFromEventList>
 80434f4:	4603      	mov	r3, r0
 80434f6:	2b00      	cmp	r3, #0
 80434f8:	d001      	beq.n	80434fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80434fa:	f000 fd9b 	bl	8044034 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80434fe:	7bbb      	ldrb	r3, [r7, #14]
 8043500:	3b01      	subs	r3, #1
 8043502:	b2db      	uxtb	r3, r3
 8043504:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8043506:	f997 300e 	ldrsb.w	r3, [r7, #14]
 804350a:	2b00      	cmp	r3, #0
 804350c:	dce9      	bgt.n	80434e2 <prvUnlockQueue+0x60>
 804350e:	e000      	b.n	8043512 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8043510:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8043512:	687b      	ldr	r3, [r7, #4]
 8043514:	22ff      	movs	r2, #255	; 0xff
 8043516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 804351a:	f7ff faab 	bl	8042a74 <vPortExitCritical>
}
 804351e:	bf00      	nop
 8043520:	3710      	adds	r7, #16
 8043522:	46bd      	mov	sp, r7
 8043524:	bd80      	pop	{r7, pc}

08043526 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8043526:	b580      	push	{r7, lr}
 8043528:	b084      	sub	sp, #16
 804352a:	af00      	add	r7, sp, #0
 804352c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 804352e:	f7ff fa8d 	bl	8042a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8043532:	687b      	ldr	r3, [r7, #4]
 8043534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043536:	2b00      	cmp	r3, #0
 8043538:	d102      	bne.n	8043540 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 804353a:	2301      	movs	r3, #1
 804353c:	60fb      	str	r3, [r7, #12]
 804353e:	e001      	b.n	8043544 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8043540:	2300      	movs	r3, #0
 8043542:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8043544:	f7ff fa96 	bl	8042a74 <vPortExitCritical>

	return xReturn;
 8043548:	68fb      	ldr	r3, [r7, #12]
}
 804354a:	4618      	mov	r0, r3
 804354c:	3710      	adds	r7, #16
 804354e:	46bd      	mov	sp, r7
 8043550:	bd80      	pop	{r7, pc}

08043552 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8043552:	b580      	push	{r7, lr}
 8043554:	b084      	sub	sp, #16
 8043556:	af00      	add	r7, sp, #0
 8043558:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 804355a:	f7ff fa77 	bl	8042a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 804355e:	687b      	ldr	r3, [r7, #4]
 8043560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8043562:	687b      	ldr	r3, [r7, #4]
 8043564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043566:	429a      	cmp	r2, r3
 8043568:	d102      	bne.n	8043570 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 804356a:	2301      	movs	r3, #1
 804356c:	60fb      	str	r3, [r7, #12]
 804356e:	e001      	b.n	8043574 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8043570:	2300      	movs	r3, #0
 8043572:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8043574:	f7ff fa7e 	bl	8042a74 <vPortExitCritical>

	return xReturn;
 8043578:	68fb      	ldr	r3, [r7, #12]
}
 804357a:	4618      	mov	r0, r3
 804357c:	3710      	adds	r7, #16
 804357e:	46bd      	mov	sp, r7
 8043580:	bd80      	pop	{r7, pc}
	...

08043584 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8043584:	b480      	push	{r7}
 8043586:	b085      	sub	sp, #20
 8043588:	af00      	add	r7, sp, #0
 804358a:	6078      	str	r0, [r7, #4]
 804358c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 804358e:	2300      	movs	r3, #0
 8043590:	60fb      	str	r3, [r7, #12]
 8043592:	e014      	b.n	80435be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8043594:	4a0e      	ldr	r2, [pc, #56]	; (80435d0 <vQueueAddToRegistry+0x4c>)
 8043596:	68fb      	ldr	r3, [r7, #12]
 8043598:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 804359c:	2b00      	cmp	r3, #0
 804359e:	d10b      	bne.n	80435b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80435a0:	490b      	ldr	r1, [pc, #44]	; (80435d0 <vQueueAddToRegistry+0x4c>)
 80435a2:	68fb      	ldr	r3, [r7, #12]
 80435a4:	683a      	ldr	r2, [r7, #0]
 80435a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80435aa:	4a09      	ldr	r2, [pc, #36]	; (80435d0 <vQueueAddToRegistry+0x4c>)
 80435ac:	68fb      	ldr	r3, [r7, #12]
 80435ae:	00db      	lsls	r3, r3, #3
 80435b0:	4413      	add	r3, r2
 80435b2:	687a      	ldr	r2, [r7, #4]
 80435b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80435b6:	e005      	b.n	80435c4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80435b8:	68fb      	ldr	r3, [r7, #12]
 80435ba:	3301      	adds	r3, #1
 80435bc:	60fb      	str	r3, [r7, #12]
 80435be:	68fb      	ldr	r3, [r7, #12]
 80435c0:	2b07      	cmp	r3, #7
 80435c2:	d9e7      	bls.n	8043594 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80435c4:	bf00      	nop
 80435c6:	3714      	adds	r7, #20
 80435c8:	46bd      	mov	sp, r7
 80435ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80435ce:	4770      	bx	lr
 80435d0:	2001b750 	.word	0x2001b750

080435d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80435d4:	b580      	push	{r7, lr}
 80435d6:	b086      	sub	sp, #24
 80435d8:	af00      	add	r7, sp, #0
 80435da:	60f8      	str	r0, [r7, #12]
 80435dc:	60b9      	str	r1, [r7, #8]
 80435de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80435e0:	68fb      	ldr	r3, [r7, #12]
 80435e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80435e4:	f7ff fa32 	bl	8042a4c <vPortEnterCritical>
 80435e8:	697b      	ldr	r3, [r7, #20]
 80435ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80435ee:	b25b      	sxtb	r3, r3
 80435f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80435f4:	d103      	bne.n	80435fe <vQueueWaitForMessageRestricted+0x2a>
 80435f6:	697b      	ldr	r3, [r7, #20]
 80435f8:	2200      	movs	r2, #0
 80435fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80435fe:	697b      	ldr	r3, [r7, #20]
 8043600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8043604:	b25b      	sxtb	r3, r3
 8043606:	f1b3 3fff 	cmp.w	r3, #4294967295
 804360a:	d103      	bne.n	8043614 <vQueueWaitForMessageRestricted+0x40>
 804360c:	697b      	ldr	r3, [r7, #20]
 804360e:	2200      	movs	r2, #0
 8043610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8043614:	f7ff fa2e 	bl	8042a74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8043618:	697b      	ldr	r3, [r7, #20]
 804361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804361c:	2b00      	cmp	r3, #0
 804361e:	d106      	bne.n	804362e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8043620:	697b      	ldr	r3, [r7, #20]
 8043622:	3324      	adds	r3, #36	; 0x24
 8043624:	687a      	ldr	r2, [r7, #4]
 8043626:	68b9      	ldr	r1, [r7, #8]
 8043628:	4618      	mov	r0, r3
 804362a:	f000 fc1f 	bl	8043e6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 804362e:	6978      	ldr	r0, [r7, #20]
 8043630:	f7ff ff27 	bl	8043482 <prvUnlockQueue>
	}
 8043634:	bf00      	nop
 8043636:	3718      	adds	r7, #24
 8043638:	46bd      	mov	sp, r7
 804363a:	bd80      	pop	{r7, pc}

0804363c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 804363c:	b580      	push	{r7, lr}
 804363e:	b08c      	sub	sp, #48	; 0x30
 8043640:	af04      	add	r7, sp, #16
 8043642:	60f8      	str	r0, [r7, #12]
 8043644:	60b9      	str	r1, [r7, #8]
 8043646:	607a      	str	r2, [r7, #4]
 8043648:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 804364a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804364c:	2b00      	cmp	r3, #0
 804364e:	d101      	bne.n	8043654 <xTaskCreateStatic+0x18>
 8043650:	b672      	cpsid	i
 8043652:	e7fe      	b.n	8043652 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8043654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8043656:	2b00      	cmp	r3, #0
 8043658:	d101      	bne.n	804365e <xTaskCreateStatic+0x22>
 804365a:	b672      	cpsid	i
 804365c:	e7fe      	b.n	804365c <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 804365e:	235c      	movs	r3, #92	; 0x5c
 8043660:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8043662:	697b      	ldr	r3, [r7, #20]
 8043664:	2b5c      	cmp	r3, #92	; 0x5c
 8043666:	d001      	beq.n	804366c <xTaskCreateStatic+0x30>
 8043668:	b672      	cpsid	i
 804366a:	e7fe      	b.n	804366a <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 804366c:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 804366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8043670:	2b00      	cmp	r3, #0
 8043672:	d01e      	beq.n	80436b2 <xTaskCreateStatic+0x76>
 8043674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8043676:	2b00      	cmp	r3, #0
 8043678:	d01b      	beq.n	80436b2 <xTaskCreateStatic+0x76>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 804367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804367c:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 804367e:	69fb      	ldr	r3, [r7, #28]
 8043680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8043682:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8043684:	69fb      	ldr	r3, [r7, #28]
 8043686:	2202      	movs	r2, #2
 8043688:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 804368c:	2300      	movs	r3, #0
 804368e:	9303      	str	r3, [sp, #12]
 8043690:	69fb      	ldr	r3, [r7, #28]
 8043692:	9302      	str	r3, [sp, #8]
 8043694:	f107 0318 	add.w	r3, r7, #24
 8043698:	9301      	str	r3, [sp, #4]
 804369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804369c:	9300      	str	r3, [sp, #0]
 804369e:	683b      	ldr	r3, [r7, #0]
 80436a0:	687a      	ldr	r2, [r7, #4]
 80436a2:	68b9      	ldr	r1, [r7, #8]
 80436a4:	68f8      	ldr	r0, [r7, #12]
 80436a6:	f000 f850 	bl	804374a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80436aa:	69f8      	ldr	r0, [r7, #28]
 80436ac:	f000 f8d6 	bl	804385c <prvAddNewTaskToReadyList>
 80436b0:	e001      	b.n	80436b6 <xTaskCreateStatic+0x7a>
		}
		else
		{
			xReturn = NULL;
 80436b2:	2300      	movs	r3, #0
 80436b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80436b6:	69bb      	ldr	r3, [r7, #24]
	}
 80436b8:	4618      	mov	r0, r3
 80436ba:	3720      	adds	r7, #32
 80436bc:	46bd      	mov	sp, r7
 80436be:	bd80      	pop	{r7, pc}

080436c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80436c0:	b580      	push	{r7, lr}
 80436c2:	b08c      	sub	sp, #48	; 0x30
 80436c4:	af04      	add	r7, sp, #16
 80436c6:	60f8      	str	r0, [r7, #12]
 80436c8:	60b9      	str	r1, [r7, #8]
 80436ca:	603b      	str	r3, [r7, #0]
 80436cc:	4613      	mov	r3, r2
 80436ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80436d0:	88fb      	ldrh	r3, [r7, #6]
 80436d2:	009b      	lsls	r3, r3, #2
 80436d4:	4618      	mov	r0, r3
 80436d6:	f7fe ff09 	bl	80424ec <pvPortMalloc>
 80436da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80436dc:	697b      	ldr	r3, [r7, #20]
 80436de:	2b00      	cmp	r3, #0
 80436e0:	d00e      	beq.n	8043700 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80436e2:	205c      	movs	r0, #92	; 0x5c
 80436e4:	f7fe ff02 	bl	80424ec <pvPortMalloc>
 80436e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80436ea:	69fb      	ldr	r3, [r7, #28]
 80436ec:	2b00      	cmp	r3, #0
 80436ee:	d003      	beq.n	80436f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80436f0:	69fb      	ldr	r3, [r7, #28]
 80436f2:	697a      	ldr	r2, [r7, #20]
 80436f4:	631a      	str	r2, [r3, #48]	; 0x30
 80436f6:	e005      	b.n	8043704 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80436f8:	6978      	ldr	r0, [r7, #20]
 80436fa:	f7fe ff9f 	bl	804263c <vPortFree>
 80436fe:	e001      	b.n	8043704 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8043700:	2300      	movs	r3, #0
 8043702:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8043704:	69fb      	ldr	r3, [r7, #28]
 8043706:	2b00      	cmp	r3, #0
 8043708:	d017      	beq.n	804373a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 804370a:	69fb      	ldr	r3, [r7, #28]
 804370c:	2200      	movs	r2, #0
 804370e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8043712:	88fa      	ldrh	r2, [r7, #6]
 8043714:	2300      	movs	r3, #0
 8043716:	9303      	str	r3, [sp, #12]
 8043718:	69fb      	ldr	r3, [r7, #28]
 804371a:	9302      	str	r3, [sp, #8]
 804371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804371e:	9301      	str	r3, [sp, #4]
 8043720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043722:	9300      	str	r3, [sp, #0]
 8043724:	683b      	ldr	r3, [r7, #0]
 8043726:	68b9      	ldr	r1, [r7, #8]
 8043728:	68f8      	ldr	r0, [r7, #12]
 804372a:	f000 f80e 	bl	804374a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 804372e:	69f8      	ldr	r0, [r7, #28]
 8043730:	f000 f894 	bl	804385c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8043734:	2301      	movs	r3, #1
 8043736:	61bb      	str	r3, [r7, #24]
 8043738:	e002      	b.n	8043740 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 804373a:	f04f 33ff 	mov.w	r3, #4294967295
 804373e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8043740:	69bb      	ldr	r3, [r7, #24]
	}
 8043742:	4618      	mov	r0, r3
 8043744:	3720      	adds	r7, #32
 8043746:	46bd      	mov	sp, r7
 8043748:	bd80      	pop	{r7, pc}

0804374a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 804374a:	b580      	push	{r7, lr}
 804374c:	b086      	sub	sp, #24
 804374e:	af00      	add	r7, sp, #0
 8043750:	60f8      	str	r0, [r7, #12]
 8043752:	60b9      	str	r1, [r7, #8]
 8043754:	607a      	str	r2, [r7, #4]
 8043756:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8043758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804375a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 804375c:	687b      	ldr	r3, [r7, #4]
 804375e:	009b      	lsls	r3, r3, #2
 8043760:	461a      	mov	r2, r3
 8043762:	21a5      	movs	r1, #165	; 0xa5
 8043764:	f001 f959 	bl	8044a1a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8043768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804376a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804376c:	687b      	ldr	r3, [r7, #4]
 804376e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8043772:	3b01      	subs	r3, #1
 8043774:	009b      	lsls	r3, r3, #2
 8043776:	4413      	add	r3, r2
 8043778:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 804377a:	693b      	ldr	r3, [r7, #16]
 804377c:	f023 0307 	bic.w	r3, r3, #7
 8043780:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8043782:	693b      	ldr	r3, [r7, #16]
 8043784:	f003 0307 	and.w	r3, r3, #7
 8043788:	2b00      	cmp	r3, #0
 804378a:	d001      	beq.n	8043790 <prvInitialiseNewTask+0x46>
 804378c:	b672      	cpsid	i
 804378e:	e7fe      	b.n	804378e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8043790:	68bb      	ldr	r3, [r7, #8]
 8043792:	2b00      	cmp	r3, #0
 8043794:	d01f      	beq.n	80437d6 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8043796:	2300      	movs	r3, #0
 8043798:	617b      	str	r3, [r7, #20]
 804379a:	e012      	b.n	80437c2 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 804379c:	68ba      	ldr	r2, [r7, #8]
 804379e:	697b      	ldr	r3, [r7, #20]
 80437a0:	4413      	add	r3, r2
 80437a2:	7819      	ldrb	r1, [r3, #0]
 80437a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80437a6:	697b      	ldr	r3, [r7, #20]
 80437a8:	4413      	add	r3, r2
 80437aa:	3334      	adds	r3, #52	; 0x34
 80437ac:	460a      	mov	r2, r1
 80437ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80437b0:	68ba      	ldr	r2, [r7, #8]
 80437b2:	697b      	ldr	r3, [r7, #20]
 80437b4:	4413      	add	r3, r2
 80437b6:	781b      	ldrb	r3, [r3, #0]
 80437b8:	2b00      	cmp	r3, #0
 80437ba:	d006      	beq.n	80437ca <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80437bc:	697b      	ldr	r3, [r7, #20]
 80437be:	3301      	adds	r3, #1
 80437c0:	617b      	str	r3, [r7, #20]
 80437c2:	697b      	ldr	r3, [r7, #20]
 80437c4:	2b0f      	cmp	r3, #15
 80437c6:	d9e9      	bls.n	804379c <prvInitialiseNewTask+0x52>
 80437c8:	e000      	b.n	80437cc <prvInitialiseNewTask+0x82>
			{
				break;
 80437ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80437cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80437ce:	2200      	movs	r2, #0
 80437d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80437d4:	e003      	b.n	80437de <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80437d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80437d8:	2200      	movs	r2, #0
 80437da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80437de:	6a3b      	ldr	r3, [r7, #32]
 80437e0:	2b37      	cmp	r3, #55	; 0x37
 80437e2:	d901      	bls.n	80437e8 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80437e4:	2337      	movs	r3, #55	; 0x37
 80437e6:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80437e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80437ea:	6a3a      	ldr	r2, [r7, #32]
 80437ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80437ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80437f0:	6a3a      	ldr	r2, [r7, #32]
 80437f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80437f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80437f6:	2200      	movs	r2, #0
 80437f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80437fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80437fc:	3304      	adds	r3, #4
 80437fe:	4618      	mov	r0, r3
 8043800:	f7ff f840 	bl	8042884 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8043804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043806:	3318      	adds	r3, #24
 8043808:	4618      	mov	r0, r3
 804380a:	f7ff f83b 	bl	8042884 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 804380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8043812:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8043814:	6a3b      	ldr	r3, [r7, #32]
 8043816:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 804381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804381c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 804381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8043822:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8043824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043826:	2200      	movs	r2, #0
 8043828:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 804382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804382c:	2200      	movs	r2, #0
 804382e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8043832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043834:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8043836:	683b      	ldr	r3, [r7, #0]
 8043838:	68fa      	ldr	r2, [r7, #12]
 804383a:	6938      	ldr	r0, [r7, #16]
 804383c:	f7ff f98a 	bl	8042b54 <pxPortInitialiseStack>
 8043840:	4602      	mov	r2, r0
 8043842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043844:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8043846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043848:	2b00      	cmp	r3, #0
 804384a:	d002      	beq.n	8043852 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 804384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804384e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8043850:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8043852:	bf00      	nop
 8043854:	3718      	adds	r7, #24
 8043856:	46bd      	mov	sp, r7
 8043858:	bd80      	pop	{r7, pc}
	...

0804385c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 804385c:	b580      	push	{r7, lr}
 804385e:	b082      	sub	sp, #8
 8043860:	af00      	add	r7, sp, #0
 8043862:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8043864:	f7ff f8f2 	bl	8042a4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8043868:	4b2a      	ldr	r3, [pc, #168]	; (8043914 <prvAddNewTaskToReadyList+0xb8>)
 804386a:	681b      	ldr	r3, [r3, #0]
 804386c:	3301      	adds	r3, #1
 804386e:	4a29      	ldr	r2, [pc, #164]	; (8043914 <prvAddNewTaskToReadyList+0xb8>)
 8043870:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8043872:	4b29      	ldr	r3, [pc, #164]	; (8043918 <prvAddNewTaskToReadyList+0xbc>)
 8043874:	681b      	ldr	r3, [r3, #0]
 8043876:	2b00      	cmp	r3, #0
 8043878:	d109      	bne.n	804388e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 804387a:	4a27      	ldr	r2, [pc, #156]	; (8043918 <prvAddNewTaskToReadyList+0xbc>)
 804387c:	687b      	ldr	r3, [r7, #4]
 804387e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8043880:	4b24      	ldr	r3, [pc, #144]	; (8043914 <prvAddNewTaskToReadyList+0xb8>)
 8043882:	681b      	ldr	r3, [r3, #0]
 8043884:	2b01      	cmp	r3, #1
 8043886:	d110      	bne.n	80438aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8043888:	f000 fc0c 	bl	80440a4 <prvInitialiseTaskLists>
 804388c:	e00d      	b.n	80438aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 804388e:	4b23      	ldr	r3, [pc, #140]	; (804391c <prvAddNewTaskToReadyList+0xc0>)
 8043890:	681b      	ldr	r3, [r3, #0]
 8043892:	2b00      	cmp	r3, #0
 8043894:	d109      	bne.n	80438aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8043896:	4b20      	ldr	r3, [pc, #128]	; (8043918 <prvAddNewTaskToReadyList+0xbc>)
 8043898:	681b      	ldr	r3, [r3, #0]
 804389a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804389c:	687b      	ldr	r3, [r7, #4]
 804389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80438a0:	429a      	cmp	r2, r3
 80438a2:	d802      	bhi.n	80438aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80438a4:	4a1c      	ldr	r2, [pc, #112]	; (8043918 <prvAddNewTaskToReadyList+0xbc>)
 80438a6:	687b      	ldr	r3, [r7, #4]
 80438a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80438aa:	4b1d      	ldr	r3, [pc, #116]	; (8043920 <prvAddNewTaskToReadyList+0xc4>)
 80438ac:	681b      	ldr	r3, [r3, #0]
 80438ae:	3301      	adds	r3, #1
 80438b0:	4a1b      	ldr	r2, [pc, #108]	; (8043920 <prvAddNewTaskToReadyList+0xc4>)
 80438b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80438b4:	4b1a      	ldr	r3, [pc, #104]	; (8043920 <prvAddNewTaskToReadyList+0xc4>)
 80438b6:	681a      	ldr	r2, [r3, #0]
 80438b8:	687b      	ldr	r3, [r7, #4]
 80438ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80438bc:	687b      	ldr	r3, [r7, #4]
 80438be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80438c0:	4b18      	ldr	r3, [pc, #96]	; (8043924 <prvAddNewTaskToReadyList+0xc8>)
 80438c2:	681b      	ldr	r3, [r3, #0]
 80438c4:	429a      	cmp	r2, r3
 80438c6:	d903      	bls.n	80438d0 <prvAddNewTaskToReadyList+0x74>
 80438c8:	687b      	ldr	r3, [r7, #4]
 80438ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80438cc:	4a15      	ldr	r2, [pc, #84]	; (8043924 <prvAddNewTaskToReadyList+0xc8>)
 80438ce:	6013      	str	r3, [r2, #0]
 80438d0:	687b      	ldr	r3, [r7, #4]
 80438d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80438d4:	4613      	mov	r3, r2
 80438d6:	009b      	lsls	r3, r3, #2
 80438d8:	4413      	add	r3, r2
 80438da:	009b      	lsls	r3, r3, #2
 80438dc:	4a12      	ldr	r2, [pc, #72]	; (8043928 <prvAddNewTaskToReadyList+0xcc>)
 80438de:	441a      	add	r2, r3
 80438e0:	687b      	ldr	r3, [r7, #4]
 80438e2:	3304      	adds	r3, #4
 80438e4:	4619      	mov	r1, r3
 80438e6:	4610      	mov	r0, r2
 80438e8:	f7fe ffd9 	bl	804289e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80438ec:	f7ff f8c2 	bl	8042a74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80438f0:	4b0a      	ldr	r3, [pc, #40]	; (804391c <prvAddNewTaskToReadyList+0xc0>)
 80438f2:	681b      	ldr	r3, [r3, #0]
 80438f4:	2b00      	cmp	r3, #0
 80438f6:	d008      	beq.n	804390a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80438f8:	4b07      	ldr	r3, [pc, #28]	; (8043918 <prvAddNewTaskToReadyList+0xbc>)
 80438fa:	681b      	ldr	r3, [r3, #0]
 80438fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80438fe:	687b      	ldr	r3, [r7, #4]
 8043900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043902:	429a      	cmp	r2, r3
 8043904:	d201      	bcs.n	804390a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8043906:	f7ff f88f 	bl	8042a28 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 804390a:	bf00      	nop
 804390c:	3708      	adds	r7, #8
 804390e:	46bd      	mov	sp, r7
 8043910:	bd80      	pop	{r7, pc}
 8043912:	bf00      	nop
 8043914:	2001b5f0 	.word	0x2001b5f0
 8043918:	2001b11c 	.word	0x2001b11c
 804391c:	2001b5fc 	.word	0x2001b5fc
 8043920:	2001b60c 	.word	0x2001b60c
 8043924:	2001b5f8 	.word	0x2001b5f8
 8043928:	2001b120 	.word	0x2001b120

0804392c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 804392c:	b580      	push	{r7, lr}
 804392e:	b084      	sub	sp, #16
 8043930:	af00      	add	r7, sp, #0
 8043932:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8043934:	2300      	movs	r3, #0
 8043936:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8043938:	687b      	ldr	r3, [r7, #4]
 804393a:	2b00      	cmp	r3, #0
 804393c:	d00e      	beq.n	804395c <vTaskDelay+0x30>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 804393e:	4b0c      	ldr	r3, [pc, #48]	; (8043970 <vTaskDelay+0x44>)
 8043940:	681b      	ldr	r3, [r3, #0]
 8043942:	2b00      	cmp	r3, #0
 8043944:	d001      	beq.n	804394a <vTaskDelay+0x1e>
 8043946:	b672      	cpsid	i
 8043948:	e7fe      	b.n	8043948 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 804394a:	f000 f867 	bl	8043a1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 804394e:	2100      	movs	r1, #0
 8043950:	6878      	ldr	r0, [r7, #4]
 8043952:	f000 fcd7 	bl	8044304 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8043956:	f000 f8a7 	bl	8043aa8 <xTaskResumeAll>
 804395a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 804395c:	68fb      	ldr	r3, [r7, #12]
 804395e:	2b00      	cmp	r3, #0
 8043960:	d101      	bne.n	8043966 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8043962:	f7ff f861 	bl	8042a28 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8043966:	bf00      	nop
 8043968:	3710      	adds	r7, #16
 804396a:	46bd      	mov	sp, r7
 804396c:	bd80      	pop	{r7, pc}
 804396e:	bf00      	nop
 8043970:	2001b618 	.word	0x2001b618

08043974 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8043974:	b580      	push	{r7, lr}
 8043976:	b088      	sub	sp, #32
 8043978:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 804397a:	2300      	movs	r3, #0
 804397c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 804397e:	2300      	movs	r3, #0
 8043980:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8043982:	463a      	mov	r2, r7
 8043984:	1d39      	adds	r1, r7, #4
 8043986:	f107 0308 	add.w	r3, r7, #8
 804398a:	4618      	mov	r0, r3
 804398c:	f7fe fd7a 	bl	8042484 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8043990:	6839      	ldr	r1, [r7, #0]
 8043992:	687b      	ldr	r3, [r7, #4]
 8043994:	68ba      	ldr	r2, [r7, #8]
 8043996:	9202      	str	r2, [sp, #8]
 8043998:	9301      	str	r3, [sp, #4]
 804399a:	2300      	movs	r3, #0
 804399c:	9300      	str	r3, [sp, #0]
 804399e:	2300      	movs	r3, #0
 80439a0:	460a      	mov	r2, r1
 80439a2:	4918      	ldr	r1, [pc, #96]	; (8043a04 <vTaskStartScheduler+0x90>)
 80439a4:	4818      	ldr	r0, [pc, #96]	; (8043a08 <vTaskStartScheduler+0x94>)
 80439a6:	f7ff fe49 	bl	804363c <xTaskCreateStatic>
 80439aa:	4602      	mov	r2, r0
 80439ac:	4b17      	ldr	r3, [pc, #92]	; (8043a0c <vTaskStartScheduler+0x98>)
 80439ae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80439b0:	4b16      	ldr	r3, [pc, #88]	; (8043a0c <vTaskStartScheduler+0x98>)
 80439b2:	681b      	ldr	r3, [r3, #0]
 80439b4:	2b00      	cmp	r3, #0
 80439b6:	d002      	beq.n	80439be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80439b8:	2301      	movs	r3, #1
 80439ba:	60fb      	str	r3, [r7, #12]
 80439bc:	e001      	b.n	80439c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80439be:	2300      	movs	r3, #0
 80439c0:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80439c2:	68fb      	ldr	r3, [r7, #12]
 80439c4:	2b01      	cmp	r3, #1
 80439c6:	d102      	bne.n	80439ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80439c8:	f000 fcf0 	bl	80443ac <xTimerCreateTimerTask>
 80439cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80439ce:	68fb      	ldr	r3, [r7, #12]
 80439d0:	2b01      	cmp	r3, #1
 80439d2:	d10d      	bne.n	80439f0 <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80439d4:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80439d6:	4b0e      	ldr	r3, [pc, #56]	; (8043a10 <vTaskStartScheduler+0x9c>)
 80439d8:	f04f 32ff 	mov.w	r2, #4294967295
 80439dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80439de:	4b0d      	ldr	r3, [pc, #52]	; (8043a14 <vTaskStartScheduler+0xa0>)
 80439e0:	2201      	movs	r2, #1
 80439e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80439e4:	4b0c      	ldr	r3, [pc, #48]	; (8043a18 <vTaskStartScheduler+0xa4>)
 80439e6:	2200      	movs	r2, #0
 80439e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80439ea:	f7ff f943 	bl	8042c74 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80439ee:	e005      	b.n	80439fc <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80439f0:	68fb      	ldr	r3, [r7, #12]
 80439f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80439f6:	d101      	bne.n	80439fc <vTaskStartScheduler+0x88>
 80439f8:	b672      	cpsid	i
 80439fa:	e7fe      	b.n	80439fa <vTaskStartScheduler+0x86>
}
 80439fc:	bf00      	nop
 80439fe:	3710      	adds	r7, #16
 8043a00:	46bd      	mov	sp, r7
 8043a02:	bd80      	pop	{r7, pc}
 8043a04:	08044af4 	.word	0x08044af4
 8043a08:	0804404d 	.word	0x0804404d
 8043a0c:	2001b614 	.word	0x2001b614
 8043a10:	2001b610 	.word	0x2001b610
 8043a14:	2001b5fc 	.word	0x2001b5fc
 8043a18:	2001b5f4 	.word	0x2001b5f4

08043a1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8043a1c:	b480      	push	{r7}
 8043a1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8043a20:	4b04      	ldr	r3, [pc, #16]	; (8043a34 <vTaskSuspendAll+0x18>)
 8043a22:	681b      	ldr	r3, [r3, #0]
 8043a24:	3301      	adds	r3, #1
 8043a26:	4a03      	ldr	r2, [pc, #12]	; (8043a34 <vTaskSuspendAll+0x18>)
 8043a28:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8043a2a:	bf00      	nop
 8043a2c:	46bd      	mov	sp, r7
 8043a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043a32:	4770      	bx	lr
 8043a34:	2001b618 	.word	0x2001b618

08043a38 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8043a38:	b480      	push	{r7}
 8043a3a:	b083      	sub	sp, #12
 8043a3c:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8043a3e:	2300      	movs	r3, #0
 8043a40:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8043a42:	4b14      	ldr	r3, [pc, #80]	; (8043a94 <prvGetExpectedIdleTime+0x5c>)
 8043a44:	681b      	ldr	r3, [r3, #0]
 8043a46:	2b00      	cmp	r3, #0
 8043a48:	d001      	beq.n	8043a4e <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8043a4a:	2301      	movs	r3, #1
 8043a4c:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8043a4e:	4b12      	ldr	r3, [pc, #72]	; (8043a98 <prvGetExpectedIdleTime+0x60>)
 8043a50:	681b      	ldr	r3, [r3, #0]
 8043a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043a54:	2b00      	cmp	r3, #0
 8043a56:	d002      	beq.n	8043a5e <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8043a58:	2300      	movs	r3, #0
 8043a5a:	607b      	str	r3, [r7, #4]
 8043a5c:	e012      	b.n	8043a84 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8043a5e:	4b0f      	ldr	r3, [pc, #60]	; (8043a9c <prvGetExpectedIdleTime+0x64>)
 8043a60:	681b      	ldr	r3, [r3, #0]
 8043a62:	2b01      	cmp	r3, #1
 8043a64:	d902      	bls.n	8043a6c <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8043a66:	2300      	movs	r3, #0
 8043a68:	607b      	str	r3, [r7, #4]
 8043a6a:	e00b      	b.n	8043a84 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8043a6c:	683b      	ldr	r3, [r7, #0]
 8043a6e:	2b00      	cmp	r3, #0
 8043a70:	d002      	beq.n	8043a78 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8043a72:	2300      	movs	r3, #0
 8043a74:	607b      	str	r3, [r7, #4]
 8043a76:	e005      	b.n	8043a84 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8043a78:	4b09      	ldr	r3, [pc, #36]	; (8043aa0 <prvGetExpectedIdleTime+0x68>)
 8043a7a:	681a      	ldr	r2, [r3, #0]
 8043a7c:	4b09      	ldr	r3, [pc, #36]	; (8043aa4 <prvGetExpectedIdleTime+0x6c>)
 8043a7e:	681b      	ldr	r3, [r3, #0]
 8043a80:	1ad3      	subs	r3, r2, r3
 8043a82:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8043a84:	687b      	ldr	r3, [r7, #4]
	}
 8043a86:	4618      	mov	r0, r3
 8043a88:	370c      	adds	r7, #12
 8043a8a:	46bd      	mov	sp, r7
 8043a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043a90:	4770      	bx	lr
 8043a92:	bf00      	nop
 8043a94:	2001b5f8 	.word	0x2001b5f8
 8043a98:	2001b11c 	.word	0x2001b11c
 8043a9c:	2001b120 	.word	0x2001b120
 8043aa0:	2001b610 	.word	0x2001b610
 8043aa4:	2001b5f4 	.word	0x2001b5f4

08043aa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8043aa8:	b580      	push	{r7, lr}
 8043aaa:	b084      	sub	sp, #16
 8043aac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8043aae:	2300      	movs	r3, #0
 8043ab0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8043ab2:	2300      	movs	r3, #0
 8043ab4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8043ab6:	4b3a      	ldr	r3, [pc, #232]	; (8043ba0 <xTaskResumeAll+0xf8>)
 8043ab8:	681b      	ldr	r3, [r3, #0]
 8043aba:	2b00      	cmp	r3, #0
 8043abc:	d101      	bne.n	8043ac2 <xTaskResumeAll+0x1a>
 8043abe:	b672      	cpsid	i
 8043ac0:	e7fe      	b.n	8043ac0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8043ac2:	f7fe ffc3 	bl	8042a4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8043ac6:	4b36      	ldr	r3, [pc, #216]	; (8043ba0 <xTaskResumeAll+0xf8>)
 8043ac8:	681b      	ldr	r3, [r3, #0]
 8043aca:	3b01      	subs	r3, #1
 8043acc:	4a34      	ldr	r2, [pc, #208]	; (8043ba0 <xTaskResumeAll+0xf8>)
 8043ace:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8043ad0:	4b33      	ldr	r3, [pc, #204]	; (8043ba0 <xTaskResumeAll+0xf8>)
 8043ad2:	681b      	ldr	r3, [r3, #0]
 8043ad4:	2b00      	cmp	r3, #0
 8043ad6:	d15c      	bne.n	8043b92 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8043ad8:	4b32      	ldr	r3, [pc, #200]	; (8043ba4 <xTaskResumeAll+0xfc>)
 8043ada:	681b      	ldr	r3, [r3, #0]
 8043adc:	2b00      	cmp	r3, #0
 8043ade:	d058      	beq.n	8043b92 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8043ae0:	e02f      	b.n	8043b42 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8043ae2:	4b31      	ldr	r3, [pc, #196]	; (8043ba8 <xTaskResumeAll+0x100>)
 8043ae4:	68db      	ldr	r3, [r3, #12]
 8043ae6:	68db      	ldr	r3, [r3, #12]
 8043ae8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8043aea:	68fb      	ldr	r3, [r7, #12]
 8043aec:	3318      	adds	r3, #24
 8043aee:	4618      	mov	r0, r3
 8043af0:	f7fe ff32 	bl	8042958 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8043af4:	68fb      	ldr	r3, [r7, #12]
 8043af6:	3304      	adds	r3, #4
 8043af8:	4618      	mov	r0, r3
 8043afa:	f7fe ff2d 	bl	8042958 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8043afe:	68fb      	ldr	r3, [r7, #12]
 8043b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043b02:	4b2a      	ldr	r3, [pc, #168]	; (8043bac <xTaskResumeAll+0x104>)
 8043b04:	681b      	ldr	r3, [r3, #0]
 8043b06:	429a      	cmp	r2, r3
 8043b08:	d903      	bls.n	8043b12 <xTaskResumeAll+0x6a>
 8043b0a:	68fb      	ldr	r3, [r7, #12]
 8043b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043b0e:	4a27      	ldr	r2, [pc, #156]	; (8043bac <xTaskResumeAll+0x104>)
 8043b10:	6013      	str	r3, [r2, #0]
 8043b12:	68fb      	ldr	r3, [r7, #12]
 8043b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043b16:	4613      	mov	r3, r2
 8043b18:	009b      	lsls	r3, r3, #2
 8043b1a:	4413      	add	r3, r2
 8043b1c:	009b      	lsls	r3, r3, #2
 8043b1e:	4a24      	ldr	r2, [pc, #144]	; (8043bb0 <xTaskResumeAll+0x108>)
 8043b20:	441a      	add	r2, r3
 8043b22:	68fb      	ldr	r3, [r7, #12]
 8043b24:	3304      	adds	r3, #4
 8043b26:	4619      	mov	r1, r3
 8043b28:	4610      	mov	r0, r2
 8043b2a:	f7fe feb8 	bl	804289e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8043b2e:	68fb      	ldr	r3, [r7, #12]
 8043b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043b32:	4b20      	ldr	r3, [pc, #128]	; (8043bb4 <xTaskResumeAll+0x10c>)
 8043b34:	681b      	ldr	r3, [r3, #0]
 8043b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043b38:	429a      	cmp	r2, r3
 8043b3a:	d302      	bcc.n	8043b42 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8043b3c:	4b1e      	ldr	r3, [pc, #120]	; (8043bb8 <xTaskResumeAll+0x110>)
 8043b3e:	2201      	movs	r2, #1
 8043b40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8043b42:	4b19      	ldr	r3, [pc, #100]	; (8043ba8 <xTaskResumeAll+0x100>)
 8043b44:	681b      	ldr	r3, [r3, #0]
 8043b46:	2b00      	cmp	r3, #0
 8043b48:	d1cb      	bne.n	8043ae2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8043b4a:	68fb      	ldr	r3, [r7, #12]
 8043b4c:	2b00      	cmp	r3, #0
 8043b4e:	d001      	beq.n	8043b54 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8043b50:	f000 fb3e 	bl	80441d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8043b54:	4b19      	ldr	r3, [pc, #100]	; (8043bbc <xTaskResumeAll+0x114>)
 8043b56:	681b      	ldr	r3, [r3, #0]
 8043b58:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8043b5a:	687b      	ldr	r3, [r7, #4]
 8043b5c:	2b00      	cmp	r3, #0
 8043b5e:	d010      	beq.n	8043b82 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8043b60:	f000 f83e 	bl	8043be0 <xTaskIncrementTick>
 8043b64:	4603      	mov	r3, r0
 8043b66:	2b00      	cmp	r3, #0
 8043b68:	d002      	beq.n	8043b70 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8043b6a:	4b13      	ldr	r3, [pc, #76]	; (8043bb8 <xTaskResumeAll+0x110>)
 8043b6c:	2201      	movs	r2, #1
 8043b6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8043b70:	687b      	ldr	r3, [r7, #4]
 8043b72:	3b01      	subs	r3, #1
 8043b74:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8043b76:	687b      	ldr	r3, [r7, #4]
 8043b78:	2b00      	cmp	r3, #0
 8043b7a:	d1f1      	bne.n	8043b60 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8043b7c:	4b0f      	ldr	r3, [pc, #60]	; (8043bbc <xTaskResumeAll+0x114>)
 8043b7e:	2200      	movs	r2, #0
 8043b80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8043b82:	4b0d      	ldr	r3, [pc, #52]	; (8043bb8 <xTaskResumeAll+0x110>)
 8043b84:	681b      	ldr	r3, [r3, #0]
 8043b86:	2b00      	cmp	r3, #0
 8043b88:	d003      	beq.n	8043b92 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8043b8a:	2301      	movs	r3, #1
 8043b8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8043b8e:	f7fe ff4b 	bl	8042a28 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8043b92:	f7fe ff6f 	bl	8042a74 <vPortExitCritical>

	return xAlreadyYielded;
 8043b96:	68bb      	ldr	r3, [r7, #8]
}
 8043b98:	4618      	mov	r0, r3
 8043b9a:	3710      	adds	r7, #16
 8043b9c:	46bd      	mov	sp, r7
 8043b9e:	bd80      	pop	{r7, pc}
 8043ba0:	2001b618 	.word	0x2001b618
 8043ba4:	2001b5f0 	.word	0x2001b5f0
 8043ba8:	2001b5b0 	.word	0x2001b5b0
 8043bac:	2001b5f8 	.word	0x2001b5f8
 8043bb0:	2001b120 	.word	0x2001b120
 8043bb4:	2001b11c 	.word	0x2001b11c
 8043bb8:	2001b604 	.word	0x2001b604
 8043bbc:	2001b600 	.word	0x2001b600

08043bc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8043bc0:	b480      	push	{r7}
 8043bc2:	b083      	sub	sp, #12
 8043bc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8043bc6:	4b05      	ldr	r3, [pc, #20]	; (8043bdc <xTaskGetTickCount+0x1c>)
 8043bc8:	681b      	ldr	r3, [r3, #0]
 8043bca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8043bcc:	687b      	ldr	r3, [r7, #4]
}
 8043bce:	4618      	mov	r0, r3
 8043bd0:	370c      	adds	r7, #12
 8043bd2:	46bd      	mov	sp, r7
 8043bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043bd8:	4770      	bx	lr
 8043bda:	bf00      	nop
 8043bdc:	2001b5f4 	.word	0x2001b5f4

08043be0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8043be0:	b580      	push	{r7, lr}
 8043be2:	b086      	sub	sp, #24
 8043be4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8043be6:	2300      	movs	r3, #0
 8043be8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8043bea:	4b4a      	ldr	r3, [pc, #296]	; (8043d14 <xTaskIncrementTick+0x134>)
 8043bec:	681b      	ldr	r3, [r3, #0]
 8043bee:	2b00      	cmp	r3, #0
 8043bf0:	d17f      	bne.n	8043cf2 <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8043bf2:	4b49      	ldr	r3, [pc, #292]	; (8043d18 <xTaskIncrementTick+0x138>)
 8043bf4:	681b      	ldr	r3, [r3, #0]
 8043bf6:	3301      	adds	r3, #1
 8043bf8:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8043bfa:	4a47      	ldr	r2, [pc, #284]	; (8043d18 <xTaskIncrementTick+0x138>)
 8043bfc:	693b      	ldr	r3, [r7, #16]
 8043bfe:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8043c00:	693b      	ldr	r3, [r7, #16]
 8043c02:	2b00      	cmp	r3, #0
 8043c04:	d117      	bne.n	8043c36 <xTaskIncrementTick+0x56>
		{
			taskSWITCH_DELAYED_LISTS();
 8043c06:	4b45      	ldr	r3, [pc, #276]	; (8043d1c <xTaskIncrementTick+0x13c>)
 8043c08:	681b      	ldr	r3, [r3, #0]
 8043c0a:	681b      	ldr	r3, [r3, #0]
 8043c0c:	2b00      	cmp	r3, #0
 8043c0e:	d001      	beq.n	8043c14 <xTaskIncrementTick+0x34>
 8043c10:	b672      	cpsid	i
 8043c12:	e7fe      	b.n	8043c12 <xTaskIncrementTick+0x32>
 8043c14:	4b41      	ldr	r3, [pc, #260]	; (8043d1c <xTaskIncrementTick+0x13c>)
 8043c16:	681b      	ldr	r3, [r3, #0]
 8043c18:	60fb      	str	r3, [r7, #12]
 8043c1a:	4b41      	ldr	r3, [pc, #260]	; (8043d20 <xTaskIncrementTick+0x140>)
 8043c1c:	681b      	ldr	r3, [r3, #0]
 8043c1e:	4a3f      	ldr	r2, [pc, #252]	; (8043d1c <xTaskIncrementTick+0x13c>)
 8043c20:	6013      	str	r3, [r2, #0]
 8043c22:	4a3f      	ldr	r2, [pc, #252]	; (8043d20 <xTaskIncrementTick+0x140>)
 8043c24:	68fb      	ldr	r3, [r7, #12]
 8043c26:	6013      	str	r3, [r2, #0]
 8043c28:	4b3e      	ldr	r3, [pc, #248]	; (8043d24 <xTaskIncrementTick+0x144>)
 8043c2a:	681b      	ldr	r3, [r3, #0]
 8043c2c:	3301      	adds	r3, #1
 8043c2e:	4a3d      	ldr	r2, [pc, #244]	; (8043d24 <xTaskIncrementTick+0x144>)
 8043c30:	6013      	str	r3, [r2, #0]
 8043c32:	f000 facd 	bl	80441d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8043c36:	4b3c      	ldr	r3, [pc, #240]	; (8043d28 <xTaskIncrementTick+0x148>)
 8043c38:	681b      	ldr	r3, [r3, #0]
 8043c3a:	693a      	ldr	r2, [r7, #16]
 8043c3c:	429a      	cmp	r2, r3
 8043c3e:	d349      	bcc.n	8043cd4 <xTaskIncrementTick+0xf4>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8043c40:	4b36      	ldr	r3, [pc, #216]	; (8043d1c <xTaskIncrementTick+0x13c>)
 8043c42:	681b      	ldr	r3, [r3, #0]
 8043c44:	681b      	ldr	r3, [r3, #0]
 8043c46:	2b00      	cmp	r3, #0
 8043c48:	d104      	bne.n	8043c54 <xTaskIncrementTick+0x74>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8043c4a:	4b37      	ldr	r3, [pc, #220]	; (8043d28 <xTaskIncrementTick+0x148>)
 8043c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8043c50:	601a      	str	r2, [r3, #0]
					break;
 8043c52:	e03f      	b.n	8043cd4 <xTaskIncrementTick+0xf4>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8043c54:	4b31      	ldr	r3, [pc, #196]	; (8043d1c <xTaskIncrementTick+0x13c>)
 8043c56:	681b      	ldr	r3, [r3, #0]
 8043c58:	68db      	ldr	r3, [r3, #12]
 8043c5a:	68db      	ldr	r3, [r3, #12]
 8043c5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8043c5e:	68bb      	ldr	r3, [r7, #8]
 8043c60:	685b      	ldr	r3, [r3, #4]
 8043c62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8043c64:	693a      	ldr	r2, [r7, #16]
 8043c66:	687b      	ldr	r3, [r7, #4]
 8043c68:	429a      	cmp	r2, r3
 8043c6a:	d203      	bcs.n	8043c74 <xTaskIncrementTick+0x94>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8043c6c:	4a2e      	ldr	r2, [pc, #184]	; (8043d28 <xTaskIncrementTick+0x148>)
 8043c6e:	687b      	ldr	r3, [r7, #4]
 8043c70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8043c72:	e02f      	b.n	8043cd4 <xTaskIncrementTick+0xf4>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8043c74:	68bb      	ldr	r3, [r7, #8]
 8043c76:	3304      	adds	r3, #4
 8043c78:	4618      	mov	r0, r3
 8043c7a:	f7fe fe6d 	bl	8042958 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8043c7e:	68bb      	ldr	r3, [r7, #8]
 8043c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043c82:	2b00      	cmp	r3, #0
 8043c84:	d004      	beq.n	8043c90 <xTaskIncrementTick+0xb0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8043c86:	68bb      	ldr	r3, [r7, #8]
 8043c88:	3318      	adds	r3, #24
 8043c8a:	4618      	mov	r0, r3
 8043c8c:	f7fe fe64 	bl	8042958 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8043c90:	68bb      	ldr	r3, [r7, #8]
 8043c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043c94:	4b25      	ldr	r3, [pc, #148]	; (8043d2c <xTaskIncrementTick+0x14c>)
 8043c96:	681b      	ldr	r3, [r3, #0]
 8043c98:	429a      	cmp	r2, r3
 8043c9a:	d903      	bls.n	8043ca4 <xTaskIncrementTick+0xc4>
 8043c9c:	68bb      	ldr	r3, [r7, #8]
 8043c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043ca0:	4a22      	ldr	r2, [pc, #136]	; (8043d2c <xTaskIncrementTick+0x14c>)
 8043ca2:	6013      	str	r3, [r2, #0]
 8043ca4:	68bb      	ldr	r3, [r7, #8]
 8043ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043ca8:	4613      	mov	r3, r2
 8043caa:	009b      	lsls	r3, r3, #2
 8043cac:	4413      	add	r3, r2
 8043cae:	009b      	lsls	r3, r3, #2
 8043cb0:	4a1f      	ldr	r2, [pc, #124]	; (8043d30 <xTaskIncrementTick+0x150>)
 8043cb2:	441a      	add	r2, r3
 8043cb4:	68bb      	ldr	r3, [r7, #8]
 8043cb6:	3304      	adds	r3, #4
 8043cb8:	4619      	mov	r1, r3
 8043cba:	4610      	mov	r0, r2
 8043cbc:	f7fe fdef 	bl	804289e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8043cc0:	68bb      	ldr	r3, [r7, #8]
 8043cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043cc4:	4b1b      	ldr	r3, [pc, #108]	; (8043d34 <xTaskIncrementTick+0x154>)
 8043cc6:	681b      	ldr	r3, [r3, #0]
 8043cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043cca:	429a      	cmp	r2, r3
 8043ccc:	d3b8      	bcc.n	8043c40 <xTaskIncrementTick+0x60>
						{
							xSwitchRequired = pdTRUE;
 8043cce:	2301      	movs	r3, #1
 8043cd0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8043cd2:	e7b5      	b.n	8043c40 <xTaskIncrementTick+0x60>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8043cd4:	4b17      	ldr	r3, [pc, #92]	; (8043d34 <xTaskIncrementTick+0x154>)
 8043cd6:	681b      	ldr	r3, [r3, #0]
 8043cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043cda:	4915      	ldr	r1, [pc, #84]	; (8043d30 <xTaskIncrementTick+0x150>)
 8043cdc:	4613      	mov	r3, r2
 8043cde:	009b      	lsls	r3, r3, #2
 8043ce0:	4413      	add	r3, r2
 8043ce2:	009b      	lsls	r3, r3, #2
 8043ce4:	440b      	add	r3, r1
 8043ce6:	681b      	ldr	r3, [r3, #0]
 8043ce8:	2b01      	cmp	r3, #1
 8043cea:	d907      	bls.n	8043cfc <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 8043cec:	2301      	movs	r3, #1
 8043cee:	617b      	str	r3, [r7, #20]
 8043cf0:	e004      	b.n	8043cfc <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8043cf2:	4b11      	ldr	r3, [pc, #68]	; (8043d38 <xTaskIncrementTick+0x158>)
 8043cf4:	681b      	ldr	r3, [r3, #0]
 8043cf6:	3301      	adds	r3, #1
 8043cf8:	4a0f      	ldr	r2, [pc, #60]	; (8043d38 <xTaskIncrementTick+0x158>)
 8043cfa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8043cfc:	4b0f      	ldr	r3, [pc, #60]	; (8043d3c <xTaskIncrementTick+0x15c>)
 8043cfe:	681b      	ldr	r3, [r3, #0]
 8043d00:	2b00      	cmp	r3, #0
 8043d02:	d001      	beq.n	8043d08 <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 8043d04:	2301      	movs	r3, #1
 8043d06:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8043d08:	697b      	ldr	r3, [r7, #20]
}
 8043d0a:	4618      	mov	r0, r3
 8043d0c:	3718      	adds	r7, #24
 8043d0e:	46bd      	mov	sp, r7
 8043d10:	bd80      	pop	{r7, pc}
 8043d12:	bf00      	nop
 8043d14:	2001b618 	.word	0x2001b618
 8043d18:	2001b5f4 	.word	0x2001b5f4
 8043d1c:	2001b5a8 	.word	0x2001b5a8
 8043d20:	2001b5ac 	.word	0x2001b5ac
 8043d24:	2001b608 	.word	0x2001b608
 8043d28:	2001b610 	.word	0x2001b610
 8043d2c:	2001b5f8 	.word	0x2001b5f8
 8043d30:	2001b120 	.word	0x2001b120
 8043d34:	2001b11c 	.word	0x2001b11c
 8043d38:	2001b600 	.word	0x2001b600
 8043d3c:	2001b604 	.word	0x2001b604

08043d40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8043d40:	b580      	push	{r7, lr}
 8043d42:	b084      	sub	sp, #16
 8043d44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8043d46:	4b36      	ldr	r3, [pc, #216]	; (8043e20 <vTaskSwitchContext+0xe0>)
 8043d48:	681b      	ldr	r3, [r3, #0]
 8043d4a:	2b00      	cmp	r3, #0
 8043d4c:	d003      	beq.n	8043d56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8043d4e:	4b35      	ldr	r3, [pc, #212]	; (8043e24 <vTaskSwitchContext+0xe4>)
 8043d50:	2201      	movs	r2, #1
 8043d52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8043d54:	e05f      	b.n	8043e16 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8043d56:	4b33      	ldr	r3, [pc, #204]	; (8043e24 <vTaskSwitchContext+0xe4>)
 8043d58:	2200      	movs	r2, #0
 8043d5a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8043d5c:	4b32      	ldr	r3, [pc, #200]	; (8043e28 <vTaskSwitchContext+0xe8>)
 8043d5e:	681b      	ldr	r3, [r3, #0]
 8043d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043d62:	60bb      	str	r3, [r7, #8]
 8043d64:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8043d68:	607b      	str	r3, [r7, #4]
 8043d6a:	68bb      	ldr	r3, [r7, #8]
 8043d6c:	681b      	ldr	r3, [r3, #0]
 8043d6e:	687a      	ldr	r2, [r7, #4]
 8043d70:	429a      	cmp	r2, r3
 8043d72:	d111      	bne.n	8043d98 <vTaskSwitchContext+0x58>
 8043d74:	68bb      	ldr	r3, [r7, #8]
 8043d76:	3304      	adds	r3, #4
 8043d78:	681b      	ldr	r3, [r3, #0]
 8043d7a:	687a      	ldr	r2, [r7, #4]
 8043d7c:	429a      	cmp	r2, r3
 8043d7e:	d10b      	bne.n	8043d98 <vTaskSwitchContext+0x58>
 8043d80:	68bb      	ldr	r3, [r7, #8]
 8043d82:	3308      	adds	r3, #8
 8043d84:	681b      	ldr	r3, [r3, #0]
 8043d86:	687a      	ldr	r2, [r7, #4]
 8043d88:	429a      	cmp	r2, r3
 8043d8a:	d105      	bne.n	8043d98 <vTaskSwitchContext+0x58>
 8043d8c:	68bb      	ldr	r3, [r7, #8]
 8043d8e:	330c      	adds	r3, #12
 8043d90:	681b      	ldr	r3, [r3, #0]
 8043d92:	687a      	ldr	r2, [r7, #4]
 8043d94:	429a      	cmp	r2, r3
 8043d96:	d008      	beq.n	8043daa <vTaskSwitchContext+0x6a>
 8043d98:	4b23      	ldr	r3, [pc, #140]	; (8043e28 <vTaskSwitchContext+0xe8>)
 8043d9a:	681a      	ldr	r2, [r3, #0]
 8043d9c:	4b22      	ldr	r3, [pc, #136]	; (8043e28 <vTaskSwitchContext+0xe8>)
 8043d9e:	681b      	ldr	r3, [r3, #0]
 8043da0:	3334      	adds	r3, #52	; 0x34
 8043da2:	4619      	mov	r1, r3
 8043da4:	4610      	mov	r0, r2
 8043da6:	f7fe fb61 	bl	804246c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8043daa:	4b20      	ldr	r3, [pc, #128]	; (8043e2c <vTaskSwitchContext+0xec>)
 8043dac:	681b      	ldr	r3, [r3, #0]
 8043dae:	60fb      	str	r3, [r7, #12]
 8043db0:	e007      	b.n	8043dc2 <vTaskSwitchContext+0x82>
 8043db2:	68fb      	ldr	r3, [r7, #12]
 8043db4:	2b00      	cmp	r3, #0
 8043db6:	d101      	bne.n	8043dbc <vTaskSwitchContext+0x7c>
 8043db8:	b672      	cpsid	i
 8043dba:	e7fe      	b.n	8043dba <vTaskSwitchContext+0x7a>
 8043dbc:	68fb      	ldr	r3, [r7, #12]
 8043dbe:	3b01      	subs	r3, #1
 8043dc0:	60fb      	str	r3, [r7, #12]
 8043dc2:	491b      	ldr	r1, [pc, #108]	; (8043e30 <vTaskSwitchContext+0xf0>)
 8043dc4:	68fa      	ldr	r2, [r7, #12]
 8043dc6:	4613      	mov	r3, r2
 8043dc8:	009b      	lsls	r3, r3, #2
 8043dca:	4413      	add	r3, r2
 8043dcc:	009b      	lsls	r3, r3, #2
 8043dce:	440b      	add	r3, r1
 8043dd0:	681b      	ldr	r3, [r3, #0]
 8043dd2:	2b00      	cmp	r3, #0
 8043dd4:	d0ed      	beq.n	8043db2 <vTaskSwitchContext+0x72>
 8043dd6:	68fa      	ldr	r2, [r7, #12]
 8043dd8:	4613      	mov	r3, r2
 8043dda:	009b      	lsls	r3, r3, #2
 8043ddc:	4413      	add	r3, r2
 8043dde:	009b      	lsls	r3, r3, #2
 8043de0:	4a13      	ldr	r2, [pc, #76]	; (8043e30 <vTaskSwitchContext+0xf0>)
 8043de2:	4413      	add	r3, r2
 8043de4:	603b      	str	r3, [r7, #0]
 8043de6:	683b      	ldr	r3, [r7, #0]
 8043de8:	685b      	ldr	r3, [r3, #4]
 8043dea:	685a      	ldr	r2, [r3, #4]
 8043dec:	683b      	ldr	r3, [r7, #0]
 8043dee:	605a      	str	r2, [r3, #4]
 8043df0:	683b      	ldr	r3, [r7, #0]
 8043df2:	685a      	ldr	r2, [r3, #4]
 8043df4:	683b      	ldr	r3, [r7, #0]
 8043df6:	3308      	adds	r3, #8
 8043df8:	429a      	cmp	r2, r3
 8043dfa:	d104      	bne.n	8043e06 <vTaskSwitchContext+0xc6>
 8043dfc:	683b      	ldr	r3, [r7, #0]
 8043dfe:	685b      	ldr	r3, [r3, #4]
 8043e00:	685a      	ldr	r2, [r3, #4]
 8043e02:	683b      	ldr	r3, [r7, #0]
 8043e04:	605a      	str	r2, [r3, #4]
 8043e06:	683b      	ldr	r3, [r7, #0]
 8043e08:	685b      	ldr	r3, [r3, #4]
 8043e0a:	68db      	ldr	r3, [r3, #12]
 8043e0c:	4a06      	ldr	r2, [pc, #24]	; (8043e28 <vTaskSwitchContext+0xe8>)
 8043e0e:	6013      	str	r3, [r2, #0]
 8043e10:	4a06      	ldr	r2, [pc, #24]	; (8043e2c <vTaskSwitchContext+0xec>)
 8043e12:	68fb      	ldr	r3, [r7, #12]
 8043e14:	6013      	str	r3, [r2, #0]
}
 8043e16:	bf00      	nop
 8043e18:	3710      	adds	r7, #16
 8043e1a:	46bd      	mov	sp, r7
 8043e1c:	bd80      	pop	{r7, pc}
 8043e1e:	bf00      	nop
 8043e20:	2001b618 	.word	0x2001b618
 8043e24:	2001b604 	.word	0x2001b604
 8043e28:	2001b11c 	.word	0x2001b11c
 8043e2c:	2001b5f8 	.word	0x2001b5f8
 8043e30:	2001b120 	.word	0x2001b120

08043e34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8043e34:	b580      	push	{r7, lr}
 8043e36:	b082      	sub	sp, #8
 8043e38:	af00      	add	r7, sp, #0
 8043e3a:	6078      	str	r0, [r7, #4]
 8043e3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8043e3e:	687b      	ldr	r3, [r7, #4]
 8043e40:	2b00      	cmp	r3, #0
 8043e42:	d101      	bne.n	8043e48 <vTaskPlaceOnEventList+0x14>
 8043e44:	b672      	cpsid	i
 8043e46:	e7fe      	b.n	8043e46 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8043e48:	4b07      	ldr	r3, [pc, #28]	; (8043e68 <vTaskPlaceOnEventList+0x34>)
 8043e4a:	681b      	ldr	r3, [r3, #0]
 8043e4c:	3318      	adds	r3, #24
 8043e4e:	4619      	mov	r1, r3
 8043e50:	6878      	ldr	r0, [r7, #4]
 8043e52:	f7fe fd48 	bl	80428e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8043e56:	2101      	movs	r1, #1
 8043e58:	6838      	ldr	r0, [r7, #0]
 8043e5a:	f000 fa53 	bl	8044304 <prvAddCurrentTaskToDelayedList>
}
 8043e5e:	bf00      	nop
 8043e60:	3708      	adds	r7, #8
 8043e62:	46bd      	mov	sp, r7
 8043e64:	bd80      	pop	{r7, pc}
 8043e66:	bf00      	nop
 8043e68:	2001b11c 	.word	0x2001b11c

08043e6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8043e6c:	b580      	push	{r7, lr}
 8043e6e:	b084      	sub	sp, #16
 8043e70:	af00      	add	r7, sp, #0
 8043e72:	60f8      	str	r0, [r7, #12]
 8043e74:	60b9      	str	r1, [r7, #8]
 8043e76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8043e78:	68fb      	ldr	r3, [r7, #12]
 8043e7a:	2b00      	cmp	r3, #0
 8043e7c:	d101      	bne.n	8043e82 <vTaskPlaceOnEventListRestricted+0x16>
 8043e7e:	b672      	cpsid	i
 8043e80:	e7fe      	b.n	8043e80 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8043e82:	4b0a      	ldr	r3, [pc, #40]	; (8043eac <vTaskPlaceOnEventListRestricted+0x40>)
 8043e84:	681b      	ldr	r3, [r3, #0]
 8043e86:	3318      	adds	r3, #24
 8043e88:	4619      	mov	r1, r3
 8043e8a:	68f8      	ldr	r0, [r7, #12]
 8043e8c:	f7fe fd07 	bl	804289e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8043e90:	687b      	ldr	r3, [r7, #4]
 8043e92:	2b00      	cmp	r3, #0
 8043e94:	d002      	beq.n	8043e9c <vTaskPlaceOnEventListRestricted+0x30>
		{
			xTicksToWait = portMAX_DELAY;
 8043e96:	f04f 33ff 	mov.w	r3, #4294967295
 8043e9a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8043e9c:	6879      	ldr	r1, [r7, #4]
 8043e9e:	68b8      	ldr	r0, [r7, #8]
 8043ea0:	f000 fa30 	bl	8044304 <prvAddCurrentTaskToDelayedList>
	}
 8043ea4:	bf00      	nop
 8043ea6:	3710      	adds	r7, #16
 8043ea8:	46bd      	mov	sp, r7
 8043eaa:	bd80      	pop	{r7, pc}
 8043eac:	2001b11c 	.word	0x2001b11c

08043eb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8043eb0:	b580      	push	{r7, lr}
 8043eb2:	b084      	sub	sp, #16
 8043eb4:	af00      	add	r7, sp, #0
 8043eb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8043eb8:	687b      	ldr	r3, [r7, #4]
 8043eba:	68db      	ldr	r3, [r3, #12]
 8043ebc:	68db      	ldr	r3, [r3, #12]
 8043ebe:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8043ec0:	68bb      	ldr	r3, [r7, #8]
 8043ec2:	2b00      	cmp	r3, #0
 8043ec4:	d101      	bne.n	8043eca <xTaskRemoveFromEventList+0x1a>
 8043ec6:	b672      	cpsid	i
 8043ec8:	e7fe      	b.n	8043ec8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8043eca:	68bb      	ldr	r3, [r7, #8]
 8043ecc:	3318      	adds	r3, #24
 8043ece:	4618      	mov	r0, r3
 8043ed0:	f7fe fd42 	bl	8042958 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8043ed4:	4b1e      	ldr	r3, [pc, #120]	; (8043f50 <xTaskRemoveFromEventList+0xa0>)
 8043ed6:	681b      	ldr	r3, [r3, #0]
 8043ed8:	2b00      	cmp	r3, #0
 8043eda:	d11f      	bne.n	8043f1c <xTaskRemoveFromEventList+0x6c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8043edc:	68bb      	ldr	r3, [r7, #8]
 8043ede:	3304      	adds	r3, #4
 8043ee0:	4618      	mov	r0, r3
 8043ee2:	f7fe fd39 	bl	8042958 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8043ee6:	68bb      	ldr	r3, [r7, #8]
 8043ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043eea:	4b1a      	ldr	r3, [pc, #104]	; (8043f54 <xTaskRemoveFromEventList+0xa4>)
 8043eec:	681b      	ldr	r3, [r3, #0]
 8043eee:	429a      	cmp	r2, r3
 8043ef0:	d903      	bls.n	8043efa <xTaskRemoveFromEventList+0x4a>
 8043ef2:	68bb      	ldr	r3, [r7, #8]
 8043ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043ef6:	4a17      	ldr	r2, [pc, #92]	; (8043f54 <xTaskRemoveFromEventList+0xa4>)
 8043ef8:	6013      	str	r3, [r2, #0]
 8043efa:	68bb      	ldr	r3, [r7, #8]
 8043efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043efe:	4613      	mov	r3, r2
 8043f00:	009b      	lsls	r3, r3, #2
 8043f02:	4413      	add	r3, r2
 8043f04:	009b      	lsls	r3, r3, #2
 8043f06:	4a14      	ldr	r2, [pc, #80]	; (8043f58 <xTaskRemoveFromEventList+0xa8>)
 8043f08:	441a      	add	r2, r3
 8043f0a:	68bb      	ldr	r3, [r7, #8]
 8043f0c:	3304      	adds	r3, #4
 8043f0e:	4619      	mov	r1, r3
 8043f10:	4610      	mov	r0, r2
 8043f12:	f7fe fcc4 	bl	804289e <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8043f16:	f000 f95b 	bl	80441d0 <prvResetNextTaskUnblockTime>
 8043f1a:	e005      	b.n	8043f28 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8043f1c:	68bb      	ldr	r3, [r7, #8]
 8043f1e:	3318      	adds	r3, #24
 8043f20:	4619      	mov	r1, r3
 8043f22:	480e      	ldr	r0, [pc, #56]	; (8043f5c <xTaskRemoveFromEventList+0xac>)
 8043f24:	f7fe fcbb 	bl	804289e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8043f28:	68bb      	ldr	r3, [r7, #8]
 8043f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043f2c:	4b0c      	ldr	r3, [pc, #48]	; (8043f60 <xTaskRemoveFromEventList+0xb0>)
 8043f2e:	681b      	ldr	r3, [r3, #0]
 8043f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043f32:	429a      	cmp	r2, r3
 8043f34:	d905      	bls.n	8043f42 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8043f36:	2301      	movs	r3, #1
 8043f38:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8043f3a:	4b0a      	ldr	r3, [pc, #40]	; (8043f64 <xTaskRemoveFromEventList+0xb4>)
 8043f3c:	2201      	movs	r2, #1
 8043f3e:	601a      	str	r2, [r3, #0]
 8043f40:	e001      	b.n	8043f46 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8043f42:	2300      	movs	r3, #0
 8043f44:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8043f46:	68fb      	ldr	r3, [r7, #12]
}
 8043f48:	4618      	mov	r0, r3
 8043f4a:	3710      	adds	r7, #16
 8043f4c:	46bd      	mov	sp, r7
 8043f4e:	bd80      	pop	{r7, pc}
 8043f50:	2001b618 	.word	0x2001b618
 8043f54:	2001b5f8 	.word	0x2001b5f8
 8043f58:	2001b120 	.word	0x2001b120
 8043f5c:	2001b5b0 	.word	0x2001b5b0
 8043f60:	2001b11c 	.word	0x2001b11c
 8043f64:	2001b604 	.word	0x2001b604

08043f68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8043f68:	b480      	push	{r7}
 8043f6a:	b083      	sub	sp, #12
 8043f6c:	af00      	add	r7, sp, #0
 8043f6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8043f70:	4b06      	ldr	r3, [pc, #24]	; (8043f8c <vTaskInternalSetTimeOutState+0x24>)
 8043f72:	681a      	ldr	r2, [r3, #0]
 8043f74:	687b      	ldr	r3, [r7, #4]
 8043f76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8043f78:	4b05      	ldr	r3, [pc, #20]	; (8043f90 <vTaskInternalSetTimeOutState+0x28>)
 8043f7a:	681a      	ldr	r2, [r3, #0]
 8043f7c:	687b      	ldr	r3, [r7, #4]
 8043f7e:	605a      	str	r2, [r3, #4]
}
 8043f80:	bf00      	nop
 8043f82:	370c      	adds	r7, #12
 8043f84:	46bd      	mov	sp, r7
 8043f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f8a:	4770      	bx	lr
 8043f8c:	2001b608 	.word	0x2001b608
 8043f90:	2001b5f4 	.word	0x2001b5f4

08043f94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8043f94:	b580      	push	{r7, lr}
 8043f96:	b086      	sub	sp, #24
 8043f98:	af00      	add	r7, sp, #0
 8043f9a:	6078      	str	r0, [r7, #4]
 8043f9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8043f9e:	687b      	ldr	r3, [r7, #4]
 8043fa0:	2b00      	cmp	r3, #0
 8043fa2:	d101      	bne.n	8043fa8 <xTaskCheckForTimeOut+0x14>
 8043fa4:	b672      	cpsid	i
 8043fa6:	e7fe      	b.n	8043fa6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8043fa8:	683b      	ldr	r3, [r7, #0]
 8043faa:	2b00      	cmp	r3, #0
 8043fac:	d101      	bne.n	8043fb2 <xTaskCheckForTimeOut+0x1e>
 8043fae:	b672      	cpsid	i
 8043fb0:	e7fe      	b.n	8043fb0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8043fb2:	f7fe fd4b 	bl	8042a4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8043fb6:	4b1d      	ldr	r3, [pc, #116]	; (804402c <xTaskCheckForTimeOut+0x98>)
 8043fb8:	681b      	ldr	r3, [r3, #0]
 8043fba:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8043fbc:	687b      	ldr	r3, [r7, #4]
 8043fbe:	685b      	ldr	r3, [r3, #4]
 8043fc0:	693a      	ldr	r2, [r7, #16]
 8043fc2:	1ad3      	subs	r3, r2, r3
 8043fc4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8043fc6:	683b      	ldr	r3, [r7, #0]
 8043fc8:	681b      	ldr	r3, [r3, #0]
 8043fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043fce:	d102      	bne.n	8043fd6 <xTaskCheckForTimeOut+0x42>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8043fd0:	2300      	movs	r3, #0
 8043fd2:	617b      	str	r3, [r7, #20]
 8043fd4:	e023      	b.n	804401e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8043fd6:	687b      	ldr	r3, [r7, #4]
 8043fd8:	681a      	ldr	r2, [r3, #0]
 8043fda:	4b15      	ldr	r3, [pc, #84]	; (8044030 <xTaskCheckForTimeOut+0x9c>)
 8043fdc:	681b      	ldr	r3, [r3, #0]
 8043fde:	429a      	cmp	r2, r3
 8043fe0:	d007      	beq.n	8043ff2 <xTaskCheckForTimeOut+0x5e>
 8043fe2:	687b      	ldr	r3, [r7, #4]
 8043fe4:	685b      	ldr	r3, [r3, #4]
 8043fe6:	693a      	ldr	r2, [r7, #16]
 8043fe8:	429a      	cmp	r2, r3
 8043fea:	d302      	bcc.n	8043ff2 <xTaskCheckForTimeOut+0x5e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8043fec:	2301      	movs	r3, #1
 8043fee:	617b      	str	r3, [r7, #20]
 8043ff0:	e015      	b.n	804401e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8043ff2:	683b      	ldr	r3, [r7, #0]
 8043ff4:	681b      	ldr	r3, [r3, #0]
 8043ff6:	68fa      	ldr	r2, [r7, #12]
 8043ff8:	429a      	cmp	r2, r3
 8043ffa:	d20b      	bcs.n	8044014 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8043ffc:	683b      	ldr	r3, [r7, #0]
 8043ffe:	681a      	ldr	r2, [r3, #0]
 8044000:	68fb      	ldr	r3, [r7, #12]
 8044002:	1ad2      	subs	r2, r2, r3
 8044004:	683b      	ldr	r3, [r7, #0]
 8044006:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8044008:	6878      	ldr	r0, [r7, #4]
 804400a:	f7ff ffad 	bl	8043f68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 804400e:	2300      	movs	r3, #0
 8044010:	617b      	str	r3, [r7, #20]
 8044012:	e004      	b.n	804401e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8044014:	683b      	ldr	r3, [r7, #0]
 8044016:	2200      	movs	r2, #0
 8044018:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 804401a:	2301      	movs	r3, #1
 804401c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 804401e:	f7fe fd29 	bl	8042a74 <vPortExitCritical>

	return xReturn;
 8044022:	697b      	ldr	r3, [r7, #20]
}
 8044024:	4618      	mov	r0, r3
 8044026:	3718      	adds	r7, #24
 8044028:	46bd      	mov	sp, r7
 804402a:	bd80      	pop	{r7, pc}
 804402c:	2001b5f4 	.word	0x2001b5f4
 8044030:	2001b608 	.word	0x2001b608

08044034 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8044034:	b480      	push	{r7}
 8044036:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8044038:	4b03      	ldr	r3, [pc, #12]	; (8044048 <vTaskMissedYield+0x14>)
 804403a:	2201      	movs	r2, #1
 804403c:	601a      	str	r2, [r3, #0]
}
 804403e:	bf00      	nop
 8044040:	46bd      	mov	sp, r7
 8044042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044046:	4770      	bx	lr
 8044048:	2001b604 	.word	0x2001b604

0804404c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 804404c:	b580      	push	{r7, lr}
 804404e:	b084      	sub	sp, #16
 8044050:	af00      	add	r7, sp, #0
 8044052:	6078      	str	r0, [r7, #4]
	SCHEDULER IS STARTED. **/

	/* In case a task that has a secure context deletes itself, in which case
	the idle task is responsible for deleting the task's secure context, if
	any. */
	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
 8044054:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8044058:	f7fe fece 	bl	8042df8 <vPortAllocateSecureContext>

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 804405c:	f000 f862 	bl	8044124 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8044060:	4b0d      	ldr	r3, [pc, #52]	; (8044098 <prvIdleTask+0x4c>)
 8044062:	681b      	ldr	r3, [r3, #0]
 8044064:	2b01      	cmp	r3, #1
 8044066:	d901      	bls.n	804406c <prvIdleTask+0x20>
			{
				taskYIELD();
 8044068:	f7fe fcde 	bl	8042a28 <vPortYield>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 804406c:	f7ff fce4 	bl	8043a38 <prvGetExpectedIdleTime>
 8044070:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8044072:	68fb      	ldr	r3, [r7, #12]
 8044074:	2b01      	cmp	r3, #1
 8044076:	d9f1      	bls.n	804405c <prvIdleTask+0x10>
			{
				vTaskSuspendAll();
 8044078:	f7ff fcd0 	bl	8043a1c <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 804407c:	4b07      	ldr	r3, [pc, #28]	; (804409c <prvIdleTask+0x50>)
 804407e:	681a      	ldr	r2, [r3, #0]
 8044080:	4b07      	ldr	r3, [pc, #28]	; (80440a0 <prvIdleTask+0x54>)
 8044082:	681b      	ldr	r3, [r3, #0]
 8044084:	429a      	cmp	r2, r3
 8044086:	d201      	bcs.n	804408c <prvIdleTask+0x40>
 8044088:	b672      	cpsid	i
 804408a:	e7fe      	b.n	804408a <prvIdleTask+0x3e>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 804408c:	f7ff fcd4 	bl	8043a38 <prvGetExpectedIdleTime>
 8044090:	60f8      	str	r0, [r7, #12]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8044092:	f7ff fd09 	bl	8043aa8 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8044096:	e7e1      	b.n	804405c <prvIdleTask+0x10>
 8044098:	2001b120 	.word	0x2001b120
 804409c:	2001b610 	.word	0x2001b610
 80440a0:	2001b5f4 	.word	0x2001b5f4

080440a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80440a4:	b580      	push	{r7, lr}
 80440a6:	b082      	sub	sp, #8
 80440a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80440aa:	2300      	movs	r3, #0
 80440ac:	607b      	str	r3, [r7, #4]
 80440ae:	e00c      	b.n	80440ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80440b0:	687a      	ldr	r2, [r7, #4]
 80440b2:	4613      	mov	r3, r2
 80440b4:	009b      	lsls	r3, r3, #2
 80440b6:	4413      	add	r3, r2
 80440b8:	009b      	lsls	r3, r3, #2
 80440ba:	4a12      	ldr	r2, [pc, #72]	; (8044104 <prvInitialiseTaskLists+0x60>)
 80440bc:	4413      	add	r3, r2
 80440be:	4618      	mov	r0, r3
 80440c0:	f7fe fbc0 	bl	8042844 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80440c4:	687b      	ldr	r3, [r7, #4]
 80440c6:	3301      	adds	r3, #1
 80440c8:	607b      	str	r3, [r7, #4]
 80440ca:	687b      	ldr	r3, [r7, #4]
 80440cc:	2b37      	cmp	r3, #55	; 0x37
 80440ce:	d9ef      	bls.n	80440b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80440d0:	480d      	ldr	r0, [pc, #52]	; (8044108 <prvInitialiseTaskLists+0x64>)
 80440d2:	f7fe fbb7 	bl	8042844 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80440d6:	480d      	ldr	r0, [pc, #52]	; (804410c <prvInitialiseTaskLists+0x68>)
 80440d8:	f7fe fbb4 	bl	8042844 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80440dc:	480c      	ldr	r0, [pc, #48]	; (8044110 <prvInitialiseTaskLists+0x6c>)
 80440de:	f7fe fbb1 	bl	8042844 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80440e2:	480c      	ldr	r0, [pc, #48]	; (8044114 <prvInitialiseTaskLists+0x70>)
 80440e4:	f7fe fbae 	bl	8042844 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80440e8:	480b      	ldr	r0, [pc, #44]	; (8044118 <prvInitialiseTaskLists+0x74>)
 80440ea:	f7fe fbab 	bl	8042844 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80440ee:	4b0b      	ldr	r3, [pc, #44]	; (804411c <prvInitialiseTaskLists+0x78>)
 80440f0:	4a05      	ldr	r2, [pc, #20]	; (8044108 <prvInitialiseTaskLists+0x64>)
 80440f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80440f4:	4b0a      	ldr	r3, [pc, #40]	; (8044120 <prvInitialiseTaskLists+0x7c>)
 80440f6:	4a05      	ldr	r2, [pc, #20]	; (804410c <prvInitialiseTaskLists+0x68>)
 80440f8:	601a      	str	r2, [r3, #0]
}
 80440fa:	bf00      	nop
 80440fc:	3708      	adds	r7, #8
 80440fe:	46bd      	mov	sp, r7
 8044100:	bd80      	pop	{r7, pc}
 8044102:	bf00      	nop
 8044104:	2001b120 	.word	0x2001b120
 8044108:	2001b580 	.word	0x2001b580
 804410c:	2001b594 	.word	0x2001b594
 8044110:	2001b5b0 	.word	0x2001b5b0
 8044114:	2001b5c4 	.word	0x2001b5c4
 8044118:	2001b5dc 	.word	0x2001b5dc
 804411c:	2001b5a8 	.word	0x2001b5a8
 8044120:	2001b5ac 	.word	0x2001b5ac

08044124 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8044124:	b580      	push	{r7, lr}
 8044126:	b082      	sub	sp, #8
 8044128:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 804412a:	e019      	b.n	8044160 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 804412c:	f7fe fc8e 	bl	8042a4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8044130:	4b0f      	ldr	r3, [pc, #60]	; (8044170 <prvCheckTasksWaitingTermination+0x4c>)
 8044132:	68db      	ldr	r3, [r3, #12]
 8044134:	68db      	ldr	r3, [r3, #12]
 8044136:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8044138:	687b      	ldr	r3, [r7, #4]
 804413a:	3304      	adds	r3, #4
 804413c:	4618      	mov	r0, r3
 804413e:	f7fe fc0b 	bl	8042958 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8044142:	4b0c      	ldr	r3, [pc, #48]	; (8044174 <prvCheckTasksWaitingTermination+0x50>)
 8044144:	681b      	ldr	r3, [r3, #0]
 8044146:	3b01      	subs	r3, #1
 8044148:	4a0a      	ldr	r2, [pc, #40]	; (8044174 <prvCheckTasksWaitingTermination+0x50>)
 804414a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 804414c:	4b0a      	ldr	r3, [pc, #40]	; (8044178 <prvCheckTasksWaitingTermination+0x54>)
 804414e:	681b      	ldr	r3, [r3, #0]
 8044150:	3b01      	subs	r3, #1
 8044152:	4a09      	ldr	r2, [pc, #36]	; (8044178 <prvCheckTasksWaitingTermination+0x54>)
 8044154:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8044156:	f7fe fc8d 	bl	8042a74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 804415a:	6878      	ldr	r0, [r7, #4]
 804415c:	f000 f80e 	bl	804417c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8044160:	4b05      	ldr	r3, [pc, #20]	; (8044178 <prvCheckTasksWaitingTermination+0x54>)
 8044162:	681b      	ldr	r3, [r3, #0]
 8044164:	2b00      	cmp	r3, #0
 8044166:	d1e1      	bne.n	804412c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8044168:	bf00      	nop
 804416a:	3708      	adds	r7, #8
 804416c:	46bd      	mov	sp, r7
 804416e:	bd80      	pop	{r7, pc}
 8044170:	2001b5c4 	.word	0x2001b5c4
 8044174:	2001b5f0 	.word	0x2001b5f0
 8044178:	2001b5d8 	.word	0x2001b5d8

0804417c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 804417c:	b580      	push	{r7, lr}
 804417e:	b082      	sub	sp, #8
 8044180:	af00      	add	r7, sp, #0
 8044182:	6078      	str	r0, [r7, #4]
		/* This call is required specifically for the TriCore port.  It must be
		above the vPortFree() calls.  The call is also used by ports/demos that
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );
 8044184:	6878      	ldr	r0, [r7, #4]
 8044186:	f7fe fe3a 	bl	8042dfe <vPortFreeSecureContext>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 804418a:	687b      	ldr	r3, [r7, #4]
 804418c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8044190:	2b00      	cmp	r3, #0
 8044192:	d108      	bne.n	80441a6 <prvDeleteTCB+0x2a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8044194:	687b      	ldr	r3, [r7, #4]
 8044196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8044198:	4618      	mov	r0, r3
 804419a:	f7fe fa4f 	bl	804263c <vPortFree>
				vPortFree( pxTCB );
 804419e:	6878      	ldr	r0, [r7, #4]
 80441a0:	f7fe fa4c 	bl	804263c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80441a4:	e00f      	b.n	80441c6 <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80441a6:	687b      	ldr	r3, [r7, #4]
 80441a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80441ac:	2b01      	cmp	r3, #1
 80441ae:	d103      	bne.n	80441b8 <prvDeleteTCB+0x3c>
				vPortFree( pxTCB );
 80441b0:	6878      	ldr	r0, [r7, #4]
 80441b2:	f7fe fa43 	bl	804263c <vPortFree>
	}
 80441b6:	e006      	b.n	80441c6 <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80441b8:	687b      	ldr	r3, [r7, #4]
 80441ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80441be:	2b02      	cmp	r3, #2
 80441c0:	d001      	beq.n	80441c6 <prvDeleteTCB+0x4a>
 80441c2:	b672      	cpsid	i
 80441c4:	e7fe      	b.n	80441c4 <prvDeleteTCB+0x48>
	}
 80441c6:	bf00      	nop
 80441c8:	3708      	adds	r7, #8
 80441ca:	46bd      	mov	sp, r7
 80441cc:	bd80      	pop	{r7, pc}
	...

080441d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80441d0:	b480      	push	{r7}
 80441d2:	b083      	sub	sp, #12
 80441d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80441d6:	4b0c      	ldr	r3, [pc, #48]	; (8044208 <prvResetNextTaskUnblockTime+0x38>)
 80441d8:	681b      	ldr	r3, [r3, #0]
 80441da:	681b      	ldr	r3, [r3, #0]
 80441dc:	2b00      	cmp	r3, #0
 80441de:	d104      	bne.n	80441ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80441e0:	4b0a      	ldr	r3, [pc, #40]	; (804420c <prvResetNextTaskUnblockTime+0x3c>)
 80441e2:	f04f 32ff 	mov.w	r2, #4294967295
 80441e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80441e8:	e008      	b.n	80441fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80441ea:	4b07      	ldr	r3, [pc, #28]	; (8044208 <prvResetNextTaskUnblockTime+0x38>)
 80441ec:	681b      	ldr	r3, [r3, #0]
 80441ee:	68db      	ldr	r3, [r3, #12]
 80441f0:	68db      	ldr	r3, [r3, #12]
 80441f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80441f4:	687b      	ldr	r3, [r7, #4]
 80441f6:	685b      	ldr	r3, [r3, #4]
 80441f8:	4a04      	ldr	r2, [pc, #16]	; (804420c <prvResetNextTaskUnblockTime+0x3c>)
 80441fa:	6013      	str	r3, [r2, #0]
}
 80441fc:	bf00      	nop
 80441fe:	370c      	adds	r7, #12
 8044200:	46bd      	mov	sp, r7
 8044202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044206:	4770      	bx	lr
 8044208:	2001b5a8 	.word	0x2001b5a8
 804420c:	2001b610 	.word	0x2001b610

08044210 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8044210:	b480      	push	{r7}
 8044212:	b083      	sub	sp, #12
 8044214:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8044216:	4b0b      	ldr	r3, [pc, #44]	; (8044244 <xTaskGetSchedulerState+0x34>)
 8044218:	681b      	ldr	r3, [r3, #0]
 804421a:	2b00      	cmp	r3, #0
 804421c:	d102      	bne.n	8044224 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 804421e:	2301      	movs	r3, #1
 8044220:	607b      	str	r3, [r7, #4]
 8044222:	e008      	b.n	8044236 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8044224:	4b08      	ldr	r3, [pc, #32]	; (8044248 <xTaskGetSchedulerState+0x38>)
 8044226:	681b      	ldr	r3, [r3, #0]
 8044228:	2b00      	cmp	r3, #0
 804422a:	d102      	bne.n	8044232 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 804422c:	2302      	movs	r3, #2
 804422e:	607b      	str	r3, [r7, #4]
 8044230:	e001      	b.n	8044236 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8044232:	2300      	movs	r3, #0
 8044234:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8044236:	687b      	ldr	r3, [r7, #4]
	}
 8044238:	4618      	mov	r0, r3
 804423a:	370c      	adds	r7, #12
 804423c:	46bd      	mov	sp, r7
 804423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044242:	4770      	bx	lr
 8044244:	2001b5fc 	.word	0x2001b5fc
 8044248:	2001b618 	.word	0x2001b618

0804424c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 804424c:	b580      	push	{r7, lr}
 804424e:	b084      	sub	sp, #16
 8044250:	af00      	add	r7, sp, #0
 8044252:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8044254:	687b      	ldr	r3, [r7, #4]
 8044256:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8044258:	2300      	movs	r3, #0
 804425a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 804425c:	687b      	ldr	r3, [r7, #4]
 804425e:	2b00      	cmp	r3, #0
 8044260:	d044      	beq.n	80442ec <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8044262:	4b25      	ldr	r3, [pc, #148]	; (80442f8 <xTaskPriorityDisinherit+0xac>)
 8044264:	681b      	ldr	r3, [r3, #0]
 8044266:	68ba      	ldr	r2, [r7, #8]
 8044268:	429a      	cmp	r2, r3
 804426a:	d001      	beq.n	8044270 <xTaskPriorityDisinherit+0x24>
 804426c:	b672      	cpsid	i
 804426e:	e7fe      	b.n	804426e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8044270:	68bb      	ldr	r3, [r7, #8]
 8044272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8044274:	2b00      	cmp	r3, #0
 8044276:	d101      	bne.n	804427c <xTaskPriorityDisinherit+0x30>
 8044278:	b672      	cpsid	i
 804427a:	e7fe      	b.n	804427a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 804427c:	68bb      	ldr	r3, [r7, #8]
 804427e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8044280:	1e5a      	subs	r2, r3, #1
 8044282:	68bb      	ldr	r3, [r7, #8]
 8044284:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8044286:	68bb      	ldr	r3, [r7, #8]
 8044288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804428a:	68bb      	ldr	r3, [r7, #8]
 804428c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804428e:	429a      	cmp	r2, r3
 8044290:	d02c      	beq.n	80442ec <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8044292:	68bb      	ldr	r3, [r7, #8]
 8044294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8044296:	2b00      	cmp	r3, #0
 8044298:	d128      	bne.n	80442ec <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 804429a:	68bb      	ldr	r3, [r7, #8]
 804429c:	3304      	adds	r3, #4
 804429e:	4618      	mov	r0, r3
 80442a0:	f7fe fb5a 	bl	8042958 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80442a4:	68bb      	ldr	r3, [r7, #8]
 80442a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80442a8:	68bb      	ldr	r3, [r7, #8]
 80442aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80442ac:	68bb      	ldr	r3, [r7, #8]
 80442ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80442b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80442b4:	68bb      	ldr	r3, [r7, #8]
 80442b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80442b8:	68bb      	ldr	r3, [r7, #8]
 80442ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80442bc:	4b0f      	ldr	r3, [pc, #60]	; (80442fc <xTaskPriorityDisinherit+0xb0>)
 80442be:	681b      	ldr	r3, [r3, #0]
 80442c0:	429a      	cmp	r2, r3
 80442c2:	d903      	bls.n	80442cc <xTaskPriorityDisinherit+0x80>
 80442c4:	68bb      	ldr	r3, [r7, #8]
 80442c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80442c8:	4a0c      	ldr	r2, [pc, #48]	; (80442fc <xTaskPriorityDisinherit+0xb0>)
 80442ca:	6013      	str	r3, [r2, #0]
 80442cc:	68bb      	ldr	r3, [r7, #8]
 80442ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80442d0:	4613      	mov	r3, r2
 80442d2:	009b      	lsls	r3, r3, #2
 80442d4:	4413      	add	r3, r2
 80442d6:	009b      	lsls	r3, r3, #2
 80442d8:	4a09      	ldr	r2, [pc, #36]	; (8044300 <xTaskPriorityDisinherit+0xb4>)
 80442da:	441a      	add	r2, r3
 80442dc:	68bb      	ldr	r3, [r7, #8]
 80442de:	3304      	adds	r3, #4
 80442e0:	4619      	mov	r1, r3
 80442e2:	4610      	mov	r0, r2
 80442e4:	f7fe fadb 	bl	804289e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80442e8:	2301      	movs	r3, #1
 80442ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80442ec:	68fb      	ldr	r3, [r7, #12]
	}
 80442ee:	4618      	mov	r0, r3
 80442f0:	3710      	adds	r7, #16
 80442f2:	46bd      	mov	sp, r7
 80442f4:	bd80      	pop	{r7, pc}
 80442f6:	bf00      	nop
 80442f8:	2001b11c 	.word	0x2001b11c
 80442fc:	2001b5f8 	.word	0x2001b5f8
 8044300:	2001b120 	.word	0x2001b120

08044304 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8044304:	b580      	push	{r7, lr}
 8044306:	b084      	sub	sp, #16
 8044308:	af00      	add	r7, sp, #0
 804430a:	6078      	str	r0, [r7, #4]
 804430c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 804430e:	4b21      	ldr	r3, [pc, #132]	; (8044394 <prvAddCurrentTaskToDelayedList+0x90>)
 8044310:	681b      	ldr	r3, [r3, #0]
 8044312:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8044314:	4b20      	ldr	r3, [pc, #128]	; (8044398 <prvAddCurrentTaskToDelayedList+0x94>)
 8044316:	681b      	ldr	r3, [r3, #0]
 8044318:	3304      	adds	r3, #4
 804431a:	4618      	mov	r0, r3
 804431c:	f7fe fb1c 	bl	8042958 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8044320:	687b      	ldr	r3, [r7, #4]
 8044322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8044326:	d10a      	bne.n	804433e <prvAddCurrentTaskToDelayedList+0x3a>
 8044328:	683b      	ldr	r3, [r7, #0]
 804432a:	2b00      	cmp	r3, #0
 804432c:	d007      	beq.n	804433e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 804432e:	4b1a      	ldr	r3, [pc, #104]	; (8044398 <prvAddCurrentTaskToDelayedList+0x94>)
 8044330:	681b      	ldr	r3, [r3, #0]
 8044332:	3304      	adds	r3, #4
 8044334:	4619      	mov	r1, r3
 8044336:	4819      	ldr	r0, [pc, #100]	; (804439c <prvAddCurrentTaskToDelayedList+0x98>)
 8044338:	f7fe fab1 	bl	804289e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 804433c:	e026      	b.n	804438c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 804433e:	68fa      	ldr	r2, [r7, #12]
 8044340:	687b      	ldr	r3, [r7, #4]
 8044342:	4413      	add	r3, r2
 8044344:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8044346:	4b14      	ldr	r3, [pc, #80]	; (8044398 <prvAddCurrentTaskToDelayedList+0x94>)
 8044348:	681b      	ldr	r3, [r3, #0]
 804434a:	68ba      	ldr	r2, [r7, #8]
 804434c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 804434e:	68ba      	ldr	r2, [r7, #8]
 8044350:	68fb      	ldr	r3, [r7, #12]
 8044352:	429a      	cmp	r2, r3
 8044354:	d209      	bcs.n	804436a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8044356:	4b12      	ldr	r3, [pc, #72]	; (80443a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8044358:	681a      	ldr	r2, [r3, #0]
 804435a:	4b0f      	ldr	r3, [pc, #60]	; (8044398 <prvAddCurrentTaskToDelayedList+0x94>)
 804435c:	681b      	ldr	r3, [r3, #0]
 804435e:	3304      	adds	r3, #4
 8044360:	4619      	mov	r1, r3
 8044362:	4610      	mov	r0, r2
 8044364:	f7fe fabf 	bl	80428e6 <vListInsert>
}
 8044368:	e010      	b.n	804438c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 804436a:	4b0e      	ldr	r3, [pc, #56]	; (80443a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 804436c:	681a      	ldr	r2, [r3, #0]
 804436e:	4b0a      	ldr	r3, [pc, #40]	; (8044398 <prvAddCurrentTaskToDelayedList+0x94>)
 8044370:	681b      	ldr	r3, [r3, #0]
 8044372:	3304      	adds	r3, #4
 8044374:	4619      	mov	r1, r3
 8044376:	4610      	mov	r0, r2
 8044378:	f7fe fab5 	bl	80428e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 804437c:	4b0a      	ldr	r3, [pc, #40]	; (80443a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 804437e:	681b      	ldr	r3, [r3, #0]
 8044380:	68ba      	ldr	r2, [r7, #8]
 8044382:	429a      	cmp	r2, r3
 8044384:	d202      	bcs.n	804438c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8044386:	4a08      	ldr	r2, [pc, #32]	; (80443a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8044388:	68bb      	ldr	r3, [r7, #8]
 804438a:	6013      	str	r3, [r2, #0]
}
 804438c:	bf00      	nop
 804438e:	3710      	adds	r7, #16
 8044390:	46bd      	mov	sp, r7
 8044392:	bd80      	pop	{r7, pc}
 8044394:	2001b5f4 	.word	0x2001b5f4
 8044398:	2001b11c 	.word	0x2001b11c
 804439c:	2001b5dc 	.word	0x2001b5dc
 80443a0:	2001b5ac 	.word	0x2001b5ac
 80443a4:	2001b5a8 	.word	0x2001b5a8
 80443a8:	2001b610 	.word	0x2001b610

080443ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80443ac:	b580      	push	{r7, lr}
 80443ae:	b088      	sub	sp, #32
 80443b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80443b2:	2300      	movs	r3, #0
 80443b4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80443b6:	f000 fac1 	bl	804493c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80443ba:	4b17      	ldr	r3, [pc, #92]	; (8044418 <xTimerCreateTimerTask+0x6c>)
 80443bc:	681b      	ldr	r3, [r3, #0]
 80443be:	2b00      	cmp	r3, #0
 80443c0:	d020      	beq.n	8044404 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80443c2:	2300      	movs	r3, #0
 80443c4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80443c6:	2300      	movs	r3, #0
 80443c8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80443ca:	463a      	mov	r2, r7
 80443cc:	1d39      	adds	r1, r7, #4
 80443ce:	f107 0308 	add.w	r3, r7, #8
 80443d2:	4618      	mov	r0, r3
 80443d4:	f7fe f870 	bl	80424b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80443d8:	6839      	ldr	r1, [r7, #0]
 80443da:	687b      	ldr	r3, [r7, #4]
 80443dc:	68ba      	ldr	r2, [r7, #8]
 80443de:	9202      	str	r2, [sp, #8]
 80443e0:	9301      	str	r3, [sp, #4]
 80443e2:	2303      	movs	r3, #3
 80443e4:	9300      	str	r3, [sp, #0]
 80443e6:	2300      	movs	r3, #0
 80443e8:	460a      	mov	r2, r1
 80443ea:	490c      	ldr	r1, [pc, #48]	; (804441c <xTimerCreateTimerTask+0x70>)
 80443ec:	480c      	ldr	r0, [pc, #48]	; (8044420 <xTimerCreateTimerTask+0x74>)
 80443ee:	f7ff f925 	bl	804363c <xTaskCreateStatic>
 80443f2:	4602      	mov	r2, r0
 80443f4:	4b0b      	ldr	r3, [pc, #44]	; (8044424 <xTimerCreateTimerTask+0x78>)
 80443f6:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80443f8:	4b0a      	ldr	r3, [pc, #40]	; (8044424 <xTimerCreateTimerTask+0x78>)
 80443fa:	681b      	ldr	r3, [r3, #0]
 80443fc:	2b00      	cmp	r3, #0
 80443fe:	d001      	beq.n	8044404 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8044400:	2301      	movs	r3, #1
 8044402:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8044404:	68fb      	ldr	r3, [r7, #12]
 8044406:	2b00      	cmp	r3, #0
 8044408:	d101      	bne.n	804440e <xTimerCreateTimerTask+0x62>
 804440a:	b672      	cpsid	i
 804440c:	e7fe      	b.n	804440c <xTimerCreateTimerTask+0x60>
	return xReturn;
 804440e:	68fb      	ldr	r3, [r7, #12]
}
 8044410:	4618      	mov	r0, r3
 8044412:	3710      	adds	r7, #16
 8044414:	46bd      	mov	sp, r7
 8044416:	bd80      	pop	{r7, pc}
 8044418:	2001b64c 	.word	0x2001b64c
 804441c:	08044b0c 	.word	0x08044b0c
 8044420:	08044539 	.word	0x08044539
 8044424:	2001b650 	.word	0x2001b650

08044428 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8044428:	b580      	push	{r7, lr}
 804442a:	b08a      	sub	sp, #40	; 0x28
 804442c:	af00      	add	r7, sp, #0
 804442e:	60f8      	str	r0, [r7, #12]
 8044430:	60b9      	str	r1, [r7, #8]
 8044432:	607a      	str	r2, [r7, #4]
 8044434:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8044436:	2300      	movs	r3, #0
 8044438:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 804443a:	68fb      	ldr	r3, [r7, #12]
 804443c:	2b00      	cmp	r3, #0
 804443e:	d101      	bne.n	8044444 <xTimerGenericCommand+0x1c>
 8044440:	b672      	cpsid	i
 8044442:	e7fe      	b.n	8044442 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8044444:	4b19      	ldr	r3, [pc, #100]	; (80444ac <xTimerGenericCommand+0x84>)
 8044446:	681b      	ldr	r3, [r3, #0]
 8044448:	2b00      	cmp	r3, #0
 804444a:	d02a      	beq.n	80444a2 <xTimerGenericCommand+0x7a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 804444c:	68bb      	ldr	r3, [r7, #8]
 804444e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8044450:	687b      	ldr	r3, [r7, #4]
 8044452:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8044454:	68fb      	ldr	r3, [r7, #12]
 8044456:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8044458:	68bb      	ldr	r3, [r7, #8]
 804445a:	2b05      	cmp	r3, #5
 804445c:	dc18      	bgt.n	8044490 <xTimerGenericCommand+0x68>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 804445e:	f7ff fed7 	bl	8044210 <xTaskGetSchedulerState>
 8044462:	4603      	mov	r3, r0
 8044464:	2b02      	cmp	r3, #2
 8044466:	d109      	bne.n	804447c <xTimerGenericCommand+0x54>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8044468:	4b10      	ldr	r3, [pc, #64]	; (80444ac <xTimerGenericCommand+0x84>)
 804446a:	6818      	ldr	r0, [r3, #0]
 804446c:	f107 0114 	add.w	r1, r7, #20
 8044470:	2300      	movs	r3, #0
 8044472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8044474:	f7fe fd8f 	bl	8042f96 <xQueueGenericSend>
 8044478:	6278      	str	r0, [r7, #36]	; 0x24
 804447a:	e012      	b.n	80444a2 <xTimerGenericCommand+0x7a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 804447c:	4b0b      	ldr	r3, [pc, #44]	; (80444ac <xTimerGenericCommand+0x84>)
 804447e:	6818      	ldr	r0, [r3, #0]
 8044480:	f107 0114 	add.w	r1, r7, #20
 8044484:	2300      	movs	r3, #0
 8044486:	2200      	movs	r2, #0
 8044488:	f7fe fd85 	bl	8042f96 <xQueueGenericSend>
 804448c:	6278      	str	r0, [r7, #36]	; 0x24
 804448e:	e008      	b.n	80444a2 <xTimerGenericCommand+0x7a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8044490:	4b06      	ldr	r3, [pc, #24]	; (80444ac <xTimerGenericCommand+0x84>)
 8044492:	6818      	ldr	r0, [r3, #0]
 8044494:	f107 0114 	add.w	r1, r7, #20
 8044498:	2300      	movs	r3, #0
 804449a:	683a      	ldr	r2, [r7, #0]
 804449c:	f7fe fe40 	bl	8043120 <xQueueGenericSendFromISR>
 80444a0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80444a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80444a4:	4618      	mov	r0, r3
 80444a6:	3728      	adds	r7, #40	; 0x28
 80444a8:	46bd      	mov	sp, r7
 80444aa:	bd80      	pop	{r7, pc}
 80444ac:	2001b64c 	.word	0x2001b64c

080444b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80444b0:	b580      	push	{r7, lr}
 80444b2:	b086      	sub	sp, #24
 80444b4:	af02      	add	r7, sp, #8
 80444b6:	6078      	str	r0, [r7, #4]
 80444b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80444ba:	4b1e      	ldr	r3, [pc, #120]	; (8044534 <prvProcessExpiredTimer+0x84>)
 80444bc:	681b      	ldr	r3, [r3, #0]
 80444be:	68db      	ldr	r3, [r3, #12]
 80444c0:	68db      	ldr	r3, [r3, #12]
 80444c2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80444c4:	68fb      	ldr	r3, [r7, #12]
 80444c6:	3304      	adds	r3, #4
 80444c8:	4618      	mov	r0, r3
 80444ca:	f7fe fa45 	bl	8042958 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80444ce:	68fb      	ldr	r3, [r7, #12]
 80444d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80444d4:	f003 0304 	and.w	r3, r3, #4
 80444d8:	2b00      	cmp	r3, #0
 80444da:	d019      	beq.n	8044510 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80444dc:	68fb      	ldr	r3, [r7, #12]
 80444de:	699a      	ldr	r2, [r3, #24]
 80444e0:	687b      	ldr	r3, [r7, #4]
 80444e2:	18d1      	adds	r1, r2, r3
 80444e4:	687b      	ldr	r3, [r7, #4]
 80444e6:	683a      	ldr	r2, [r7, #0]
 80444e8:	68f8      	ldr	r0, [r7, #12]
 80444ea:	f000 f8c1 	bl	8044670 <prvInsertTimerInActiveList>
 80444ee:	4603      	mov	r3, r0
 80444f0:	2b00      	cmp	r3, #0
 80444f2:	d016      	beq.n	8044522 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80444f4:	2300      	movs	r3, #0
 80444f6:	9300      	str	r3, [sp, #0]
 80444f8:	2300      	movs	r3, #0
 80444fa:	687a      	ldr	r2, [r7, #4]
 80444fc:	2100      	movs	r1, #0
 80444fe:	68f8      	ldr	r0, [r7, #12]
 8044500:	f7ff ff92 	bl	8044428 <xTimerGenericCommand>
 8044504:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8044506:	68bb      	ldr	r3, [r7, #8]
 8044508:	2b00      	cmp	r3, #0
 804450a:	d10a      	bne.n	8044522 <prvProcessExpiredTimer+0x72>
 804450c:	b672      	cpsid	i
 804450e:	e7fe      	b.n	804450e <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8044510:	68fb      	ldr	r3, [r7, #12]
 8044512:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8044516:	f023 0301 	bic.w	r3, r3, #1
 804451a:	b2da      	uxtb	r2, r3
 804451c:	68fb      	ldr	r3, [r7, #12]
 804451e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8044522:	68fb      	ldr	r3, [r7, #12]
 8044524:	6a1b      	ldr	r3, [r3, #32]
 8044526:	68f8      	ldr	r0, [r7, #12]
 8044528:	4798      	blx	r3
}
 804452a:	bf00      	nop
 804452c:	3710      	adds	r7, #16
 804452e:	46bd      	mov	sp, r7
 8044530:	bd80      	pop	{r7, pc}
 8044532:	bf00      	nop
 8044534:	2001b644 	.word	0x2001b644

08044538 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8044538:	b580      	push	{r7, lr}
 804453a:	b084      	sub	sp, #16
 804453c:	af00      	add	r7, sp, #0
 804453e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8044540:	f107 0308 	add.w	r3, r7, #8
 8044544:	4618      	mov	r0, r3
 8044546:	f000 f84f 	bl	80445e8 <prvGetNextExpireTime>
 804454a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 804454c:	68bb      	ldr	r3, [r7, #8]
 804454e:	4619      	mov	r1, r3
 8044550:	68f8      	ldr	r0, [r7, #12]
 8044552:	f000 f803 	bl	804455c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8044556:	f000 f8cd 	bl	80446f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 804455a:	e7f1      	b.n	8044540 <prvTimerTask+0x8>

0804455c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 804455c:	b580      	push	{r7, lr}
 804455e:	b084      	sub	sp, #16
 8044560:	af00      	add	r7, sp, #0
 8044562:	6078      	str	r0, [r7, #4]
 8044564:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8044566:	f7ff fa59 	bl	8043a1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 804456a:	f107 0308 	add.w	r3, r7, #8
 804456e:	4618      	mov	r0, r3
 8044570:	f000 f85e 	bl	8044630 <prvSampleTimeNow>
 8044574:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8044576:	68bb      	ldr	r3, [r7, #8]
 8044578:	2b00      	cmp	r3, #0
 804457a:	d12a      	bne.n	80445d2 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 804457c:	683b      	ldr	r3, [r7, #0]
 804457e:	2b00      	cmp	r3, #0
 8044580:	d10a      	bne.n	8044598 <prvProcessTimerOrBlockTask+0x3c>
 8044582:	687a      	ldr	r2, [r7, #4]
 8044584:	68fb      	ldr	r3, [r7, #12]
 8044586:	429a      	cmp	r2, r3
 8044588:	d806      	bhi.n	8044598 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 804458a:	f7ff fa8d 	bl	8043aa8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 804458e:	68f9      	ldr	r1, [r7, #12]
 8044590:	6878      	ldr	r0, [r7, #4]
 8044592:	f7ff ff8d 	bl	80444b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8044596:	e01e      	b.n	80445d6 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8044598:	683b      	ldr	r3, [r7, #0]
 804459a:	2b00      	cmp	r3, #0
 804459c:	d008      	beq.n	80445b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 804459e:	4b10      	ldr	r3, [pc, #64]	; (80445e0 <prvProcessTimerOrBlockTask+0x84>)
 80445a0:	681b      	ldr	r3, [r3, #0]
 80445a2:	681b      	ldr	r3, [r3, #0]
 80445a4:	2b00      	cmp	r3, #0
 80445a6:	d101      	bne.n	80445ac <prvProcessTimerOrBlockTask+0x50>
 80445a8:	2301      	movs	r3, #1
 80445aa:	e000      	b.n	80445ae <prvProcessTimerOrBlockTask+0x52>
 80445ac:	2300      	movs	r3, #0
 80445ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80445b0:	4b0c      	ldr	r3, [pc, #48]	; (80445e4 <prvProcessTimerOrBlockTask+0x88>)
 80445b2:	6818      	ldr	r0, [r3, #0]
 80445b4:	687a      	ldr	r2, [r7, #4]
 80445b6:	68fb      	ldr	r3, [r7, #12]
 80445b8:	1ad3      	subs	r3, r2, r3
 80445ba:	683a      	ldr	r2, [r7, #0]
 80445bc:	4619      	mov	r1, r3
 80445be:	f7ff f809 	bl	80435d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80445c2:	f7ff fa71 	bl	8043aa8 <xTaskResumeAll>
 80445c6:	4603      	mov	r3, r0
 80445c8:	2b00      	cmp	r3, #0
 80445ca:	d104      	bne.n	80445d6 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80445cc:	f7fe fa2c 	bl	8042a28 <vPortYield>
}
 80445d0:	e001      	b.n	80445d6 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80445d2:	f7ff fa69 	bl	8043aa8 <xTaskResumeAll>
}
 80445d6:	bf00      	nop
 80445d8:	3710      	adds	r7, #16
 80445da:	46bd      	mov	sp, r7
 80445dc:	bd80      	pop	{r7, pc}
 80445de:	bf00      	nop
 80445e0:	2001b648 	.word	0x2001b648
 80445e4:	2001b64c 	.word	0x2001b64c

080445e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80445e8:	b480      	push	{r7}
 80445ea:	b085      	sub	sp, #20
 80445ec:	af00      	add	r7, sp, #0
 80445ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80445f0:	4b0e      	ldr	r3, [pc, #56]	; (804462c <prvGetNextExpireTime+0x44>)
 80445f2:	681b      	ldr	r3, [r3, #0]
 80445f4:	681b      	ldr	r3, [r3, #0]
 80445f6:	2b00      	cmp	r3, #0
 80445f8:	d101      	bne.n	80445fe <prvGetNextExpireTime+0x16>
 80445fa:	2201      	movs	r2, #1
 80445fc:	e000      	b.n	8044600 <prvGetNextExpireTime+0x18>
 80445fe:	2200      	movs	r2, #0
 8044600:	687b      	ldr	r3, [r7, #4]
 8044602:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8044604:	687b      	ldr	r3, [r7, #4]
 8044606:	681b      	ldr	r3, [r3, #0]
 8044608:	2b00      	cmp	r3, #0
 804460a:	d105      	bne.n	8044618 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 804460c:	4b07      	ldr	r3, [pc, #28]	; (804462c <prvGetNextExpireTime+0x44>)
 804460e:	681b      	ldr	r3, [r3, #0]
 8044610:	68db      	ldr	r3, [r3, #12]
 8044612:	681b      	ldr	r3, [r3, #0]
 8044614:	60fb      	str	r3, [r7, #12]
 8044616:	e001      	b.n	804461c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8044618:	2300      	movs	r3, #0
 804461a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 804461c:	68fb      	ldr	r3, [r7, #12]
}
 804461e:	4618      	mov	r0, r3
 8044620:	3714      	adds	r7, #20
 8044622:	46bd      	mov	sp, r7
 8044624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044628:	4770      	bx	lr
 804462a:	bf00      	nop
 804462c:	2001b644 	.word	0x2001b644

08044630 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8044630:	b580      	push	{r7, lr}
 8044632:	b084      	sub	sp, #16
 8044634:	af00      	add	r7, sp, #0
 8044636:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8044638:	f7ff fac2 	bl	8043bc0 <xTaskGetTickCount>
 804463c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 804463e:	4b0b      	ldr	r3, [pc, #44]	; (804466c <prvSampleTimeNow+0x3c>)
 8044640:	681b      	ldr	r3, [r3, #0]
 8044642:	68fa      	ldr	r2, [r7, #12]
 8044644:	429a      	cmp	r2, r3
 8044646:	d205      	bcs.n	8044654 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8044648:	f000 f91c 	bl	8044884 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 804464c:	687b      	ldr	r3, [r7, #4]
 804464e:	2201      	movs	r2, #1
 8044650:	601a      	str	r2, [r3, #0]
 8044652:	e002      	b.n	804465a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8044654:	687b      	ldr	r3, [r7, #4]
 8044656:	2200      	movs	r2, #0
 8044658:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 804465a:	4a04      	ldr	r2, [pc, #16]	; (804466c <prvSampleTimeNow+0x3c>)
 804465c:	68fb      	ldr	r3, [r7, #12]
 804465e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8044660:	68fb      	ldr	r3, [r7, #12]
}
 8044662:	4618      	mov	r0, r3
 8044664:	3710      	adds	r7, #16
 8044666:	46bd      	mov	sp, r7
 8044668:	bd80      	pop	{r7, pc}
 804466a:	bf00      	nop
 804466c:	2001b654 	.word	0x2001b654

08044670 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8044670:	b580      	push	{r7, lr}
 8044672:	b086      	sub	sp, #24
 8044674:	af00      	add	r7, sp, #0
 8044676:	60f8      	str	r0, [r7, #12]
 8044678:	60b9      	str	r1, [r7, #8]
 804467a:	607a      	str	r2, [r7, #4]
 804467c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 804467e:	2300      	movs	r3, #0
 8044680:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8044682:	68fb      	ldr	r3, [r7, #12]
 8044684:	68ba      	ldr	r2, [r7, #8]
 8044686:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8044688:	68fb      	ldr	r3, [r7, #12]
 804468a:	68fa      	ldr	r2, [r7, #12]
 804468c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 804468e:	68ba      	ldr	r2, [r7, #8]
 8044690:	687b      	ldr	r3, [r7, #4]
 8044692:	429a      	cmp	r2, r3
 8044694:	d812      	bhi.n	80446bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8044696:	687a      	ldr	r2, [r7, #4]
 8044698:	683b      	ldr	r3, [r7, #0]
 804469a:	1ad2      	subs	r2, r2, r3
 804469c:	68fb      	ldr	r3, [r7, #12]
 804469e:	699b      	ldr	r3, [r3, #24]
 80446a0:	429a      	cmp	r2, r3
 80446a2:	d302      	bcc.n	80446aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80446a4:	2301      	movs	r3, #1
 80446a6:	617b      	str	r3, [r7, #20]
 80446a8:	e01b      	b.n	80446e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80446aa:	4b10      	ldr	r3, [pc, #64]	; (80446ec <prvInsertTimerInActiveList+0x7c>)
 80446ac:	681a      	ldr	r2, [r3, #0]
 80446ae:	68fb      	ldr	r3, [r7, #12]
 80446b0:	3304      	adds	r3, #4
 80446b2:	4619      	mov	r1, r3
 80446b4:	4610      	mov	r0, r2
 80446b6:	f7fe f916 	bl	80428e6 <vListInsert>
 80446ba:	e012      	b.n	80446e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80446bc:	687a      	ldr	r2, [r7, #4]
 80446be:	683b      	ldr	r3, [r7, #0]
 80446c0:	429a      	cmp	r2, r3
 80446c2:	d206      	bcs.n	80446d2 <prvInsertTimerInActiveList+0x62>
 80446c4:	68ba      	ldr	r2, [r7, #8]
 80446c6:	683b      	ldr	r3, [r7, #0]
 80446c8:	429a      	cmp	r2, r3
 80446ca:	d302      	bcc.n	80446d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80446cc:	2301      	movs	r3, #1
 80446ce:	617b      	str	r3, [r7, #20]
 80446d0:	e007      	b.n	80446e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80446d2:	4b07      	ldr	r3, [pc, #28]	; (80446f0 <prvInsertTimerInActiveList+0x80>)
 80446d4:	681a      	ldr	r2, [r3, #0]
 80446d6:	68fb      	ldr	r3, [r7, #12]
 80446d8:	3304      	adds	r3, #4
 80446da:	4619      	mov	r1, r3
 80446dc:	4610      	mov	r0, r2
 80446de:	f7fe f902 	bl	80428e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80446e2:	697b      	ldr	r3, [r7, #20]
}
 80446e4:	4618      	mov	r0, r3
 80446e6:	3718      	adds	r7, #24
 80446e8:	46bd      	mov	sp, r7
 80446ea:	bd80      	pop	{r7, pc}
 80446ec:	2001b648 	.word	0x2001b648
 80446f0:	2001b644 	.word	0x2001b644

080446f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80446f4:	b580      	push	{r7, lr}
 80446f6:	b08c      	sub	sp, #48	; 0x30
 80446f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80446fa:	e0b0      	b.n	804485e <prvProcessReceivedCommands+0x16a>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80446fc:	68bb      	ldr	r3, [r7, #8]
 80446fe:	2b00      	cmp	r3, #0
 8044700:	da10      	bge.n	8044724 <prvProcessReceivedCommands+0x30>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8044702:	f107 0308 	add.w	r3, r7, #8
 8044706:	3304      	adds	r3, #4
 8044708:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 804470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804470c:	2b00      	cmp	r3, #0
 804470e:	d101      	bne.n	8044714 <prvProcessReceivedCommands+0x20>
 8044710:	b672      	cpsid	i
 8044712:	e7fe      	b.n	8044712 <prvProcessReceivedCommands+0x1e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8044714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8044716:	681b      	ldr	r3, [r3, #0]
 8044718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804471a:	6850      	ldr	r0, [r2, #4]
 804471c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804471e:	6892      	ldr	r2, [r2, #8]
 8044720:	4611      	mov	r1, r2
 8044722:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8044724:	68bb      	ldr	r3, [r7, #8]
 8044726:	2b00      	cmp	r3, #0
 8044728:	f2c0 8098 	blt.w	804485c <prvProcessReceivedCommands+0x168>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 804472c:	693b      	ldr	r3, [r7, #16]
 804472e:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8044730:	6a3b      	ldr	r3, [r7, #32]
 8044732:	695b      	ldr	r3, [r3, #20]
 8044734:	2b00      	cmp	r3, #0
 8044736:	d004      	beq.n	8044742 <prvProcessReceivedCommands+0x4e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8044738:	6a3b      	ldr	r3, [r7, #32]
 804473a:	3304      	adds	r3, #4
 804473c:	4618      	mov	r0, r3
 804473e:	f7fe f90b 	bl	8042958 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8044742:	1d3b      	adds	r3, r7, #4
 8044744:	4618      	mov	r0, r3
 8044746:	f7ff ff73 	bl	8044630 <prvSampleTimeNow>
 804474a:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 804474c:	68bb      	ldr	r3, [r7, #8]
 804474e:	2b09      	cmp	r3, #9
 8044750:	f200 8085 	bhi.w	804485e <prvProcessReceivedCommands+0x16a>
 8044754:	a201      	add	r2, pc, #4	; (adr r2, 804475c <prvProcessReceivedCommands+0x68>)
 8044756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804475a:	bf00      	nop
 804475c:	08044785 	.word	0x08044785
 8044760:	08044785 	.word	0x08044785
 8044764:	08044785 	.word	0x08044785
 8044768:	080447e7 	.word	0x080447e7
 804476c:	080447fb 	.word	0x080447fb
 8044770:	08044833 	.word	0x08044833
 8044774:	08044785 	.word	0x08044785
 8044778:	08044785 	.word	0x08044785
 804477c:	080447e7 	.word	0x080447e7
 8044780:	080447fb 	.word	0x080447fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8044784:	6a3b      	ldr	r3, [r7, #32]
 8044786:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 804478a:	f043 0301 	orr.w	r3, r3, #1
 804478e:	b2da      	uxtb	r2, r3
 8044790:	6a3b      	ldr	r3, [r7, #32]
 8044792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8044796:	68fa      	ldr	r2, [r7, #12]
 8044798:	6a3b      	ldr	r3, [r7, #32]
 804479a:	699b      	ldr	r3, [r3, #24]
 804479c:	18d1      	adds	r1, r2, r3
 804479e:	68fb      	ldr	r3, [r7, #12]
 80447a0:	69fa      	ldr	r2, [r7, #28]
 80447a2:	6a38      	ldr	r0, [r7, #32]
 80447a4:	f7ff ff64 	bl	8044670 <prvInsertTimerInActiveList>
 80447a8:	4603      	mov	r3, r0
 80447aa:	2b00      	cmp	r3, #0
 80447ac:	d057      	beq.n	804485e <prvProcessReceivedCommands+0x16a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80447ae:	6a3b      	ldr	r3, [r7, #32]
 80447b0:	6a1b      	ldr	r3, [r3, #32]
 80447b2:	6a38      	ldr	r0, [r7, #32]
 80447b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80447b6:	6a3b      	ldr	r3, [r7, #32]
 80447b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80447bc:	f003 0304 	and.w	r3, r3, #4
 80447c0:	2b00      	cmp	r3, #0
 80447c2:	d04c      	beq.n	804485e <prvProcessReceivedCommands+0x16a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80447c4:	68fa      	ldr	r2, [r7, #12]
 80447c6:	6a3b      	ldr	r3, [r7, #32]
 80447c8:	699b      	ldr	r3, [r3, #24]
 80447ca:	441a      	add	r2, r3
 80447cc:	2300      	movs	r3, #0
 80447ce:	9300      	str	r3, [sp, #0]
 80447d0:	2300      	movs	r3, #0
 80447d2:	2100      	movs	r1, #0
 80447d4:	6a38      	ldr	r0, [r7, #32]
 80447d6:	f7ff fe27 	bl	8044428 <xTimerGenericCommand>
 80447da:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 80447dc:	69bb      	ldr	r3, [r7, #24]
 80447de:	2b00      	cmp	r3, #0
 80447e0:	d13d      	bne.n	804485e <prvProcessReceivedCommands+0x16a>
 80447e2:	b672      	cpsid	i
 80447e4:	e7fe      	b.n	80447e4 <prvProcessReceivedCommands+0xf0>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80447e6:	6a3b      	ldr	r3, [r7, #32]
 80447e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80447ec:	f023 0301 	bic.w	r3, r3, #1
 80447f0:	b2da      	uxtb	r2, r3
 80447f2:	6a3b      	ldr	r3, [r7, #32]
 80447f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80447f8:	e031      	b.n	804485e <prvProcessReceivedCommands+0x16a>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80447fa:	6a3b      	ldr	r3, [r7, #32]
 80447fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8044800:	f043 0301 	orr.w	r3, r3, #1
 8044804:	b2da      	uxtb	r2, r3
 8044806:	6a3b      	ldr	r3, [r7, #32]
 8044808:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 804480c:	68fa      	ldr	r2, [r7, #12]
 804480e:	6a3b      	ldr	r3, [r7, #32]
 8044810:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8044812:	6a3b      	ldr	r3, [r7, #32]
 8044814:	699b      	ldr	r3, [r3, #24]
 8044816:	2b00      	cmp	r3, #0
 8044818:	d101      	bne.n	804481e <prvProcessReceivedCommands+0x12a>
 804481a:	b672      	cpsid	i
 804481c:	e7fe      	b.n	804481c <prvProcessReceivedCommands+0x128>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 804481e:	6a3b      	ldr	r3, [r7, #32]
 8044820:	699a      	ldr	r2, [r3, #24]
 8044822:	69fb      	ldr	r3, [r7, #28]
 8044824:	18d1      	adds	r1, r2, r3
 8044826:	69fb      	ldr	r3, [r7, #28]
 8044828:	69fa      	ldr	r2, [r7, #28]
 804482a:	6a38      	ldr	r0, [r7, #32]
 804482c:	f7ff ff20 	bl	8044670 <prvInsertTimerInActiveList>
					break;
 8044830:	e015      	b.n	804485e <prvProcessReceivedCommands+0x16a>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8044832:	6a3b      	ldr	r3, [r7, #32]
 8044834:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8044838:	f003 0302 	and.w	r3, r3, #2
 804483c:	2b00      	cmp	r3, #0
 804483e:	d103      	bne.n	8044848 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8044840:	6a38      	ldr	r0, [r7, #32]
 8044842:	f7fd fefb 	bl	804263c <vPortFree>
 8044846:	e00a      	b.n	804485e <prvProcessReceivedCommands+0x16a>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8044848:	6a3b      	ldr	r3, [r7, #32]
 804484a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 804484e:	f023 0301 	bic.w	r3, r3, #1
 8044852:	b2da      	uxtb	r2, r3
 8044854:	6a3b      	ldr	r3, [r7, #32]
 8044856:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 804485a:	e000      	b.n	804485e <prvProcessReceivedCommands+0x16a>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 804485c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 804485e:	4b08      	ldr	r3, [pc, #32]	; (8044880 <prvProcessReceivedCommands+0x18c>)
 8044860:	681b      	ldr	r3, [r3, #0]
 8044862:	f107 0108 	add.w	r1, r7, #8
 8044866:	2200      	movs	r2, #0
 8044868:	4618      	mov	r0, r3
 804486a:	f7fe fcc4 	bl	80431f6 <xQueueReceive>
 804486e:	4603      	mov	r3, r0
 8044870:	2b00      	cmp	r3, #0
 8044872:	f47f af43 	bne.w	80446fc <prvProcessReceivedCommands+0x8>
	}
}
 8044876:	bf00      	nop
 8044878:	3728      	adds	r7, #40	; 0x28
 804487a:	46bd      	mov	sp, r7
 804487c:	bd80      	pop	{r7, pc}
 804487e:	bf00      	nop
 8044880:	2001b64c 	.word	0x2001b64c

08044884 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8044884:	b580      	push	{r7, lr}
 8044886:	b088      	sub	sp, #32
 8044888:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 804488a:	e03f      	b.n	804490c <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 804488c:	4b29      	ldr	r3, [pc, #164]	; (8044934 <prvSwitchTimerLists+0xb0>)
 804488e:	681b      	ldr	r3, [r3, #0]
 8044890:	68db      	ldr	r3, [r3, #12]
 8044892:	681b      	ldr	r3, [r3, #0]
 8044894:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8044896:	4b27      	ldr	r3, [pc, #156]	; (8044934 <prvSwitchTimerLists+0xb0>)
 8044898:	681b      	ldr	r3, [r3, #0]
 804489a:	68db      	ldr	r3, [r3, #12]
 804489c:	68db      	ldr	r3, [r3, #12]
 804489e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80448a0:	68fb      	ldr	r3, [r7, #12]
 80448a2:	3304      	adds	r3, #4
 80448a4:	4618      	mov	r0, r3
 80448a6:	f7fe f857 	bl	8042958 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80448aa:	68fb      	ldr	r3, [r7, #12]
 80448ac:	6a1b      	ldr	r3, [r3, #32]
 80448ae:	68f8      	ldr	r0, [r7, #12]
 80448b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80448b2:	68fb      	ldr	r3, [r7, #12]
 80448b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80448b8:	f003 0304 	and.w	r3, r3, #4
 80448bc:	2b00      	cmp	r3, #0
 80448be:	d025      	beq.n	804490c <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80448c0:	68fb      	ldr	r3, [r7, #12]
 80448c2:	699b      	ldr	r3, [r3, #24]
 80448c4:	693a      	ldr	r2, [r7, #16]
 80448c6:	4413      	add	r3, r2
 80448c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80448ca:	68ba      	ldr	r2, [r7, #8]
 80448cc:	693b      	ldr	r3, [r7, #16]
 80448ce:	429a      	cmp	r2, r3
 80448d0:	d90e      	bls.n	80448f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80448d2:	68fb      	ldr	r3, [r7, #12]
 80448d4:	68ba      	ldr	r2, [r7, #8]
 80448d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80448d8:	68fb      	ldr	r3, [r7, #12]
 80448da:	68fa      	ldr	r2, [r7, #12]
 80448dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80448de:	4b15      	ldr	r3, [pc, #84]	; (8044934 <prvSwitchTimerLists+0xb0>)
 80448e0:	681a      	ldr	r2, [r3, #0]
 80448e2:	68fb      	ldr	r3, [r7, #12]
 80448e4:	3304      	adds	r3, #4
 80448e6:	4619      	mov	r1, r3
 80448e8:	4610      	mov	r0, r2
 80448ea:	f7fd fffc 	bl	80428e6 <vListInsert>
 80448ee:	e00d      	b.n	804490c <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80448f0:	2300      	movs	r3, #0
 80448f2:	9300      	str	r3, [sp, #0]
 80448f4:	2300      	movs	r3, #0
 80448f6:	693a      	ldr	r2, [r7, #16]
 80448f8:	2100      	movs	r1, #0
 80448fa:	68f8      	ldr	r0, [r7, #12]
 80448fc:	f7ff fd94 	bl	8044428 <xTimerGenericCommand>
 8044900:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8044902:	687b      	ldr	r3, [r7, #4]
 8044904:	2b00      	cmp	r3, #0
 8044906:	d101      	bne.n	804490c <prvSwitchTimerLists+0x88>
 8044908:	b672      	cpsid	i
 804490a:	e7fe      	b.n	804490a <prvSwitchTimerLists+0x86>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 804490c:	4b09      	ldr	r3, [pc, #36]	; (8044934 <prvSwitchTimerLists+0xb0>)
 804490e:	681b      	ldr	r3, [r3, #0]
 8044910:	681b      	ldr	r3, [r3, #0]
 8044912:	2b00      	cmp	r3, #0
 8044914:	d1ba      	bne.n	804488c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8044916:	4b07      	ldr	r3, [pc, #28]	; (8044934 <prvSwitchTimerLists+0xb0>)
 8044918:	681b      	ldr	r3, [r3, #0]
 804491a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 804491c:	4b06      	ldr	r3, [pc, #24]	; (8044938 <prvSwitchTimerLists+0xb4>)
 804491e:	681b      	ldr	r3, [r3, #0]
 8044920:	4a04      	ldr	r2, [pc, #16]	; (8044934 <prvSwitchTimerLists+0xb0>)
 8044922:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8044924:	4a04      	ldr	r2, [pc, #16]	; (8044938 <prvSwitchTimerLists+0xb4>)
 8044926:	697b      	ldr	r3, [r7, #20]
 8044928:	6013      	str	r3, [r2, #0]
}
 804492a:	bf00      	nop
 804492c:	3718      	adds	r7, #24
 804492e:	46bd      	mov	sp, r7
 8044930:	bd80      	pop	{r7, pc}
 8044932:	bf00      	nop
 8044934:	2001b644 	.word	0x2001b644
 8044938:	2001b648 	.word	0x2001b648

0804493c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 804493c:	b580      	push	{r7, lr}
 804493e:	b082      	sub	sp, #8
 8044940:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8044942:	f7fe f883 	bl	8042a4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8044946:	4b15      	ldr	r3, [pc, #84]	; (804499c <prvCheckForValidListAndQueue+0x60>)
 8044948:	681b      	ldr	r3, [r3, #0]
 804494a:	2b00      	cmp	r3, #0
 804494c:	d120      	bne.n	8044990 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 804494e:	4814      	ldr	r0, [pc, #80]	; (80449a0 <prvCheckForValidListAndQueue+0x64>)
 8044950:	f7fd ff78 	bl	8042844 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8044954:	4813      	ldr	r0, [pc, #76]	; (80449a4 <prvCheckForValidListAndQueue+0x68>)
 8044956:	f7fd ff75 	bl	8042844 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 804495a:	4b13      	ldr	r3, [pc, #76]	; (80449a8 <prvCheckForValidListAndQueue+0x6c>)
 804495c:	4a10      	ldr	r2, [pc, #64]	; (80449a0 <prvCheckForValidListAndQueue+0x64>)
 804495e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8044960:	4b12      	ldr	r3, [pc, #72]	; (80449ac <prvCheckForValidListAndQueue+0x70>)
 8044962:	4a10      	ldr	r2, [pc, #64]	; (80449a4 <prvCheckForValidListAndQueue+0x68>)
 8044964:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8044966:	2300      	movs	r3, #0
 8044968:	9300      	str	r3, [sp, #0]
 804496a:	4b11      	ldr	r3, [pc, #68]	; (80449b0 <prvCheckForValidListAndQueue+0x74>)
 804496c:	4a11      	ldr	r2, [pc, #68]	; (80449b4 <prvCheckForValidListAndQueue+0x78>)
 804496e:	2110      	movs	r1, #16
 8044970:	2005      	movs	r0, #5
 8044972:	f7fe faa2 	bl	8042eba <xQueueGenericCreateStatic>
 8044976:	4602      	mov	r2, r0
 8044978:	4b08      	ldr	r3, [pc, #32]	; (804499c <prvCheckForValidListAndQueue+0x60>)
 804497a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 804497c:	4b07      	ldr	r3, [pc, #28]	; (804499c <prvCheckForValidListAndQueue+0x60>)
 804497e:	681b      	ldr	r3, [r3, #0]
 8044980:	2b00      	cmp	r3, #0
 8044982:	d005      	beq.n	8044990 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8044984:	4b05      	ldr	r3, [pc, #20]	; (804499c <prvCheckForValidListAndQueue+0x60>)
 8044986:	681b      	ldr	r3, [r3, #0]
 8044988:	490b      	ldr	r1, [pc, #44]	; (80449b8 <prvCheckForValidListAndQueue+0x7c>)
 804498a:	4618      	mov	r0, r3
 804498c:	f7fe fdfa 	bl	8043584 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8044990:	f7fe f870 	bl	8042a74 <vPortExitCritical>
}
 8044994:	bf00      	nop
 8044996:	46bd      	mov	sp, r7
 8044998:	bd80      	pop	{r7, pc}
 804499a:	bf00      	nop
 804499c:	2001b64c 	.word	0x2001b64c
 80449a0:	2001b61c 	.word	0x2001b61c
 80449a4:	2001b630 	.word	0x2001b630
 80449a8:	2001b644 	.word	0x2001b644
 80449ac:	2001b648 	.word	0x2001b648
 80449b0:	2001b6a8 	.word	0x2001b6a8
 80449b4:	2001b658 	.word	0x2001b658
 80449b8:	08044b14 	.word	0x08044b14

080449bc <__libc_init_array>:
 80449bc:	b570      	push	{r4, r5, r6, lr}
 80449be:	4e0d      	ldr	r6, [pc, #52]	; (80449f4 <__libc_init_array+0x38>)
 80449c0:	2500      	movs	r5, #0
 80449c2:	4c0d      	ldr	r4, [pc, #52]	; (80449f8 <__libc_init_array+0x3c>)
 80449c4:	1ba4      	subs	r4, r4, r6
 80449c6:	10a4      	asrs	r4, r4, #2
 80449c8:	42a5      	cmp	r5, r4
 80449ca:	d109      	bne.n	80449e0 <__libc_init_array+0x24>
 80449cc:	4e0b      	ldr	r6, [pc, #44]	; (80449fc <__libc_init_array+0x40>)
 80449ce:	2500      	movs	r5, #0
 80449d0:	4c0b      	ldr	r4, [pc, #44]	; (8044a00 <__libc_init_array+0x44>)
 80449d2:	f000 f82b 	bl	8044a2c <_init>
 80449d6:	1ba4      	subs	r4, r4, r6
 80449d8:	10a4      	asrs	r4, r4, #2
 80449da:	42a5      	cmp	r5, r4
 80449dc:	d105      	bne.n	80449ea <__libc_init_array+0x2e>
 80449de:	bd70      	pop	{r4, r5, r6, pc}
 80449e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80449e4:	3501      	adds	r5, #1
 80449e6:	4798      	blx	r3
 80449e8:	e7ee      	b.n	80449c8 <__libc_init_array+0xc>
 80449ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80449ee:	3501      	adds	r5, #1
 80449f0:	4798      	blx	r3
 80449f2:	e7f2      	b.n	80449da <__libc_init_array+0x1e>
 80449f4:	08044bc0 	.word	0x08044bc0
 80449f8:	08044bc0 	.word	0x08044bc0
 80449fc:	08044bc0 	.word	0x08044bc0
 8044a00:	08044bc4 	.word	0x08044bc4

08044a04 <memcpy>:
 8044a04:	1e43      	subs	r3, r0, #1
 8044a06:	440a      	add	r2, r1
 8044a08:	b510      	push	{r4, lr}
 8044a0a:	4291      	cmp	r1, r2
 8044a0c:	d100      	bne.n	8044a10 <memcpy+0xc>
 8044a0e:	bd10      	pop	{r4, pc}
 8044a10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8044a14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8044a18:	e7f7      	b.n	8044a0a <memcpy+0x6>

08044a1a <memset>:
 8044a1a:	4402      	add	r2, r0
 8044a1c:	4603      	mov	r3, r0
 8044a1e:	4293      	cmp	r3, r2
 8044a20:	d100      	bne.n	8044a24 <memset+0xa>
 8044a22:	4770      	bx	lr
 8044a24:	f803 1b01 	strb.w	r1, [r3], #1
 8044a28:	e7f9      	b.n	8044a1e <memset+0x4>
	...

08044a2c <_init>:
 8044a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8044a2e:	bf00      	nop
 8044a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8044a32:	bc08      	pop	{r3}
 8044a34:	469e      	mov	lr, r3
 8044a36:	4770      	bx	lr

08044a38 <_fini>:
 8044a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8044a3a:	bf00      	nop
 8044a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8044a3e:	bc08      	pop	{r3}
 8044a40:	469e      	mov	lr, r3
 8044a42:	4770      	bx	lr
 8044a44:	0000      	movs	r0, r0
	...

08044a48 <__SECURE_RegisterCallback_veneer>:
 8044a48:	b401      	push	{r0}
 8044a4a:	4802      	ldr	r0, [pc, #8]	; (8044a54 <__SECURE_RegisterCallback_veneer+0xc>)
 8044a4c:	4684      	mov	ip, r0
 8044a4e:	bc01      	pop	{r0}
 8044a50:	4760      	bx	ip
 8044a52:	bf00      	nop
 8044a54:	0c03e031 	.word	0x0c03e031

08044a58 <__SecureContext_Init_veneer>:
 8044a58:	b401      	push	{r0}
 8044a5a:	4802      	ldr	r0, [pc, #8]	; (8044a64 <__SecureContext_Init_veneer+0xc>)
 8044a5c:	4684      	mov	ip, r0
 8044a5e:	bc01      	pop	{r0}
 8044a60:	4760      	bx	ip
 8044a62:	bf00      	nop
 8044a64:	0c03e021 	.word	0x0c03e021

08044a68 <__SecureContext_AllocateContext_veneer>:
 8044a68:	b401      	push	{r0}
 8044a6a:	4802      	ldr	r0, [pc, #8]	; (8044a74 <__SecureContext_AllocateContext_veneer+0xc>)
 8044a6c:	4684      	mov	ip, r0
 8044a6e:	bc01      	pop	{r0}
 8044a70:	4760      	bx	ip
 8044a72:	bf00      	nop
 8044a74:	0c03e011 	.word	0x0c03e011

08044a78 <__SecureInit_DePrioritizeNSExceptions_veneer>:
 8044a78:	b401      	push	{r0}
 8044a7a:	4802      	ldr	r0, [pc, #8]	; (8044a84 <__SecureInit_DePrioritizeNSExceptions_veneer+0xc>)
 8044a7c:	4684      	mov	ip, r0
 8044a7e:	bc01      	pop	{r0}
 8044a80:	4760      	bx	ip
 8044a82:	bf00      	nop
 8044a84:	0c03e001 	.word	0x0c03e001

08044a88 <__SECURE_LEDToggle_veneer>:
 8044a88:	b401      	push	{r0}
 8044a8a:	4802      	ldr	r0, [pc, #8]	; (8044a94 <__SECURE_LEDToggle_veneer+0xc>)
 8044a8c:	4684      	mov	ip, r0
 8044a8e:	bc01      	pop	{r0}
 8044a90:	4760      	bx	ip
 8044a92:	bf00      	nop
 8044a94:	0c03e019 	.word	0x0c03e019

08044a98 <__SecureContext_SaveContext_veneer>:
 8044a98:	b401      	push	{r0}
 8044a9a:	4802      	ldr	r0, [pc, #8]	; (8044aa4 <__SecureContext_SaveContext_veneer+0xc>)
 8044a9c:	4684      	mov	ip, r0
 8044a9e:	bc01      	pop	{r0}
 8044aa0:	4760      	bx	ip
 8044aa2:	bf00      	nop
 8044aa4:	0c03e039 	.word	0x0c03e039

08044aa8 <__SecureContext_LoadContext_veneer>:
 8044aa8:	b401      	push	{r0}
 8044aaa:	4802      	ldr	r0, [pc, #8]	; (8044ab4 <__SecureContext_LoadContext_veneer+0xc>)
 8044aac:	4684      	mov	ip, r0
 8044aae:	bc01      	pop	{r0}
 8044ab0:	4760      	bx	ip
 8044ab2:	bf00      	nop
 8044ab4:	0c03e029 	.word	0x0c03e029

08044ab8 <__SecureContext_FreeContext_veneer>:
 8044ab8:	b401      	push	{r0}
 8044aba:	4802      	ldr	r0, [pc, #8]	; (8044ac4 <__SecureContext_FreeContext_veneer+0xc>)
 8044abc:	4684      	mov	ip, r0
 8044abe:	bc01      	pop	{r0}
 8044ac0:	4760      	bx	ip
 8044ac2:	bf00      	nop
 8044ac4:	0c03e049 	.word	0x0c03e049

08044ac8 <__SECURE_SystemCoreClockUpdate_veneer>:
 8044ac8:	b401      	push	{r0}
 8044aca:	4802      	ldr	r0, [pc, #8]	; (8044ad4 <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 8044acc:	4684      	mov	ip, r0
 8044ace:	bc01      	pop	{r0}
 8044ad0:	4760      	bx	ip
 8044ad2:	bf00      	nop
 8044ad4:	0c03e009 	.word	0x0c03e009
