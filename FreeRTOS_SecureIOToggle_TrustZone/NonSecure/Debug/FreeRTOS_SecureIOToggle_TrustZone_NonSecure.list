
FreeRTOS_SecureIOToggle_TrustZone_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004848  08040200  08040200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08044a48  08044a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08044b30  08044b30  00018028  2**0
                  CONTENTS
  4 .ARM          00000000  08044b30  08044b30  00018028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08044b30  08044b30  00018028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08044b30  08044b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08044b38  08044b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20018000  08044b40  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003768  20018028  08044b68  00018028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001b790  08044b68  0001b790  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00018028  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001120d  00000000  00000000  0001805e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00018f9c  00000000  00000000  0002926b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002c77  00000000  00000000  00042207  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001430  00000000  00000000  00044e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00112888  00000000  00000000  000462b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000012d8  00000000  00000000  00158b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  000032f0  00000000  00000000  00159e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015d100  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005310  00000000  00000000  0015d17c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08040200 <__do_global_dtors_aux>:
 8040200:	b510      	push	{r4, lr}
 8040202:	4c05      	ldr	r4, [pc, #20]	; (8040218 <__do_global_dtors_aux+0x18>)
 8040204:	7823      	ldrb	r3, [r4, #0]
 8040206:	b933      	cbnz	r3, 8040216 <__do_global_dtors_aux+0x16>
 8040208:	4b04      	ldr	r3, [pc, #16]	; (804021c <__do_global_dtors_aux+0x1c>)
 804020a:	b113      	cbz	r3, 8040212 <__do_global_dtors_aux+0x12>
 804020c:	4804      	ldr	r0, [pc, #16]	; (8040220 <__do_global_dtors_aux+0x20>)
 804020e:	e000      	b.n	8040212 <__do_global_dtors_aux+0x12>
 8040210:	bf00      	nop
 8040212:	2301      	movs	r3, #1
 8040214:	7023      	strb	r3, [r4, #0]
 8040216:	bd10      	pop	{r4, pc}
 8040218:	20018028 	.word	0x20018028
 804021c:	00000000 	.word	0x00000000
 8040220:	0804499c 	.word	0x0804499c

08040224 <frame_dummy>:
 8040224:	b508      	push	{r3, lr}
 8040226:	4b03      	ldr	r3, [pc, #12]	; (8040234 <frame_dummy+0x10>)
 8040228:	b11b      	cbz	r3, 8040232 <frame_dummy+0xe>
 804022a:	4903      	ldr	r1, [pc, #12]	; (8040238 <frame_dummy+0x14>)
 804022c:	4803      	ldr	r0, [pc, #12]	; (804023c <frame_dummy+0x18>)
 804022e:	e000      	b.n	8040232 <frame_dummy+0xe>
 8040230:	bf00      	nop
 8040232:	bd08      	pop	{r3, pc}
 8040234:	00000000 	.word	0x00000000
 8040238:	2001802c 	.word	0x2001802c
 804023c:	0804499c 	.word	0x0804499c

08040240 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8040240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040278 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8040244:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8040246:	e003      	b.n	8040250 <LoopCopyDataInit>

08040248 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8040248:	4b0c      	ldr	r3, [pc, #48]	; (804027c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 804024a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 804024c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 804024e:	3104      	adds	r1, #4

08040250 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8040250:	480b      	ldr	r0, [pc, #44]	; (8040280 <LoopForever+0xa>)
	ldr	r3, =_edata
 8040252:	4b0c      	ldr	r3, [pc, #48]	; (8040284 <LoopForever+0xe>)
	adds	r2, r0, r1
 8040254:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8040256:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8040258:	d3f6      	bcc.n	8040248 <CopyDataInit>
	ldr	r2, =_sbss
 804025a:	4a0b      	ldr	r2, [pc, #44]	; (8040288 <LoopForever+0x12>)
	b	LoopFillZerobss
 804025c:	e002      	b.n	8040264 <LoopFillZerobss>

0804025e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 804025e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8040260:	f842 3b04 	str.w	r3, [r2], #4

08040264 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8040264:	4b09      	ldr	r3, [pc, #36]	; (804028c <LoopForever+0x16>)
	cmp	r2, r3
 8040266:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8040268:	d3f9      	bcc.n	804025e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 804026a:	f000 f9e3 	bl	8040634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 804026e:	f004 fb5d 	bl	804492c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8040272:	f000 f80f 	bl	8040294 <main>

08040276 <LoopForever>:

LoopForever:
    b LoopForever
 8040276:	e7fe      	b.n	8040276 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8040278:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 804027c:	08044b40 	.word	0x08044b40
	ldr	r0, =_sdata
 8040280:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 8040284:	20018028 	.word	0x20018028
	ldr	r2, =_sbss
 8040288:	20018028 	.word	0x20018028
	ldr	r3, = _ebss
 804028c:	2001b790 	.word	0x2001b790

08040290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8040290:	e7fe      	b.n	8040290 <ADC1_2_IRQHandler>
	...

08040294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040294:	b580      	push	{r7, lr}
 8040296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040298:	f000 f9e0 	bl	804065c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 804029c:	f000 f830 	bl	8040300 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Register SecureFault callback defined in non-secure and to be called by secure handler */
  SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
 80402a0:	490f      	ldr	r1, [pc, #60]	; (80402e0 <main+0x4c>)
 80402a2:	2000      	movs	r0, #0
 80402a4:	f004 fbb0 	bl	8044a08 <__SECURE_RegisterCallback_veneer>

  /* Register SecureError callback defined in non-secure and to be called by secure handler */
  SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
 80402a8:	490e      	ldr	r1, [pc, #56]	; (80402e4 <main+0x50>)
 80402aa:	2001      	movs	r0, #1
 80402ac:	f004 fbac 	bl	8044a08 <__SECURE_RegisterCallback_veneer>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  /* Initialize PA.09 to drive external LED (LED3) */
  BSP_LED_Init(LED3);
 80402b0:	2002      	movs	r0, #2
 80402b2:	f000 f947 	bl	8040544 <BSP_LED_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80402b6:	f001 ff57 	bl	8042168 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Work_Thread */
  Work_ThreadHandle = osThreadNew(Start_Work, NULL, &Work_Thread_attributes);
 80402ba:	4a0b      	ldr	r2, [pc, #44]	; (80402e8 <main+0x54>)
 80402bc:	2100      	movs	r1, #0
 80402be:	480b      	ldr	r0, [pc, #44]	; (80402ec <main+0x58>)
 80402c0:	f001 ffbc 	bl	804223c <osThreadNew>
 80402c4:	4602      	mov	r2, r0
 80402c6:	4b0a      	ldr	r3, [pc, #40]	; (80402f0 <main+0x5c>)
 80402c8:	601a      	str	r2, [r3, #0]

  /* creation of Connection_Thre */
  Connection_ThreHandle = osThreadNew(Establish_Connection, NULL, &Connection_Thre_attributes);
 80402ca:	4a0a      	ldr	r2, [pc, #40]	; (80402f4 <main+0x60>)
 80402cc:	2100      	movs	r1, #0
 80402ce:	480a      	ldr	r0, [pc, #40]	; (80402f8 <main+0x64>)
 80402d0:	f001 ffb4 	bl	804223c <osThreadNew>
 80402d4:	4602      	mov	r2, r0
 80402d6:	4b09      	ldr	r3, [pc, #36]	; (80402fc <main+0x68>)
 80402d8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80402da:	f001 ff79 	bl	80421d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80402de:	e7fe      	b.n	80402de <main+0x4a>
 80402e0:	080403a3 	.word	0x080403a3
 80402e4:	080403af 	.word	0x080403af
 80402e8:	08044a8c 	.word	0x08044a8c
 80402ec:	080403bb 	.word	0x080403bb
 80402f0:	2001b6fc 	.word	0x2001b6fc
 80402f4:	08044ab0 	.word	0x08044ab0
 80402f8:	080403d7 	.word	0x080403d7
 80402fc:	2001b6f8 	.word	0x2001b6f8

08040300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040300:	b580      	push	{r7, lr}
 8040302:	b098      	sub	sp, #96	; 0x60
 8040304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8040306:	f107 0318 	add.w	r3, r7, #24
 804030a:	2248      	movs	r2, #72	; 0x48
 804030c:	2100      	movs	r1, #0
 804030e:	4618      	mov	r0, r3
 8040310:	f004 fb3b 	bl	804498a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040314:	1d3b      	adds	r3, r7, #4
 8040316:	2200      	movs	r2, #0
 8040318:	601a      	str	r2, [r3, #0]
 804031a:	605a      	str	r2, [r3, #4]
 804031c:	609a      	str	r2, [r3, #8]
 804031e:	60da      	str	r2, [r3, #12]
 8040320:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8040322:	2000      	movs	r0, #0
 8040324:	f000 fc74 	bl	8040c10 <HAL_PWREx_ControlVoltageScaling>
 8040328:	4603      	mov	r3, r0
 804032a:	2b00      	cmp	r3, #0
 804032c:	d001      	beq.n	8040332 <SystemClock_Config+0x32>
  {
    Error_Handler();
 804032e:	f000 f871 	bl	8040414 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8040332:	2310      	movs	r3, #16
 8040334:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8040336:	2301      	movs	r3, #1
 8040338:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 804033a:	2300      	movs	r3, #0
 804033c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 804033e:	2360      	movs	r3, #96	; 0x60
 8040340:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8040342:	2302      	movs	r3, #2
 8040344:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8040346:	2301      	movs	r3, #1
 8040348:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 804034a:	2301      	movs	r3, #1
 804034c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 804034e:	2337      	movs	r3, #55	; 0x37
 8040350:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8040352:	2307      	movs	r3, #7
 8040354:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8040356:	2302      	movs	r3, #2
 8040358:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 804035a:	2302      	movs	r3, #2
 804035c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804035e:	f107 0318 	add.w	r3, r7, #24
 8040362:	4618      	mov	r0, r3
 8040364:	f000 fcd4 	bl	8040d10 <HAL_RCC_OscConfig>
 8040368:	4603      	mov	r3, r0
 804036a:	2b00      	cmp	r3, #0
 804036c:	d001      	beq.n	8040372 <SystemClock_Config+0x72>
  {
    Error_Handler();
 804036e:	f000 f851 	bl	8040414 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8040372:	230f      	movs	r3, #15
 8040374:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8040376:	2303      	movs	r3, #3
 8040378:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 804037a:	2300      	movs	r3, #0
 804037c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 804037e:	2300      	movs	r3, #0
 8040380:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8040382:	2300      	movs	r3, #0
 8040384:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8040386:	1d3b      	adds	r3, r7, #4
 8040388:	2105      	movs	r1, #5
 804038a:	4618      	mov	r0, r3
 804038c:	f001 f922 	bl	80415d4 <HAL_RCC_ClockConfig>
 8040390:	4603      	mov	r3, r0
 8040392:	2b00      	cmp	r3, #0
 8040394:	d001      	beq.n	804039a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8040396:	f000 f83d 	bl	8040414 <Error_Handler>
  }
}
 804039a:	bf00      	nop
 804039c:	3760      	adds	r7, #96	; 0x60
 804039e:	46bd      	mov	sp, r7
 80403a0:	bd80      	pop	{r7, pc}

080403a2 <SecureFault_Callback>:
  *         done by the non-secure application with non-secure callable API
  *         SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
  * @retval None
  */
void SecureFault_Callback(void)
{
 80403a2:	b580      	push	{r7, lr}
 80403a4:	af00      	add	r7, sp, #0
  /* Go to error infinite loop when Secure fault generated by IDAU/SAU check */
  /* because of illegal access */
  Error_Handler();
 80403a6:	f000 f835 	bl	8040414 <Error_Handler>
}
 80403aa:	bf00      	nop
 80403ac:	bd80      	pop	{r7, pc}

080403ae <SecureError_Callback>:
  *         done by the non-secure application with non-secure callable API
  *         SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
  * @retval None
  */
void SecureError_Callback(void)
{
 80403ae:	b580      	push	{r7, lr}
 80403b0:	af00      	add	r7, sp, #0
  /* Go to error infinite loop when Secure error generated by GTZC check */
  /* because of illegal access */
  Error_Handler();
 80403b2:	f000 f82f 	bl	8040414 <Error_Handler>
}
 80403b6:	bf00      	nop
 80403b8:	bd80      	pop	{r7, pc}

080403ba <Start_Work>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Work */
void Start_Work(void *argument)
{
 80403ba:	b580      	push	{r7, lr}
 80403bc:	b082      	sub	sp, #8
 80403be:	af00      	add	r7, sp, #0
 80403c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  (void) argument;
  
  portALLOCATE_SECURE_CONTEXT (configMINIMAL_SECURE_STACK_SIZE);
 80403c2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80403c6:	f002 fccf 	bl	8042d68 <vPortAllocateSecureContext>
  for (;;)
  {
    /* Toggle secure LED4 (LED_GREEN)
     * Toggling he secure LED is con-
     * sidered to be work*/
    SECURE_LEDToggle();					//against our previous assumptions LED1 cannot be toggled from non-secure area
 80403ca:	f004 fb35 	bl	8044a38 <__SECURE_LEDToggle_veneer>
    osDelay(200);
 80403ce:	20c8      	movs	r0, #200	; 0xc8
 80403d0:	f001 ffda 	bl	8042388 <osDelay>
    SECURE_LEDToggle();					//against our previous assumptions LED1 cannot be toggled from non-secure area
 80403d4:	e7f9      	b.n	80403ca <Start_Work+0x10>

080403d6 <Establish_Connection>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Establish_Connection */
void Establish_Connection(void *argument)
{
 80403d6:	b580      	push	{r7, lr}
 80403d8:	b082      	sub	sp, #8
 80403da:	af00      	add	r7, sp, #0
 80403dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Establish_Connection */
  /* Infinite loop */
  for(;;)
  {
    BSP_LED_Toggle(LED3);
 80403de:	2002      	movs	r0, #2
 80403e0:	f000 f90e 	bl	8040600 <BSP_LED_Toggle>
    osDelay(1000);
 80403e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80403e8:	f001 ffce 	bl	8042388 <osDelay>
    BSP_LED_Toggle(LED3);
 80403ec:	e7f7      	b.n	80403de <Establish_Connection+0x8>
	...

080403f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80403f0:	b580      	push	{r7, lr}
 80403f2:	b082      	sub	sp, #8
 80403f4:	af00      	add	r7, sp, #0
 80403f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80403f8:	687b      	ldr	r3, [r7, #4]
 80403fa:	681b      	ldr	r3, [r3, #0]
 80403fc:	4a04      	ldr	r2, [pc, #16]	; (8040410 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80403fe:	4293      	cmp	r3, r2
 8040400:	d101      	bne.n	8040406 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8040402:	f000 f945 	bl	8040690 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8040406:	bf00      	nop
 8040408:	3708      	adds	r7, #8
 804040a:	46bd      	mov	sp, r7
 804040c:	bd80      	pop	{r7, pc}
 804040e:	bf00      	nop
 8040410:	40001000 	.word	0x40001000

08040414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040414:	b580      	push	{r7, lr}
 8040416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* LED3 on */
  /* Infinite loop */
  while (1)
  {
	  BSP_LED_Toggle(LED3);
 8040418:	2002      	movs	r0, #2
 804041a:	f000 f8f1 	bl	8040600 <BSP_LED_Toggle>
	  osDelay(100);
 804041e:	2064      	movs	r0, #100	; 0x64
 8040420:	f001 ffb2 	bl	8042388 <osDelay>
	  BSP_LED_Toggle(LED3);
 8040424:	e7f8      	b.n	8040418 <Error_Handler+0x4>
	...

08040428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040428:	b580      	push	{r7, lr}
 804042a:	b082      	sub	sp, #8
 804042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 804042e:	4b11      	ldr	r3, [pc, #68]	; (8040474 <HAL_MspInit+0x4c>)
 8040430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040432:	4a10      	ldr	r2, [pc, #64]	; (8040474 <HAL_MspInit+0x4c>)
 8040434:	f043 0301 	orr.w	r3, r3, #1
 8040438:	6613      	str	r3, [r2, #96]	; 0x60
 804043a:	4b0e      	ldr	r3, [pc, #56]	; (8040474 <HAL_MspInit+0x4c>)
 804043c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804043e:	f003 0301 	and.w	r3, r3, #1
 8040442:	607b      	str	r3, [r7, #4]
 8040444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8040446:	4b0b      	ldr	r3, [pc, #44]	; (8040474 <HAL_MspInit+0x4c>)
 8040448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804044a:	4a0a      	ldr	r2, [pc, #40]	; (8040474 <HAL_MspInit+0x4c>)
 804044c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040450:	6593      	str	r3, [r2, #88]	; 0x58
 8040452:	4b08      	ldr	r3, [pc, #32]	; (8040474 <HAL_MspInit+0x4c>)
 8040454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804045a:	603b      	str	r3, [r7, #0]
 804045c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 804045e:	2200      	movs	r2, #0
 8040460:	2107      	movs	r1, #7
 8040462:	f06f 0001 	mvn.w	r0, #1
 8040466:	f000 f9eb 	bl	8040840 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 804046a:	bf00      	nop
 804046c:	3708      	adds	r7, #8
 804046e:	46bd      	mov	sp, r7
 8040470:	bd80      	pop	{r7, pc}
 8040472:	bf00      	nop
 8040474:	40021000 	.word	0x40021000

08040478 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040478:	b580      	push	{r7, lr}
 804047a:	b08c      	sub	sp, #48	; 0x30
 804047c:	af00      	add	r7, sp, #0
 804047e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8040480:	2300      	movs	r3, #0
 8040482:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8040484:	2300      	movs	r3, #0
 8040486:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8040488:	2200      	movs	r2, #0
 804048a:	6879      	ldr	r1, [r7, #4]
 804048c:	2031      	movs	r0, #49	; 0x31
 804048e:	f000 f9d7 	bl	8040840 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8040492:	2031      	movs	r0, #49	; 0x31
 8040494:	f000 f9ee 	bl	8040874 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8040498:	4b1e      	ldr	r3, [pc, #120]	; (8040514 <HAL_InitTick+0x9c>)
 804049a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804049c:	4a1d      	ldr	r2, [pc, #116]	; (8040514 <HAL_InitTick+0x9c>)
 804049e:	f043 0310 	orr.w	r3, r3, #16
 80404a2:	6593      	str	r3, [r2, #88]	; 0x58
 80404a4:	4b1b      	ldr	r3, [pc, #108]	; (8040514 <HAL_InitTick+0x9c>)
 80404a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80404a8:	f003 0310 	and.w	r3, r3, #16
 80404ac:	60fb      	str	r3, [r7, #12]
 80404ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80404b0:	f107 0210 	add.w	r2, r7, #16
 80404b4:	f107 0314 	add.w	r3, r7, #20
 80404b8:	4611      	mov	r1, r2
 80404ba:	4618      	mov	r0, r3
 80404bc:	f001 fa6c 	bl	8041998 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80404c0:	f001 fa56 	bl	8041970 <HAL_RCC_GetPCLK1Freq>
 80404c4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80404c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80404c8:	4a13      	ldr	r2, [pc, #76]	; (8040518 <HAL_InitTick+0xa0>)
 80404ca:	fba2 2303 	umull	r2, r3, r2, r3
 80404ce:	0c9b      	lsrs	r3, r3, #18
 80404d0:	3b01      	subs	r3, #1
 80404d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80404d4:	4b11      	ldr	r3, [pc, #68]	; (804051c <HAL_InitTick+0xa4>)
 80404d6:	4a12      	ldr	r2, [pc, #72]	; (8040520 <HAL_InitTick+0xa8>)
 80404d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80404da:	4b10      	ldr	r3, [pc, #64]	; (804051c <HAL_InitTick+0xa4>)
 80404dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80404e0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80404e2:	4a0e      	ldr	r2, [pc, #56]	; (804051c <HAL_InitTick+0xa4>)
 80404e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80404e6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80404e8:	4b0c      	ldr	r3, [pc, #48]	; (804051c <HAL_InitTick+0xa4>)
 80404ea:	2200      	movs	r2, #0
 80404ec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80404ee:	4b0b      	ldr	r3, [pc, #44]	; (804051c <HAL_InitTick+0xa4>)
 80404f0:	2200      	movs	r2, #0
 80404f2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80404f4:	4809      	ldr	r0, [pc, #36]	; (804051c <HAL_InitTick+0xa4>)
 80404f6:	f001 fb5d 	bl	8041bb4 <HAL_TIM_Base_Init>
 80404fa:	4603      	mov	r3, r0
 80404fc:	2b00      	cmp	r3, #0
 80404fe:	d104      	bne.n	804050a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8040500:	4806      	ldr	r0, [pc, #24]	; (804051c <HAL_InitTick+0xa4>)
 8040502:	f001 fbb9 	bl	8041c78 <HAL_TIM_Base_Start_IT>
 8040506:	4603      	mov	r3, r0
 8040508:	e000      	b.n	804050c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 804050a:	2301      	movs	r3, #1
}
 804050c:	4618      	mov	r0, r3
 804050e:	3730      	adds	r7, #48	; 0x30
 8040510:	46bd      	mov	sp, r7
 8040512:	bd80      	pop	{r7, pc}
 8040514:	40021000 	.word	0x40021000
 8040518:	431bde83 	.word	0x431bde83
 804051c:	2001b700 	.word	0x2001b700
 8040520:	40001000 	.word	0x40001000

08040524 <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040524:	b480      	push	{r7}
 8040526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040528:	e7fe      	b.n	8040528 <MemManage_Handler+0x4>

0804052a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 804052a:	b480      	push	{r7}
 804052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 804052e:	e7fe      	b.n	804052e <UsageFault_Handler+0x4>

08040530 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8040530:	b580      	push	{r7, lr}
 8040532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8040534:	4802      	ldr	r0, [pc, #8]	; (8040540 <TIM6_IRQHandler+0x10>)
 8040536:	f001 fc0f 	bl	8041d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 804053a:	bf00      	nop
 804053c:	bd80      	pop	{r7, pc}
 804053e:	bf00      	nop
 8040540:	2001b700 	.word	0x2001b700

08040544 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8040544:	b580      	push	{r7, lr}
 8040546:	b08a      	sub	sp, #40	; 0x28
 8040548:	af00      	add	r7, sp, #0
 804054a:	4603      	mov	r3, r0
 804054c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED1)
 804054e:	79fb      	ldrb	r3, [r7, #7]
 8040550:	2b00      	cmp	r3, #0
 8040552:	d10c      	bne.n	804056e <BSP_LED_Init+0x2a>
  {
    LED1_GPIO_CLK_ENABLE();
 8040554:	4b27      	ldr	r3, [pc, #156]	; (80405f4 <BSP_LED_Init+0xb0>)
 8040556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040558:	4a26      	ldr	r2, [pc, #152]	; (80405f4 <BSP_LED_Init+0xb0>)
 804055a:	f043 0304 	orr.w	r3, r3, #4
 804055e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040560:	4b24      	ldr	r3, [pc, #144]	; (80405f4 <BSP_LED_Init+0xb0>)
 8040562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040564:	f003 0304 	and.w	r3, r3, #4
 8040568:	613b      	str	r3, [r7, #16]
 804056a:	693b      	ldr	r3, [r7, #16]
 804056c:	e01b      	b.n	80405a6 <BSP_LED_Init+0x62>
  }
  else if (Led == LED2)
 804056e:	79fb      	ldrb	r3, [r7, #7]
 8040570:	2b01      	cmp	r3, #1
 8040572:	d10c      	bne.n	804058e <BSP_LED_Init+0x4a>
  {
    LED2_GPIO_CLK_ENABLE();
 8040574:	4b1f      	ldr	r3, [pc, #124]	; (80405f4 <BSP_LED_Init+0xb0>)
 8040576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040578:	4a1e      	ldr	r2, [pc, #120]	; (80405f4 <BSP_LED_Init+0xb0>)
 804057a:	f043 0302 	orr.w	r3, r3, #2
 804057e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040580:	4b1c      	ldr	r3, [pc, #112]	; (80405f4 <BSP_LED_Init+0xb0>)
 8040582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040584:	f003 0302 	and.w	r3, r3, #2
 8040588:	60fb      	str	r3, [r7, #12]
 804058a:	68fb      	ldr	r3, [r7, #12]
 804058c:	e00b      	b.n	80405a6 <BSP_LED_Init+0x62>
  }
  else /* Led = LED3 */
  {
    LED3_GPIO_CLK_ENABLE();
 804058e:	4b19      	ldr	r3, [pc, #100]	; (80405f4 <BSP_LED_Init+0xb0>)
 8040590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040592:	4a18      	ldr	r2, [pc, #96]	; (80405f4 <BSP_LED_Init+0xb0>)
 8040594:	f043 0301 	orr.w	r3, r3, #1
 8040598:	64d3      	str	r3, [r2, #76]	; 0x4c
 804059a:	4b16      	ldr	r3, [pc, #88]	; (80405f4 <BSP_LED_Init+0xb0>)
 804059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804059e:	f003 0301 	and.w	r3, r3, #1
 80405a2:	60bb      	str	r3, [r7, #8]
 80405a4:	68bb      	ldr	r3, [r7, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 80405a6:	79fb      	ldrb	r3, [r7, #7]
 80405a8:	4a13      	ldr	r2, [pc, #76]	; (80405f8 <BSP_LED_Init+0xb4>)
 80405aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80405ae:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 80405b0:	2301      	movs	r3, #1
 80405b2:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_PULLUP;
 80405b4:	2301      	movs	r3, #1
 80405b6:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80405b8:	2303      	movs	r3, #3
 80405ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 80405bc:	79fb      	ldrb	r3, [r7, #7]
 80405be:	4a0f      	ldr	r2, [pc, #60]	; (80405fc <BSP_LED_Init+0xb8>)
 80405c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80405c4:	f107 0214 	add.w	r2, r7, #20
 80405c8:	4611      	mov	r1, r2
 80405ca:	4618      	mov	r0, r3
 80405cc:	f000 f960 	bl	8040890 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80405d0:	79fb      	ldrb	r3, [r7, #7]
 80405d2:	4a0a      	ldr	r2, [pc, #40]	; (80405fc <BSP_LED_Init+0xb8>)
 80405d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80405d8:	79fb      	ldrb	r3, [r7, #7]
 80405da:	4a07      	ldr	r2, [pc, #28]	; (80405f8 <BSP_LED_Init+0xb4>)
 80405dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80405e0:	2200      	movs	r2, #0
 80405e2:	4619      	mov	r1, r3
 80405e4:	f000 fad4 	bl	8040b90 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80405e8:	2300      	movs	r3, #0
}
 80405ea:	4618      	mov	r0, r3
 80405ec:	3728      	adds	r7, #40	; 0x28
 80405ee:	46bd      	mov	sp, r7
 80405f0:	bd80      	pop	{r7, pc}
 80405f2:	bf00      	nop
 80405f4:	40021000 	.word	0x40021000
 80405f8:	20018000 	.word	0x20018000
 80405fc:	20018008 	.word	0x20018008

08040600 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8040600:	b580      	push	{r7, lr}
 8040602:	b082      	sub	sp, #8
 8040604:	af00      	add	r7, sp, #0
 8040606:	4603      	mov	r3, r0
 8040608:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 804060a:	79fb      	ldrb	r3, [r7, #7]
 804060c:	4a07      	ldr	r2, [pc, #28]	; (804062c <BSP_LED_Toggle+0x2c>)
 804060e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8040612:	79fb      	ldrb	r3, [r7, #7]
 8040614:	4a06      	ldr	r2, [pc, #24]	; (8040630 <BSP_LED_Toggle+0x30>)
 8040616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804061a:	4619      	mov	r1, r3
 804061c:	f000 fad0 	bl	8040bc0 <HAL_GPIO_TogglePin>
  return BSP_ERROR_NONE;
 8040620:	2300      	movs	r3, #0
}
 8040622:	4618      	mov	r0, r3
 8040624:	3708      	adds	r7, #8
 8040626:	46bd      	mov	sp, r7
 8040628:	bd80      	pop	{r7, pc}
 804062a:	bf00      	nop
 804062c:	20018008 	.word	0x20018008
 8040630:	20018000 	.word	0x20018000

08040634 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8040634:	b480      	push	{r7}
 8040636:	af00      	add	r7, sp, #0
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 8040638:	bf00      	nop
 804063a:	46bd      	mov	sp, r7
 804063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040640:	4770      	bx	lr
	...

08040644 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8040644:	b580      	push	{r7, lr}
 8040646:	af00      	add	r7, sp, #0
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 8040648:	f004 f9d6 	bl	80449f8 <__SECURE_SystemCoreClockUpdate_veneer>
 804064c:	4602      	mov	r2, r0
 804064e:	4b02      	ldr	r3, [pc, #8]	; (8040658 <SystemCoreClockUpdate+0x14>)
 8040650:	601a      	str	r2, [r3, #0]
}
 8040652:	bf00      	nop
 8040654:	bd80      	pop	{r7, pc}
 8040656:	bf00      	nop
 8040658:	20018014 	.word	0x20018014

0804065c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 804065c:	b580      	push	{r7, lr}
 804065e:	b082      	sub	sp, #8
 8040660:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8040662:	2300      	movs	r3, #0
 8040664:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8040666:	2004      	movs	r0, #4
 8040668:	f000 f8df 	bl	804082a <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 804066c:	f7ff ffea 	bl	8040644 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8040670:	2000      	movs	r0, #0
 8040672:	f7ff ff01 	bl	8040478 <HAL_InitTick>
 8040676:	4603      	mov	r3, r0
 8040678:	2b00      	cmp	r3, #0
 804067a:	d002      	beq.n	8040682 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 804067c:	2301      	movs	r3, #1
 804067e:	71fb      	strb	r3, [r7, #7]
 8040680:	e001      	b.n	8040686 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8040682:	f7ff fed1 	bl	8040428 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8040686:	79fb      	ldrb	r3, [r7, #7]
}
 8040688:	4618      	mov	r0, r3
 804068a:	3708      	adds	r7, #8
 804068c:	46bd      	mov	sp, r7
 804068e:	bd80      	pop	{r7, pc}

08040690 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040690:	b480      	push	{r7}
 8040692:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8040694:	4b06      	ldr	r3, [pc, #24]	; (80406b0 <HAL_IncTick+0x20>)
 8040696:	781b      	ldrb	r3, [r3, #0]
 8040698:	461a      	mov	r2, r3
 804069a:	4b06      	ldr	r3, [pc, #24]	; (80406b4 <HAL_IncTick+0x24>)
 804069c:	681b      	ldr	r3, [r3, #0]
 804069e:	4413      	add	r3, r2
 80406a0:	4a04      	ldr	r2, [pc, #16]	; (80406b4 <HAL_IncTick+0x24>)
 80406a2:	6013      	str	r3, [r2, #0]
}
 80406a4:	bf00      	nop
 80406a6:	46bd      	mov	sp, r7
 80406a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80406ac:	4770      	bx	lr
 80406ae:	bf00      	nop
 80406b0:	2001801c 	.word	0x2001801c
 80406b4:	2001b74c 	.word	0x2001b74c

080406b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80406b8:	b480      	push	{r7}
 80406ba:	af00      	add	r7, sp, #0
  return uwTick;
 80406bc:	4b03      	ldr	r3, [pc, #12]	; (80406cc <HAL_GetTick+0x14>)
 80406be:	681b      	ldr	r3, [r3, #0]
}
 80406c0:	4618      	mov	r0, r3
 80406c2:	46bd      	mov	sp, r7
 80406c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80406c8:	4770      	bx	lr
 80406ca:	bf00      	nop
 80406cc:	2001b74c 	.word	0x2001b74c

080406d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80406d0:	b480      	push	{r7}
 80406d2:	b085      	sub	sp, #20
 80406d4:	af00      	add	r7, sp, #0
 80406d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80406d8:	687b      	ldr	r3, [r7, #4]
 80406da:	f003 0307 	and.w	r3, r3, #7
 80406de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80406e0:	4b0c      	ldr	r3, [pc, #48]	; (8040714 <__NVIC_SetPriorityGrouping+0x44>)
 80406e2:	68db      	ldr	r3, [r3, #12]
 80406e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80406e6:	68ba      	ldr	r2, [r7, #8]
 80406e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80406ec:	4013      	ands	r3, r2
 80406ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80406f0:	68fb      	ldr	r3, [r7, #12]
 80406f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80406f4:	68bb      	ldr	r3, [r7, #8]
 80406f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80406f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80406fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040702:	4a04      	ldr	r2, [pc, #16]	; (8040714 <__NVIC_SetPriorityGrouping+0x44>)
 8040704:	68bb      	ldr	r3, [r7, #8]
 8040706:	60d3      	str	r3, [r2, #12]
}
 8040708:	bf00      	nop
 804070a:	3714      	adds	r7, #20
 804070c:	46bd      	mov	sp, r7
 804070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040712:	4770      	bx	lr
 8040714:	e000ed00 	.word	0xe000ed00

08040718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040718:	b480      	push	{r7}
 804071a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 804071c:	4b04      	ldr	r3, [pc, #16]	; (8040730 <__NVIC_GetPriorityGrouping+0x18>)
 804071e:	68db      	ldr	r3, [r3, #12]
 8040720:	0a1b      	lsrs	r3, r3, #8
 8040722:	f003 0307 	and.w	r3, r3, #7
}
 8040726:	4618      	mov	r0, r3
 8040728:	46bd      	mov	sp, r7
 804072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804072e:	4770      	bx	lr
 8040730:	e000ed00 	.word	0xe000ed00

08040734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040734:	b480      	push	{r7}
 8040736:	b083      	sub	sp, #12
 8040738:	af00      	add	r7, sp, #0
 804073a:	4603      	mov	r3, r0
 804073c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 804073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040742:	2b00      	cmp	r3, #0
 8040744:	db0b      	blt.n	804075e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8040746:	79fb      	ldrb	r3, [r7, #7]
 8040748:	f003 021f 	and.w	r2, r3, #31
 804074c:	4907      	ldr	r1, [pc, #28]	; (804076c <__NVIC_EnableIRQ+0x38>)
 804074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040752:	095b      	lsrs	r3, r3, #5
 8040754:	2001      	movs	r0, #1
 8040756:	fa00 f202 	lsl.w	r2, r0, r2
 804075a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 804075e:	bf00      	nop
 8040760:	370c      	adds	r7, #12
 8040762:	46bd      	mov	sp, r7
 8040764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040768:	4770      	bx	lr
 804076a:	bf00      	nop
 804076c:	e000e100 	.word	0xe000e100

08040770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040770:	b480      	push	{r7}
 8040772:	b083      	sub	sp, #12
 8040774:	af00      	add	r7, sp, #0
 8040776:	4603      	mov	r3, r0
 8040778:	6039      	str	r1, [r7, #0]
 804077a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 804077c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040780:	2b00      	cmp	r3, #0
 8040782:	db0a      	blt.n	804079a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040784:	683b      	ldr	r3, [r7, #0]
 8040786:	b2da      	uxtb	r2, r3
 8040788:	490c      	ldr	r1, [pc, #48]	; (80407bc <__NVIC_SetPriority+0x4c>)
 804078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804078e:	0152      	lsls	r2, r2, #5
 8040790:	b2d2      	uxtb	r2, r2
 8040792:	440b      	add	r3, r1
 8040794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040798:	e00a      	b.n	80407b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804079a:	683b      	ldr	r3, [r7, #0]
 804079c:	b2da      	uxtb	r2, r3
 804079e:	4908      	ldr	r1, [pc, #32]	; (80407c0 <__NVIC_SetPriority+0x50>)
 80407a0:	79fb      	ldrb	r3, [r7, #7]
 80407a2:	f003 030f 	and.w	r3, r3, #15
 80407a6:	3b04      	subs	r3, #4
 80407a8:	0152      	lsls	r2, r2, #5
 80407aa:	b2d2      	uxtb	r2, r2
 80407ac:	440b      	add	r3, r1
 80407ae:	761a      	strb	r2, [r3, #24]
}
 80407b0:	bf00      	nop
 80407b2:	370c      	adds	r7, #12
 80407b4:	46bd      	mov	sp, r7
 80407b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80407ba:	4770      	bx	lr
 80407bc:	e000e100 	.word	0xe000e100
 80407c0:	e000ed00 	.word	0xe000ed00

080407c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80407c4:	b480      	push	{r7}
 80407c6:	b089      	sub	sp, #36	; 0x24
 80407c8:	af00      	add	r7, sp, #0
 80407ca:	60f8      	str	r0, [r7, #12]
 80407cc:	60b9      	str	r1, [r7, #8]
 80407ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80407d0:	68fb      	ldr	r3, [r7, #12]
 80407d2:	f003 0307 	and.w	r3, r3, #7
 80407d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80407d8:	69fb      	ldr	r3, [r7, #28]
 80407da:	f1c3 0307 	rsb	r3, r3, #7
 80407de:	2b03      	cmp	r3, #3
 80407e0:	bf28      	it	cs
 80407e2:	2303      	movcs	r3, #3
 80407e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80407e6:	69fb      	ldr	r3, [r7, #28]
 80407e8:	3303      	adds	r3, #3
 80407ea:	2b06      	cmp	r3, #6
 80407ec:	d902      	bls.n	80407f4 <NVIC_EncodePriority+0x30>
 80407ee:	69fb      	ldr	r3, [r7, #28]
 80407f0:	3b04      	subs	r3, #4
 80407f2:	e000      	b.n	80407f6 <NVIC_EncodePriority+0x32>
 80407f4:	2300      	movs	r3, #0
 80407f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80407f8:	f04f 32ff 	mov.w	r2, #4294967295
 80407fc:	69bb      	ldr	r3, [r7, #24]
 80407fe:	fa02 f303 	lsl.w	r3, r2, r3
 8040802:	43da      	mvns	r2, r3
 8040804:	68bb      	ldr	r3, [r7, #8]
 8040806:	401a      	ands	r2, r3
 8040808:	697b      	ldr	r3, [r7, #20]
 804080a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 804080c:	f04f 31ff 	mov.w	r1, #4294967295
 8040810:	697b      	ldr	r3, [r7, #20]
 8040812:	fa01 f303 	lsl.w	r3, r1, r3
 8040816:	43d9      	mvns	r1, r3
 8040818:	687b      	ldr	r3, [r7, #4]
 804081a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 804081c:	4313      	orrs	r3, r2
         );
}
 804081e:	4618      	mov	r0, r3
 8040820:	3724      	adds	r7, #36	; 0x24
 8040822:	46bd      	mov	sp, r7
 8040824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040828:	4770      	bx	lr

0804082a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 804082a:	b580      	push	{r7, lr}
 804082c:	b082      	sub	sp, #8
 804082e:	af00      	add	r7, sp, #0
 8040830:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040832:	6878      	ldr	r0, [r7, #4]
 8040834:	f7ff ff4c 	bl	80406d0 <__NVIC_SetPriorityGrouping>
}
 8040838:	bf00      	nop
 804083a:	3708      	adds	r7, #8
 804083c:	46bd      	mov	sp, r7
 804083e:	bd80      	pop	{r7, pc}

08040840 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040840:	b580      	push	{r7, lr}
 8040842:	b086      	sub	sp, #24
 8040844:	af00      	add	r7, sp, #0
 8040846:	4603      	mov	r3, r0
 8040848:	60b9      	str	r1, [r7, #8]
 804084a:	607a      	str	r2, [r7, #4]
 804084c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 804084e:	f7ff ff63 	bl	8040718 <__NVIC_GetPriorityGrouping>
 8040852:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040854:	687a      	ldr	r2, [r7, #4]
 8040856:	68b9      	ldr	r1, [r7, #8]
 8040858:	6978      	ldr	r0, [r7, #20]
 804085a:	f7ff ffb3 	bl	80407c4 <NVIC_EncodePriority>
 804085e:	4602      	mov	r2, r0
 8040860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040864:	4611      	mov	r1, r2
 8040866:	4618      	mov	r0, r3
 8040868:	f7ff ff82 	bl	8040770 <__NVIC_SetPriority>
}
 804086c:	bf00      	nop
 804086e:	3718      	adds	r7, #24
 8040870:	46bd      	mov	sp, r7
 8040872:	bd80      	pop	{r7, pc}

08040874 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040874:	b580      	push	{r7, lr}
 8040876:	b082      	sub	sp, #8
 8040878:	af00      	add	r7, sp, #0
 804087a:	4603      	mov	r3, r0
 804087c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 804087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040882:	4618      	mov	r0, r3
 8040884:	f7ff ff56 	bl	8040734 <__NVIC_EnableIRQ>
}
 8040888:	bf00      	nop
 804088a:	3708      	adds	r7, #8
 804088c:	46bd      	mov	sp, r7
 804088e:	bd80      	pop	{r7, pc}

08040890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040890:	b480      	push	{r7}
 8040892:	b087      	sub	sp, #28
 8040894:	af00      	add	r7, sp, #0
 8040896:	6078      	str	r0, [r7, #4]
 8040898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 804089a:	2300      	movs	r3, #0
 804089c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 804089e:	e158      	b.n	8040b52 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80408a0:	683b      	ldr	r3, [r7, #0]
 80408a2:	681a      	ldr	r2, [r3, #0]
 80408a4:	2101      	movs	r1, #1
 80408a6:	697b      	ldr	r3, [r7, #20]
 80408a8:	fa01 f303 	lsl.w	r3, r1, r3
 80408ac:	4013      	ands	r3, r2
 80408ae:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 80408b0:	68fb      	ldr	r3, [r7, #12]
 80408b2:	2b00      	cmp	r3, #0
 80408b4:	f000 814a 	beq.w	8040b4c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80408b8:	683b      	ldr	r3, [r7, #0]
 80408ba:	685b      	ldr	r3, [r3, #4]
 80408bc:	2b01      	cmp	r3, #1
 80408be:	d00b      	beq.n	80408d8 <HAL_GPIO_Init+0x48>
 80408c0:	683b      	ldr	r3, [r7, #0]
 80408c2:	685b      	ldr	r3, [r3, #4]
 80408c4:	2b02      	cmp	r3, #2
 80408c6:	d007      	beq.n	80408d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80408c8:	683b      	ldr	r3, [r7, #0]
 80408ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80408cc:	2b11      	cmp	r3, #17
 80408ce:	d003      	beq.n	80408d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80408d0:	683b      	ldr	r3, [r7, #0]
 80408d2:	685b      	ldr	r3, [r3, #4]
 80408d4:	2b12      	cmp	r3, #18
 80408d6:	d130      	bne.n	804093a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80408d8:	687b      	ldr	r3, [r7, #4]
 80408da:	689b      	ldr	r3, [r3, #8]
 80408dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80408de:	697b      	ldr	r3, [r7, #20]
 80408e0:	005b      	lsls	r3, r3, #1
 80408e2:	2203      	movs	r2, #3
 80408e4:	fa02 f303 	lsl.w	r3, r2, r3
 80408e8:	43db      	mvns	r3, r3
 80408ea:	693a      	ldr	r2, [r7, #16]
 80408ec:	4013      	ands	r3, r2
 80408ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80408f0:	683b      	ldr	r3, [r7, #0]
 80408f2:	68da      	ldr	r2, [r3, #12]
 80408f4:	697b      	ldr	r3, [r7, #20]
 80408f6:	005b      	lsls	r3, r3, #1
 80408f8:	fa02 f303 	lsl.w	r3, r2, r3
 80408fc:	693a      	ldr	r2, [r7, #16]
 80408fe:	4313      	orrs	r3, r2
 8040900:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8040902:	687b      	ldr	r3, [r7, #4]
 8040904:	693a      	ldr	r2, [r7, #16]
 8040906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040908:	687b      	ldr	r3, [r7, #4]
 804090a:	685b      	ldr	r3, [r3, #4]
 804090c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 804090e:	2201      	movs	r2, #1
 8040910:	697b      	ldr	r3, [r7, #20]
 8040912:	fa02 f303 	lsl.w	r3, r2, r3
 8040916:	43db      	mvns	r3, r3
 8040918:	693a      	ldr	r2, [r7, #16]
 804091a:	4013      	ands	r3, r2
 804091c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 804091e:	683b      	ldr	r3, [r7, #0]
 8040920:	685b      	ldr	r3, [r3, #4]
 8040922:	091b      	lsrs	r3, r3, #4
 8040924:	f003 0201 	and.w	r2, r3, #1
 8040928:	697b      	ldr	r3, [r7, #20]
 804092a:	fa02 f303 	lsl.w	r3, r2, r3
 804092e:	693a      	ldr	r2, [r7, #16]
 8040930:	4313      	orrs	r3, r2
 8040932:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8040934:	687b      	ldr	r3, [r7, #4]
 8040936:	693a      	ldr	r2, [r7, #16]
 8040938:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 804093a:	687b      	ldr	r3, [r7, #4]
 804093c:	68db      	ldr	r3, [r3, #12]
 804093e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8040940:	697b      	ldr	r3, [r7, #20]
 8040942:	005b      	lsls	r3, r3, #1
 8040944:	2203      	movs	r2, #3
 8040946:	fa02 f303 	lsl.w	r3, r2, r3
 804094a:	43db      	mvns	r3, r3
 804094c:	693a      	ldr	r2, [r7, #16]
 804094e:	4013      	ands	r3, r2
 8040950:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8040952:	683b      	ldr	r3, [r7, #0]
 8040954:	689a      	ldr	r2, [r3, #8]
 8040956:	697b      	ldr	r3, [r7, #20]
 8040958:	005b      	lsls	r3, r3, #1
 804095a:	fa02 f303 	lsl.w	r3, r2, r3
 804095e:	693a      	ldr	r2, [r7, #16]
 8040960:	4313      	orrs	r3, r2
 8040962:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8040964:	687b      	ldr	r3, [r7, #4]
 8040966:	693a      	ldr	r2, [r7, #16]
 8040968:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 804096a:	683b      	ldr	r3, [r7, #0]
 804096c:	685b      	ldr	r3, [r3, #4]
 804096e:	2b02      	cmp	r3, #2
 8040970:	d003      	beq.n	804097a <HAL_GPIO_Init+0xea>
 8040972:	683b      	ldr	r3, [r7, #0]
 8040974:	685b      	ldr	r3, [r3, #4]
 8040976:	2b12      	cmp	r3, #18
 8040978:	d123      	bne.n	80409c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 804097a:	697b      	ldr	r3, [r7, #20]
 804097c:	08da      	lsrs	r2, r3, #3
 804097e:	687b      	ldr	r3, [r7, #4]
 8040980:	3208      	adds	r2, #8
 8040982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040986:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8040988:	697b      	ldr	r3, [r7, #20]
 804098a:	f003 0307 	and.w	r3, r3, #7
 804098e:	009b      	lsls	r3, r3, #2
 8040990:	220f      	movs	r2, #15
 8040992:	fa02 f303 	lsl.w	r3, r2, r3
 8040996:	43db      	mvns	r3, r3
 8040998:	693a      	ldr	r2, [r7, #16]
 804099a:	4013      	ands	r3, r2
 804099c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 804099e:	683b      	ldr	r3, [r7, #0]
 80409a0:	691a      	ldr	r2, [r3, #16]
 80409a2:	697b      	ldr	r3, [r7, #20]
 80409a4:	f003 0307 	and.w	r3, r3, #7
 80409a8:	009b      	lsls	r3, r3, #2
 80409aa:	fa02 f303 	lsl.w	r3, r2, r3
 80409ae:	693a      	ldr	r2, [r7, #16]
 80409b0:	4313      	orrs	r3, r2
 80409b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80409b4:	697b      	ldr	r3, [r7, #20]
 80409b6:	08da      	lsrs	r2, r3, #3
 80409b8:	687b      	ldr	r3, [r7, #4]
 80409ba:	3208      	adds	r2, #8
 80409bc:	6939      	ldr	r1, [r7, #16]
 80409be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80409c2:	687b      	ldr	r3, [r7, #4]
 80409c4:	681b      	ldr	r3, [r3, #0]
 80409c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80409c8:	697b      	ldr	r3, [r7, #20]
 80409ca:	005b      	lsls	r3, r3, #1
 80409cc:	2203      	movs	r2, #3
 80409ce:	fa02 f303 	lsl.w	r3, r2, r3
 80409d2:	43db      	mvns	r3, r3
 80409d4:	693a      	ldr	r2, [r7, #16]
 80409d6:	4013      	ands	r3, r2
 80409d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80409da:	683b      	ldr	r3, [r7, #0]
 80409dc:	685b      	ldr	r3, [r3, #4]
 80409de:	f003 0203 	and.w	r2, r3, #3
 80409e2:	697b      	ldr	r3, [r7, #20]
 80409e4:	005b      	lsls	r3, r3, #1
 80409e6:	fa02 f303 	lsl.w	r3, r2, r3
 80409ea:	693a      	ldr	r2, [r7, #16]
 80409ec:	4313      	orrs	r3, r2
 80409ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80409f0:	687b      	ldr	r3, [r7, #4]
 80409f2:	693a      	ldr	r2, [r7, #16]
 80409f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80409f6:	683b      	ldr	r3, [r7, #0]
 80409f8:	685b      	ldr	r3, [r3, #4]
 80409fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80409fe:	2b00      	cmp	r3, #0
 8040a00:	f000 80a4 	beq.w	8040b4c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8040a04:	4a5a      	ldr	r2, [pc, #360]	; (8040b70 <HAL_GPIO_Init+0x2e0>)
 8040a06:	697b      	ldr	r3, [r7, #20]
 8040a08:	089b      	lsrs	r3, r3, #2
 8040a0a:	3318      	adds	r3, #24
 8040a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040a10:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8040a12:	697b      	ldr	r3, [r7, #20]
 8040a14:	f003 0303 	and.w	r3, r3, #3
 8040a18:	00db      	lsls	r3, r3, #3
 8040a1a:	220f      	movs	r2, #15
 8040a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8040a20:	43db      	mvns	r3, r3
 8040a22:	693a      	ldr	r2, [r7, #16]
 8040a24:	4013      	ands	r3, r2
 8040a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8040a28:	687b      	ldr	r3, [r7, #4]
 8040a2a:	4a52      	ldr	r2, [pc, #328]	; (8040b74 <HAL_GPIO_Init+0x2e4>)
 8040a2c:	4293      	cmp	r3, r2
 8040a2e:	d025      	beq.n	8040a7c <HAL_GPIO_Init+0x1ec>
 8040a30:	687b      	ldr	r3, [r7, #4]
 8040a32:	4a51      	ldr	r2, [pc, #324]	; (8040b78 <HAL_GPIO_Init+0x2e8>)
 8040a34:	4293      	cmp	r3, r2
 8040a36:	d01f      	beq.n	8040a78 <HAL_GPIO_Init+0x1e8>
 8040a38:	687b      	ldr	r3, [r7, #4]
 8040a3a:	4a50      	ldr	r2, [pc, #320]	; (8040b7c <HAL_GPIO_Init+0x2ec>)
 8040a3c:	4293      	cmp	r3, r2
 8040a3e:	d019      	beq.n	8040a74 <HAL_GPIO_Init+0x1e4>
 8040a40:	687b      	ldr	r3, [r7, #4]
 8040a42:	4a4f      	ldr	r2, [pc, #316]	; (8040b80 <HAL_GPIO_Init+0x2f0>)
 8040a44:	4293      	cmp	r3, r2
 8040a46:	d013      	beq.n	8040a70 <HAL_GPIO_Init+0x1e0>
 8040a48:	687b      	ldr	r3, [r7, #4]
 8040a4a:	4a4e      	ldr	r2, [pc, #312]	; (8040b84 <HAL_GPIO_Init+0x2f4>)
 8040a4c:	4293      	cmp	r3, r2
 8040a4e:	d00d      	beq.n	8040a6c <HAL_GPIO_Init+0x1dc>
 8040a50:	687b      	ldr	r3, [r7, #4]
 8040a52:	4a4d      	ldr	r2, [pc, #308]	; (8040b88 <HAL_GPIO_Init+0x2f8>)
 8040a54:	4293      	cmp	r3, r2
 8040a56:	d007      	beq.n	8040a68 <HAL_GPIO_Init+0x1d8>
 8040a58:	687b      	ldr	r3, [r7, #4]
 8040a5a:	4a4c      	ldr	r2, [pc, #304]	; (8040b8c <HAL_GPIO_Init+0x2fc>)
 8040a5c:	4293      	cmp	r3, r2
 8040a5e:	d101      	bne.n	8040a64 <HAL_GPIO_Init+0x1d4>
 8040a60:	2306      	movs	r3, #6
 8040a62:	e00c      	b.n	8040a7e <HAL_GPIO_Init+0x1ee>
 8040a64:	2307      	movs	r3, #7
 8040a66:	e00a      	b.n	8040a7e <HAL_GPIO_Init+0x1ee>
 8040a68:	2305      	movs	r3, #5
 8040a6a:	e008      	b.n	8040a7e <HAL_GPIO_Init+0x1ee>
 8040a6c:	2304      	movs	r3, #4
 8040a6e:	e006      	b.n	8040a7e <HAL_GPIO_Init+0x1ee>
 8040a70:	2303      	movs	r3, #3
 8040a72:	e004      	b.n	8040a7e <HAL_GPIO_Init+0x1ee>
 8040a74:	2302      	movs	r3, #2
 8040a76:	e002      	b.n	8040a7e <HAL_GPIO_Init+0x1ee>
 8040a78:	2301      	movs	r3, #1
 8040a7a:	e000      	b.n	8040a7e <HAL_GPIO_Init+0x1ee>
 8040a7c:	2300      	movs	r3, #0
 8040a7e:	697a      	ldr	r2, [r7, #20]
 8040a80:	f002 0203 	and.w	r2, r2, #3
 8040a84:	00d2      	lsls	r2, r2, #3
 8040a86:	4093      	lsls	r3, r2
 8040a88:	693a      	ldr	r2, [r7, #16]
 8040a8a:	4313      	orrs	r3, r2
 8040a8c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8040a8e:	4938      	ldr	r1, [pc, #224]	; (8040b70 <HAL_GPIO_Init+0x2e0>)
 8040a90:	697b      	ldr	r3, [r7, #20]
 8040a92:	089b      	lsrs	r3, r3, #2
 8040a94:	3318      	adds	r3, #24
 8040a96:	693a      	ldr	r2, [r7, #16]
 8040a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8040a9c:	4b34      	ldr	r3, [pc, #208]	; (8040b70 <HAL_GPIO_Init+0x2e0>)
 8040a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8040aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040aa4:	68fb      	ldr	r3, [r7, #12]
 8040aa6:	43db      	mvns	r3, r3
 8040aa8:	693a      	ldr	r2, [r7, #16]
 8040aaa:	4013      	ands	r3, r2
 8040aac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8040aae:	683b      	ldr	r3, [r7, #0]
 8040ab0:	685b      	ldr	r3, [r3, #4]
 8040ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8040ab6:	2b00      	cmp	r3, #0
 8040ab8:	d003      	beq.n	8040ac2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8040aba:	693a      	ldr	r2, [r7, #16]
 8040abc:	68fb      	ldr	r3, [r7, #12]
 8040abe:	4313      	orrs	r3, r2
 8040ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8040ac2:	4a2b      	ldr	r2, [pc, #172]	; (8040b70 <HAL_GPIO_Init+0x2e0>)
 8040ac4:	693b      	ldr	r3, [r7, #16]
 8040ac6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8040aca:	4b29      	ldr	r3, [pc, #164]	; (8040b70 <HAL_GPIO_Init+0x2e0>)
 8040acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8040ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040ad2:	68fb      	ldr	r3, [r7, #12]
 8040ad4:	43db      	mvns	r3, r3
 8040ad6:	693a      	ldr	r2, [r7, #16]
 8040ad8:	4013      	ands	r3, r2
 8040ada:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8040adc:	683b      	ldr	r3, [r7, #0]
 8040ade:	685b      	ldr	r3, [r3, #4]
 8040ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040ae4:	2b00      	cmp	r3, #0
 8040ae6:	d003      	beq.n	8040af0 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8040ae8:	693a      	ldr	r2, [r7, #16]
 8040aea:	68fb      	ldr	r3, [r7, #12]
 8040aec:	4313      	orrs	r3, r2
 8040aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8040af0:	4a1f      	ldr	r2, [pc, #124]	; (8040b70 <HAL_GPIO_Init+0x2e0>)
 8040af2:	693b      	ldr	r3, [r7, #16]
 8040af4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8040af8:	4b1d      	ldr	r3, [pc, #116]	; (8040b70 <HAL_GPIO_Init+0x2e0>)
 8040afa:	681b      	ldr	r3, [r3, #0]
 8040afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040afe:	68fb      	ldr	r3, [r7, #12]
 8040b00:	43db      	mvns	r3, r3
 8040b02:	693a      	ldr	r2, [r7, #16]
 8040b04:	4013      	ands	r3, r2
 8040b06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8040b08:	683b      	ldr	r3, [r7, #0]
 8040b0a:	685b      	ldr	r3, [r3, #4]
 8040b0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8040b10:	2b00      	cmp	r3, #0
 8040b12:	d003      	beq.n	8040b1c <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8040b14:	693a      	ldr	r2, [r7, #16]
 8040b16:	68fb      	ldr	r3, [r7, #12]
 8040b18:	4313      	orrs	r3, r2
 8040b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8040b1c:	4a14      	ldr	r2, [pc, #80]	; (8040b70 <HAL_GPIO_Init+0x2e0>)
 8040b1e:	693b      	ldr	r3, [r7, #16]
 8040b20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8040b22:	4b13      	ldr	r3, [pc, #76]	; (8040b70 <HAL_GPIO_Init+0x2e0>)
 8040b24:	685b      	ldr	r3, [r3, #4]
 8040b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040b28:	68fb      	ldr	r3, [r7, #12]
 8040b2a:	43db      	mvns	r3, r3
 8040b2c:	693a      	ldr	r2, [r7, #16]
 8040b2e:	4013      	ands	r3, r2
 8040b30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8040b32:	683b      	ldr	r3, [r7, #0]
 8040b34:	685b      	ldr	r3, [r3, #4]
 8040b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8040b3a:	2b00      	cmp	r3, #0
 8040b3c:	d003      	beq.n	8040b46 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8040b3e:	693a      	ldr	r2, [r7, #16]
 8040b40:	68fb      	ldr	r3, [r7, #12]
 8040b42:	4313      	orrs	r3, r2
 8040b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8040b46:	4a0a      	ldr	r2, [pc, #40]	; (8040b70 <HAL_GPIO_Init+0x2e0>)
 8040b48:	693b      	ldr	r3, [r7, #16]
 8040b4a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8040b4c:	697b      	ldr	r3, [r7, #20]
 8040b4e:	3301      	adds	r3, #1
 8040b50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8040b52:	683b      	ldr	r3, [r7, #0]
 8040b54:	681a      	ldr	r2, [r3, #0]
 8040b56:	697b      	ldr	r3, [r7, #20]
 8040b58:	fa22 f303 	lsr.w	r3, r2, r3
 8040b5c:	2b00      	cmp	r3, #0
 8040b5e:	f47f ae9f 	bne.w	80408a0 <HAL_GPIO_Init+0x10>
  }
}
 8040b62:	bf00      	nop
 8040b64:	371c      	adds	r7, #28
 8040b66:	46bd      	mov	sp, r7
 8040b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b6c:	4770      	bx	lr
 8040b6e:	bf00      	nop
 8040b70:	4002f400 	.word	0x4002f400
 8040b74:	42020000 	.word	0x42020000
 8040b78:	42020400 	.word	0x42020400
 8040b7c:	42020800 	.word	0x42020800
 8040b80:	42020c00 	.word	0x42020c00
 8040b84:	42021000 	.word	0x42021000
 8040b88:	42021400 	.word	0x42021400
 8040b8c:	42021800 	.word	0x42021800

08040b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8040b90:	b480      	push	{r7}
 8040b92:	b083      	sub	sp, #12
 8040b94:	af00      	add	r7, sp, #0
 8040b96:	6078      	str	r0, [r7, #4]
 8040b98:	460b      	mov	r3, r1
 8040b9a:	807b      	strh	r3, [r7, #2]
 8040b9c:	4613      	mov	r3, r2
 8040b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8040ba0:	787b      	ldrb	r3, [r7, #1]
 8040ba2:	2b00      	cmp	r3, #0
 8040ba4:	d003      	beq.n	8040bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8040ba6:	887a      	ldrh	r2, [r7, #2]
 8040ba8:	687b      	ldr	r3, [r7, #4]
 8040baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8040bac:	e002      	b.n	8040bb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8040bae:	887a      	ldrh	r2, [r7, #2]
 8040bb0:	687b      	ldr	r3, [r7, #4]
 8040bb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8040bb4:	bf00      	nop
 8040bb6:	370c      	adds	r7, #12
 8040bb8:	46bd      	mov	sp, r7
 8040bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bbe:	4770      	bx	lr

08040bc0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8040bc0:	b480      	push	{r7}
 8040bc2:	b085      	sub	sp, #20
 8040bc4:	af00      	add	r7, sp, #0
 8040bc6:	6078      	str	r0, [r7, #4]
 8040bc8:	460b      	mov	r3, r1
 8040bca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8040bcc:	687b      	ldr	r3, [r7, #4]
 8040bce:	695b      	ldr	r3, [r3, #20]
 8040bd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8040bd2:	887a      	ldrh	r2, [r7, #2]
 8040bd4:	68fb      	ldr	r3, [r7, #12]
 8040bd6:	4013      	ands	r3, r2
 8040bd8:	041a      	lsls	r2, r3, #16
 8040bda:	68fb      	ldr	r3, [r7, #12]
 8040bdc:	43d9      	mvns	r1, r3
 8040bde:	887b      	ldrh	r3, [r7, #2]
 8040be0:	400b      	ands	r3, r1
 8040be2:	431a      	orrs	r2, r3
 8040be4:	687b      	ldr	r3, [r7, #4]
 8040be6:	619a      	str	r2, [r3, #24]
}
 8040be8:	bf00      	nop
 8040bea:	3714      	adds	r7, #20
 8040bec:	46bd      	mov	sp, r7
 8040bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bf2:	4770      	bx	lr

08040bf4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8040bf4:	b480      	push	{r7}
 8040bf6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8040bf8:	4b04      	ldr	r3, [pc, #16]	; (8040c0c <HAL_PWREx_GetVoltageRange+0x18>)
 8040bfa:	681b      	ldr	r3, [r3, #0]
 8040bfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8040c00:	4618      	mov	r0, r3
 8040c02:	46bd      	mov	sp, r7
 8040c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c08:	4770      	bx	lr
 8040c0a:	bf00      	nop
 8040c0c:	40007000 	.word	0x40007000

08040c10 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8040c10:	b580      	push	{r7, lr}
 8040c12:	b084      	sub	sp, #16
 8040c14:	af00      	add	r7, sp, #0
 8040c16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8040c18:	4b27      	ldr	r3, [pc, #156]	; (8040cb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040c1a:	681b      	ldr	r3, [r3, #0]
 8040c1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8040c20:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8040c22:	f000 f851 	bl	8040cc8 <HAL_PWREx_SMPS_GetEffectiveMode>
 8040c26:	4603      	mov	r3, r0
 8040c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8040c2c:	d101      	bne.n	8040c32 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8040c2e:	2301      	movs	r3, #1
 8040c30:	e03e      	b.n	8040cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8040c32:	4b21      	ldr	r3, [pc, #132]	; (8040cb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040c34:	68db      	ldr	r3, [r3, #12]
 8040c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8040c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8040c3e:	d101      	bne.n	8040c44 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8040c40:	2301      	movs	r3, #1
 8040c42:	e035      	b.n	8040cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8040c44:	68ba      	ldr	r2, [r7, #8]
 8040c46:	687b      	ldr	r3, [r7, #4]
 8040c48:	429a      	cmp	r2, r3
 8040c4a:	d101      	bne.n	8040c50 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8040c4c:	2300      	movs	r3, #0
 8040c4e:	e02f      	b.n	8040cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8040c50:	4b19      	ldr	r3, [pc, #100]	; (8040cb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040c52:	681b      	ldr	r3, [r3, #0]
 8040c54:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8040c58:	4917      	ldr	r1, [pc, #92]	; (8040cb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040c5a:	687b      	ldr	r3, [r7, #4]
 8040c5c:	4313      	orrs	r3, r2
 8040c5e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8040c60:	4b16      	ldr	r3, [pc, #88]	; (8040cbc <HAL_PWREx_ControlVoltageScaling+0xac>)
 8040c62:	681b      	ldr	r3, [r3, #0]
 8040c64:	095b      	lsrs	r3, r3, #5
 8040c66:	4a16      	ldr	r2, [pc, #88]	; (8040cc0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8040c68:	fba2 2303 	umull	r2, r3, r2, r3
 8040c6c:	09db      	lsrs	r3, r3, #7
 8040c6e:	2232      	movs	r2, #50	; 0x32
 8040c70:	fb02 f303 	mul.w	r3, r2, r3
 8040c74:	4a13      	ldr	r2, [pc, #76]	; (8040cc4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8040c76:	fba2 2303 	umull	r2, r3, r2, r3
 8040c7a:	08db      	lsrs	r3, r3, #3
 8040c7c:	3301      	adds	r3, #1
 8040c7e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8040c80:	e002      	b.n	8040c88 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8040c82:	68fb      	ldr	r3, [r7, #12]
 8040c84:	3b01      	subs	r3, #1
 8040c86:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8040c88:	4b0b      	ldr	r3, [pc, #44]	; (8040cb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040c8a:	695b      	ldr	r3, [r3, #20]
 8040c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8040c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8040c94:	d102      	bne.n	8040c9c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8040c96:	68fb      	ldr	r3, [r7, #12]
 8040c98:	2b00      	cmp	r3, #0
 8040c9a:	d1f2      	bne.n	8040c82 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8040c9c:	4b06      	ldr	r3, [pc, #24]	; (8040cb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040c9e:	695b      	ldr	r3, [r3, #20]
 8040ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8040ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8040ca8:	d101      	bne.n	8040cae <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8040caa:	2303      	movs	r3, #3
 8040cac:	e000      	b.n	8040cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8040cae:	2300      	movs	r3, #0
}
 8040cb0:	4618      	mov	r0, r3
 8040cb2:	3710      	adds	r7, #16
 8040cb4:	46bd      	mov	sp, r7
 8040cb6:	bd80      	pop	{r7, pc}
 8040cb8:	40007000 	.word	0x40007000
 8040cbc:	20018014 	.word	0x20018014
 8040cc0:	0a7c5ac5 	.word	0x0a7c5ac5
 8040cc4:	cccccccd 	.word	0xcccccccd

08040cc8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8040cc8:	b480      	push	{r7}
 8040cca:	b083      	sub	sp, #12
 8040ccc:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8040cce:	4b0f      	ldr	r3, [pc, #60]	; (8040d0c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8040cd0:	691b      	ldr	r3, [r3, #16]
 8040cd2:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8040cd4:	683b      	ldr	r3, [r7, #0]
 8040cd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8040cda:	2b00      	cmp	r3, #0
 8040cdc:	d003      	beq.n	8040ce6 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8040cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8040ce2:	607b      	str	r3, [r7, #4]
 8040ce4:	e00a      	b.n	8040cfc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8040ce6:	683b      	ldr	r3, [r7, #0]
 8040ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8040cec:	2b00      	cmp	r3, #0
 8040cee:	d103      	bne.n	8040cf8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8040cf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8040cf4:	607b      	str	r3, [r7, #4]
 8040cf6:	e001      	b.n	8040cfc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8040cf8:	2300      	movs	r3, #0
 8040cfa:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8040cfc:	687b      	ldr	r3, [r7, #4]
}
 8040cfe:	4618      	mov	r0, r3
 8040d00:	370c      	adds	r7, #12
 8040d02:	46bd      	mov	sp, r7
 8040d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d08:	4770      	bx	lr
 8040d0a:	bf00      	nop
 8040d0c:	40007000 	.word	0x40007000

08040d10 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8040d10:	b580      	push	{r7, lr}
 8040d12:	b088      	sub	sp, #32
 8040d14:	af00      	add	r7, sp, #0
 8040d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8040d18:	687b      	ldr	r3, [r7, #4]
 8040d1a:	2b00      	cmp	r3, #0
 8040d1c:	d102      	bne.n	8040d24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8040d1e:	2301      	movs	r3, #1
 8040d20:	f000 bc52 	b.w	80415c8 <HAL_RCC_OscConfig+0x8b8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8040d24:	4ba3      	ldr	r3, [pc, #652]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040d26:	689b      	ldr	r3, [r3, #8]
 8040d28:	f003 030c 	and.w	r3, r3, #12
 8040d2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8040d2e:	4ba1      	ldr	r3, [pc, #644]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040d30:	68db      	ldr	r3, [r3, #12]
 8040d32:	f003 0303 	and.w	r3, r3, #3
 8040d36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8040d38:	687b      	ldr	r3, [r7, #4]
 8040d3a:	681b      	ldr	r3, [r3, #0]
 8040d3c:	f003 0310 	and.w	r3, r3, #16
 8040d40:	2b00      	cmp	r3, #0
 8040d42:	f000 80da 	beq.w	8040efa <HAL_RCC_OscConfig+0x1ea>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8040d46:	69bb      	ldr	r3, [r7, #24]
 8040d48:	2b00      	cmp	r3, #0
 8040d4a:	d006      	beq.n	8040d5a <HAL_RCC_OscConfig+0x4a>
 8040d4c:	69bb      	ldr	r3, [r7, #24]
 8040d4e:	2b0c      	cmp	r3, #12
 8040d50:	f040 8081 	bne.w	8040e56 <HAL_RCC_OscConfig+0x146>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8040d54:	697b      	ldr	r3, [r7, #20]
 8040d56:	2b01      	cmp	r3, #1
 8040d58:	d17d      	bne.n	8040e56 <HAL_RCC_OscConfig+0x146>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8040d5a:	4b96      	ldr	r3, [pc, #600]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040d5c:	681b      	ldr	r3, [r3, #0]
 8040d5e:	f003 0302 	and.w	r3, r3, #2
 8040d62:	2b00      	cmp	r3, #0
 8040d64:	d006      	beq.n	8040d74 <HAL_RCC_OscConfig+0x64>
 8040d66:	687b      	ldr	r3, [r7, #4]
 8040d68:	69db      	ldr	r3, [r3, #28]
 8040d6a:	2b00      	cmp	r3, #0
 8040d6c:	d102      	bne.n	8040d74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8040d6e:	2301      	movs	r3, #1
 8040d70:	f000 bc2a 	b.w	80415c8 <HAL_RCC_OscConfig+0x8b8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8040d74:	687b      	ldr	r3, [r7, #4]
 8040d76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8040d78:	4b8e      	ldr	r3, [pc, #568]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040d7a:	681b      	ldr	r3, [r3, #0]
 8040d7c:	f003 0308 	and.w	r3, r3, #8
 8040d80:	2b00      	cmp	r3, #0
 8040d82:	d004      	beq.n	8040d8e <HAL_RCC_OscConfig+0x7e>
 8040d84:	4b8b      	ldr	r3, [pc, #556]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040d86:	681b      	ldr	r3, [r3, #0]
 8040d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8040d8c:	e005      	b.n	8040d9a <HAL_RCC_OscConfig+0x8a>
 8040d8e:	4b89      	ldr	r3, [pc, #548]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8040d94:	091b      	lsrs	r3, r3, #4
 8040d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8040d9a:	4293      	cmp	r3, r2
 8040d9c:	d224      	bcs.n	8040de8 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8040d9e:	687b      	ldr	r3, [r7, #4]
 8040da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040da2:	4618      	mov	r0, r3
 8040da4:	f000 fe2a 	bl	80419fc <RCC_SetFlashLatencyFromMSIRange>
 8040da8:	4603      	mov	r3, r0
 8040daa:	2b00      	cmp	r3, #0
 8040dac:	d002      	beq.n	8040db4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8040dae:	2301      	movs	r3, #1
 8040db0:	f000 bc0a 	b.w	80415c8 <HAL_RCC_OscConfig+0x8b8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8040db4:	4b7f      	ldr	r3, [pc, #508]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040db6:	681b      	ldr	r3, [r3, #0]
 8040db8:	4a7e      	ldr	r2, [pc, #504]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040dba:	f043 0308 	orr.w	r3, r3, #8
 8040dbe:	6013      	str	r3, [r2, #0]
 8040dc0:	4b7c      	ldr	r3, [pc, #496]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040dc2:	681b      	ldr	r3, [r3, #0]
 8040dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8040dc8:	687b      	ldr	r3, [r7, #4]
 8040dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040dcc:	4979      	ldr	r1, [pc, #484]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040dce:	4313      	orrs	r3, r2
 8040dd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8040dd2:	4b78      	ldr	r3, [pc, #480]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040dd4:	685b      	ldr	r3, [r3, #4]
 8040dd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8040dda:	687b      	ldr	r3, [r7, #4]
 8040ddc:	6a1b      	ldr	r3, [r3, #32]
 8040dde:	021b      	lsls	r3, r3, #8
 8040de0:	4974      	ldr	r1, [pc, #464]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040de2:	4313      	orrs	r3, r2
 8040de4:	604b      	str	r3, [r1, #4]
 8040de6:	e025      	b.n	8040e34 <HAL_RCC_OscConfig+0x124>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8040de8:	4b72      	ldr	r3, [pc, #456]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040dea:	681b      	ldr	r3, [r3, #0]
 8040dec:	4a71      	ldr	r2, [pc, #452]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040dee:	f043 0308 	orr.w	r3, r3, #8
 8040df2:	6013      	str	r3, [r2, #0]
 8040df4:	4b6f      	ldr	r3, [pc, #444]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040df6:	681b      	ldr	r3, [r3, #0]
 8040df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8040dfc:	687b      	ldr	r3, [r7, #4]
 8040dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040e00:	496c      	ldr	r1, [pc, #432]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040e02:	4313      	orrs	r3, r2
 8040e04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8040e06:	4b6b      	ldr	r3, [pc, #428]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040e08:	685b      	ldr	r3, [r3, #4]
 8040e0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8040e0e:	687b      	ldr	r3, [r7, #4]
 8040e10:	6a1b      	ldr	r3, [r3, #32]
 8040e12:	021b      	lsls	r3, r3, #8
 8040e14:	4967      	ldr	r1, [pc, #412]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040e16:	4313      	orrs	r3, r2
 8040e18:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8040e1a:	69bb      	ldr	r3, [r7, #24]
 8040e1c:	2b00      	cmp	r3, #0
 8040e1e:	d109      	bne.n	8040e34 <HAL_RCC_OscConfig+0x124>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8040e20:	687b      	ldr	r3, [r7, #4]
 8040e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040e24:	4618      	mov	r0, r3
 8040e26:	f000 fde9 	bl	80419fc <RCC_SetFlashLatencyFromMSIRange>
 8040e2a:	4603      	mov	r3, r0
 8040e2c:	2b00      	cmp	r3, #0
 8040e2e:	d001      	beq.n	8040e34 <HAL_RCC_OscConfig+0x124>
            {
              return HAL_ERROR;
 8040e30:	2301      	movs	r3, #1
 8040e32:	e3c9      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8040e34:	f000 fd88 	bl	8041948 <HAL_RCC_GetHCLKFreq>
 8040e38:	4602      	mov	r2, r0
 8040e3a:	4b5f      	ldr	r3, [pc, #380]	; (8040fb8 <HAL_RCC_OscConfig+0x2a8>)
 8040e3c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8040e3e:	4b5f      	ldr	r3, [pc, #380]	; (8040fbc <HAL_RCC_OscConfig+0x2ac>)
 8040e40:	681b      	ldr	r3, [r3, #0]
 8040e42:	4618      	mov	r0, r3
 8040e44:	f7ff fb18 	bl	8040478 <HAL_InitTick>
 8040e48:	4603      	mov	r3, r0
 8040e4a:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8040e4c:	7bfb      	ldrb	r3, [r7, #15]
 8040e4e:	2b00      	cmp	r3, #0
 8040e50:	d052      	beq.n	8040ef8 <HAL_RCC_OscConfig+0x1e8>
        {
          return status;
 8040e52:	7bfb      	ldrb	r3, [r7, #15]
 8040e54:	e3b8      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8040e56:	687b      	ldr	r3, [r7, #4]
 8040e58:	69db      	ldr	r3, [r3, #28]
 8040e5a:	2b00      	cmp	r3, #0
 8040e5c:	d032      	beq.n	8040ec4 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8040e5e:	4b55      	ldr	r3, [pc, #340]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040e60:	681b      	ldr	r3, [r3, #0]
 8040e62:	4a54      	ldr	r2, [pc, #336]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040e64:	f043 0301 	orr.w	r3, r3, #1
 8040e68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8040e6a:	f7ff fc25 	bl	80406b8 <HAL_GetTick>
 8040e6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8040e70:	e008      	b.n	8040e84 <HAL_RCC_OscConfig+0x174>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8040e72:	f7ff fc21 	bl	80406b8 <HAL_GetTick>
 8040e76:	4602      	mov	r2, r0
 8040e78:	693b      	ldr	r3, [r7, #16]
 8040e7a:	1ad3      	subs	r3, r2, r3
 8040e7c:	2b02      	cmp	r3, #2
 8040e7e:	d901      	bls.n	8040e84 <HAL_RCC_OscConfig+0x174>
          {
            return HAL_TIMEOUT;
 8040e80:	2303      	movs	r3, #3
 8040e82:	e3a1      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8040e84:	4b4b      	ldr	r3, [pc, #300]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040e86:	681b      	ldr	r3, [r3, #0]
 8040e88:	f003 0302 	and.w	r3, r3, #2
 8040e8c:	2b00      	cmp	r3, #0
 8040e8e:	d0f0      	beq.n	8040e72 <HAL_RCC_OscConfig+0x162>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8040e90:	4b48      	ldr	r3, [pc, #288]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040e92:	681b      	ldr	r3, [r3, #0]
 8040e94:	4a47      	ldr	r2, [pc, #284]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040e96:	f043 0308 	orr.w	r3, r3, #8
 8040e9a:	6013      	str	r3, [r2, #0]
 8040e9c:	4b45      	ldr	r3, [pc, #276]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040e9e:	681b      	ldr	r3, [r3, #0]
 8040ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8040ea4:	687b      	ldr	r3, [r7, #4]
 8040ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040ea8:	4942      	ldr	r1, [pc, #264]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040eaa:	4313      	orrs	r3, r2
 8040eac:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8040eae:	4b41      	ldr	r3, [pc, #260]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040eb0:	685b      	ldr	r3, [r3, #4]
 8040eb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8040eb6:	687b      	ldr	r3, [r7, #4]
 8040eb8:	6a1b      	ldr	r3, [r3, #32]
 8040eba:	021b      	lsls	r3, r3, #8
 8040ebc:	493d      	ldr	r1, [pc, #244]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040ebe:	4313      	orrs	r3, r2
 8040ec0:	604b      	str	r3, [r1, #4]
 8040ec2:	e01a      	b.n	8040efa <HAL_RCC_OscConfig+0x1ea>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8040ec4:	4b3b      	ldr	r3, [pc, #236]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040ec6:	681b      	ldr	r3, [r3, #0]
 8040ec8:	4a3a      	ldr	r2, [pc, #232]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040eca:	f023 0301 	bic.w	r3, r3, #1
 8040ece:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8040ed0:	f7ff fbf2 	bl	80406b8 <HAL_GetTick>
 8040ed4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8040ed6:	e008      	b.n	8040eea <HAL_RCC_OscConfig+0x1da>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8040ed8:	f7ff fbee 	bl	80406b8 <HAL_GetTick>
 8040edc:	4602      	mov	r2, r0
 8040ede:	693b      	ldr	r3, [r7, #16]
 8040ee0:	1ad3      	subs	r3, r2, r3
 8040ee2:	2b02      	cmp	r3, #2
 8040ee4:	d901      	bls.n	8040eea <HAL_RCC_OscConfig+0x1da>
          {
            return HAL_TIMEOUT;
 8040ee6:	2303      	movs	r3, #3
 8040ee8:	e36e      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8040eea:	4b32      	ldr	r3, [pc, #200]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040eec:	681b      	ldr	r3, [r3, #0]
 8040eee:	f003 0302 	and.w	r3, r3, #2
 8040ef2:	2b00      	cmp	r3, #0
 8040ef4:	d1f0      	bne.n	8040ed8 <HAL_RCC_OscConfig+0x1c8>
 8040ef6:	e000      	b.n	8040efa <HAL_RCC_OscConfig+0x1ea>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8040ef8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8040efa:	687b      	ldr	r3, [r7, #4]
 8040efc:	681b      	ldr	r3, [r3, #0]
 8040efe:	f003 0301 	and.w	r3, r3, #1
 8040f02:	2b00      	cmp	r3, #0
 8040f04:	d071      	beq.n	8040fea <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8040f06:	69bb      	ldr	r3, [r7, #24]
 8040f08:	2b08      	cmp	r3, #8
 8040f0a:	d005      	beq.n	8040f18 <HAL_RCC_OscConfig+0x208>
 8040f0c:	69bb      	ldr	r3, [r7, #24]
 8040f0e:	2b0c      	cmp	r3, #12
 8040f10:	d10e      	bne.n	8040f30 <HAL_RCC_OscConfig+0x220>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8040f12:	697b      	ldr	r3, [r7, #20]
 8040f14:	2b03      	cmp	r3, #3
 8040f16:	d10b      	bne.n	8040f30 <HAL_RCC_OscConfig+0x220>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8040f18:	4b26      	ldr	r3, [pc, #152]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040f1a:	681b      	ldr	r3, [r3, #0]
 8040f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040f20:	2b00      	cmp	r3, #0
 8040f22:	d061      	beq.n	8040fe8 <HAL_RCC_OscConfig+0x2d8>
 8040f24:	687b      	ldr	r3, [r7, #4]
 8040f26:	685b      	ldr	r3, [r3, #4]
 8040f28:	2b00      	cmp	r3, #0
 8040f2a:	d15d      	bne.n	8040fe8 <HAL_RCC_OscConfig+0x2d8>
      {
        return HAL_ERROR;
 8040f2c:	2301      	movs	r3, #1
 8040f2e:	e34b      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8040f30:	687b      	ldr	r3, [r7, #4]
 8040f32:	685b      	ldr	r3, [r3, #4]
 8040f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8040f38:	d106      	bne.n	8040f48 <HAL_RCC_OscConfig+0x238>
 8040f3a:	4b1e      	ldr	r3, [pc, #120]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040f3c:	681b      	ldr	r3, [r3, #0]
 8040f3e:	4a1d      	ldr	r2, [pc, #116]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8040f44:	6013      	str	r3, [r2, #0]
 8040f46:	e01d      	b.n	8040f84 <HAL_RCC_OscConfig+0x274>
 8040f48:	687b      	ldr	r3, [r7, #4]
 8040f4a:	685b      	ldr	r3, [r3, #4]
 8040f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8040f50:	d10c      	bne.n	8040f6c <HAL_RCC_OscConfig+0x25c>
 8040f52:	4b18      	ldr	r3, [pc, #96]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040f54:	681b      	ldr	r3, [r3, #0]
 8040f56:	4a17      	ldr	r2, [pc, #92]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8040f5c:	6013      	str	r3, [r2, #0]
 8040f5e:	4b15      	ldr	r3, [pc, #84]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040f60:	681b      	ldr	r3, [r3, #0]
 8040f62:	4a14      	ldr	r2, [pc, #80]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8040f68:	6013      	str	r3, [r2, #0]
 8040f6a:	e00b      	b.n	8040f84 <HAL_RCC_OscConfig+0x274>
 8040f6c:	4b11      	ldr	r3, [pc, #68]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040f6e:	681b      	ldr	r3, [r3, #0]
 8040f70:	4a10      	ldr	r2, [pc, #64]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8040f76:	6013      	str	r3, [r2, #0]
 8040f78:	4b0e      	ldr	r3, [pc, #56]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040f7a:	681b      	ldr	r3, [r3, #0]
 8040f7c:	4a0d      	ldr	r2, [pc, #52]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8040f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8040f84:	687b      	ldr	r3, [r7, #4]
 8040f86:	685b      	ldr	r3, [r3, #4]
 8040f88:	2b00      	cmp	r3, #0
 8040f8a:	d019      	beq.n	8040fc0 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8040f8c:	f7ff fb94 	bl	80406b8 <HAL_GetTick>
 8040f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8040f92:	e008      	b.n	8040fa6 <HAL_RCC_OscConfig+0x296>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8040f94:	f7ff fb90 	bl	80406b8 <HAL_GetTick>
 8040f98:	4602      	mov	r2, r0
 8040f9a:	693b      	ldr	r3, [r7, #16]
 8040f9c:	1ad3      	subs	r3, r2, r3
 8040f9e:	2b64      	cmp	r3, #100	; 0x64
 8040fa0:	d901      	bls.n	8040fa6 <HAL_RCC_OscConfig+0x296>
          {
            return HAL_TIMEOUT;
 8040fa2:	2303      	movs	r3, #3
 8040fa4:	e310      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8040fa6:	4b03      	ldr	r3, [pc, #12]	; (8040fb4 <HAL_RCC_OscConfig+0x2a4>)
 8040fa8:	681b      	ldr	r3, [r3, #0]
 8040faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040fae:	2b00      	cmp	r3, #0
 8040fb0:	d0f0      	beq.n	8040f94 <HAL_RCC_OscConfig+0x284>
 8040fb2:	e01a      	b.n	8040fea <HAL_RCC_OscConfig+0x2da>
 8040fb4:	40021000 	.word	0x40021000
 8040fb8:	20018014 	.word	0x20018014
 8040fbc:	20018018 	.word	0x20018018
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8040fc0:	f7ff fb7a 	bl	80406b8 <HAL_GetTick>
 8040fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8040fc6:	e008      	b.n	8040fda <HAL_RCC_OscConfig+0x2ca>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8040fc8:	f7ff fb76 	bl	80406b8 <HAL_GetTick>
 8040fcc:	4602      	mov	r2, r0
 8040fce:	693b      	ldr	r3, [r7, #16]
 8040fd0:	1ad3      	subs	r3, r2, r3
 8040fd2:	2b64      	cmp	r3, #100	; 0x64
 8040fd4:	d901      	bls.n	8040fda <HAL_RCC_OscConfig+0x2ca>
          {
            return HAL_TIMEOUT;
 8040fd6:	2303      	movs	r3, #3
 8040fd8:	e2f6      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8040fda:	4ba6      	ldr	r3, [pc, #664]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 8040fdc:	681b      	ldr	r3, [r3, #0]
 8040fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040fe2:	2b00      	cmp	r3, #0
 8040fe4:	d1f0      	bne.n	8040fc8 <HAL_RCC_OscConfig+0x2b8>
 8040fe6:	e000      	b.n	8040fea <HAL_RCC_OscConfig+0x2da>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8040fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8040fea:	687b      	ldr	r3, [r7, #4]
 8040fec:	681b      	ldr	r3, [r3, #0]
 8040fee:	f003 0302 	and.w	r3, r3, #2
 8040ff2:	2b00      	cmp	r3, #0
 8040ff4:	d060      	beq.n	80410b8 <HAL_RCC_OscConfig+0x3a8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8040ff6:	69bb      	ldr	r3, [r7, #24]
 8040ff8:	2b04      	cmp	r3, #4
 8040ffa:	d005      	beq.n	8041008 <HAL_RCC_OscConfig+0x2f8>
 8040ffc:	69bb      	ldr	r3, [r7, #24]
 8040ffe:	2b0c      	cmp	r3, #12
 8041000:	d119      	bne.n	8041036 <HAL_RCC_OscConfig+0x326>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8041002:	697b      	ldr	r3, [r7, #20]
 8041004:	2b02      	cmp	r3, #2
 8041006:	d116      	bne.n	8041036 <HAL_RCC_OscConfig+0x326>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8041008:	4b9a      	ldr	r3, [pc, #616]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 804100a:	681b      	ldr	r3, [r3, #0]
 804100c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041010:	2b00      	cmp	r3, #0
 8041012:	d005      	beq.n	8041020 <HAL_RCC_OscConfig+0x310>
 8041014:	687b      	ldr	r3, [r7, #4]
 8041016:	68db      	ldr	r3, [r3, #12]
 8041018:	2b00      	cmp	r3, #0
 804101a:	d101      	bne.n	8041020 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 804101c:	2301      	movs	r3, #1
 804101e:	e2d3      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041020:	4b94      	ldr	r3, [pc, #592]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 8041022:	685b      	ldr	r3, [r3, #4]
 8041024:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8041028:	687b      	ldr	r3, [r7, #4]
 804102a:	691b      	ldr	r3, [r3, #16]
 804102c:	061b      	lsls	r3, r3, #24
 804102e:	4991      	ldr	r1, [pc, #580]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 8041030:	4313      	orrs	r3, r2
 8041032:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8041034:	e040      	b.n	80410b8 <HAL_RCC_OscConfig+0x3a8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8041036:	687b      	ldr	r3, [r7, #4]
 8041038:	68db      	ldr	r3, [r3, #12]
 804103a:	2b00      	cmp	r3, #0
 804103c:	d023      	beq.n	8041086 <HAL_RCC_OscConfig+0x376>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 804103e:	4b8d      	ldr	r3, [pc, #564]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 8041040:	681b      	ldr	r3, [r3, #0]
 8041042:	4a8c      	ldr	r2, [pc, #560]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 8041044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804104a:	f7ff fb35 	bl	80406b8 <HAL_GetTick>
 804104e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8041050:	e008      	b.n	8041064 <HAL_RCC_OscConfig+0x354>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041052:	f7ff fb31 	bl	80406b8 <HAL_GetTick>
 8041056:	4602      	mov	r2, r0
 8041058:	693b      	ldr	r3, [r7, #16]
 804105a:	1ad3      	subs	r3, r2, r3
 804105c:	2b02      	cmp	r3, #2
 804105e:	d901      	bls.n	8041064 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8041060:	2303      	movs	r3, #3
 8041062:	e2b1      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8041064:	4b83      	ldr	r3, [pc, #524]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 8041066:	681b      	ldr	r3, [r3, #0]
 8041068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804106c:	2b00      	cmp	r3, #0
 804106e:	d0f0      	beq.n	8041052 <HAL_RCC_OscConfig+0x342>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041070:	4b80      	ldr	r3, [pc, #512]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 8041072:	685b      	ldr	r3, [r3, #4]
 8041074:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8041078:	687b      	ldr	r3, [r7, #4]
 804107a:	691b      	ldr	r3, [r3, #16]
 804107c:	061b      	lsls	r3, r3, #24
 804107e:	497d      	ldr	r1, [pc, #500]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 8041080:	4313      	orrs	r3, r2
 8041082:	604b      	str	r3, [r1, #4]
 8041084:	e018      	b.n	80410b8 <HAL_RCC_OscConfig+0x3a8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8041086:	4b7b      	ldr	r3, [pc, #492]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 8041088:	681b      	ldr	r3, [r3, #0]
 804108a:	4a7a      	ldr	r2, [pc, #488]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 804108c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8041090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041092:	f7ff fb11 	bl	80406b8 <HAL_GetTick>
 8041096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8041098:	e008      	b.n	80410ac <HAL_RCC_OscConfig+0x39c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 804109a:	f7ff fb0d 	bl	80406b8 <HAL_GetTick>
 804109e:	4602      	mov	r2, r0
 80410a0:	693b      	ldr	r3, [r7, #16]
 80410a2:	1ad3      	subs	r3, r2, r3
 80410a4:	2b02      	cmp	r3, #2
 80410a6:	d901      	bls.n	80410ac <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80410a8:	2303      	movs	r3, #3
 80410aa:	e28d      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80410ac:	4b71      	ldr	r3, [pc, #452]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 80410ae:	681b      	ldr	r3, [r3, #0]
 80410b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80410b4:	2b00      	cmp	r3, #0
 80410b6:	d1f0      	bne.n	804109a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80410b8:	687b      	ldr	r3, [r7, #4]
 80410ba:	681b      	ldr	r3, [r3, #0]
 80410bc:	f003 0308 	and.w	r3, r3, #8
 80410c0:	2b00      	cmp	r3, #0
 80410c2:	d051      	beq.n	8041168 <HAL_RCC_OscConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80410c4:	687b      	ldr	r3, [r7, #4]
 80410c6:	695b      	ldr	r3, [r3, #20]
 80410c8:	2b00      	cmp	r3, #0
 80410ca:	d031      	beq.n	8041130 <HAL_RCC_OscConfig+0x420>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80410cc:	687b      	ldr	r3, [r7, #4]
 80410ce:	699b      	ldr	r3, [r3, #24]
 80410d0:	2b00      	cmp	r3, #0
 80410d2:	d108      	bne.n	80410e6 <HAL_RCC_OscConfig+0x3d6>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80410d4:	4b67      	ldr	r3, [pc, #412]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 80410d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80410da:	4a66      	ldr	r2, [pc, #408]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 80410dc:	f023 0310 	bic.w	r3, r3, #16
 80410e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80410e4:	e007      	b.n	80410f6 <HAL_RCC_OscConfig+0x3e6>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80410e6:	4b63      	ldr	r3, [pc, #396]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 80410e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80410ec:	4a61      	ldr	r2, [pc, #388]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 80410ee:	f043 0310 	orr.w	r3, r3, #16
 80410f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80410f6:	4b5f      	ldr	r3, [pc, #380]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 80410f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80410fc:	4a5d      	ldr	r2, [pc, #372]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 80410fe:	f043 0301 	orr.w	r3, r3, #1
 8041102:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041106:	f7ff fad7 	bl	80406b8 <HAL_GetTick>
 804110a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 804110c:	e008      	b.n	8041120 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 804110e:	f7ff fad3 	bl	80406b8 <HAL_GetTick>
 8041112:	4602      	mov	r2, r0
 8041114:	693b      	ldr	r3, [r7, #16]
 8041116:	1ad3      	subs	r3, r2, r3
 8041118:	2b07      	cmp	r3, #7
 804111a:	d901      	bls.n	8041120 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 804111c:	2303      	movs	r3, #3
 804111e:	e253      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8041120:	4b54      	ldr	r3, [pc, #336]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 8041122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041126:	f003 0302 	and.w	r3, r3, #2
 804112a:	2b00      	cmp	r3, #0
 804112c:	d0ef      	beq.n	804110e <HAL_RCC_OscConfig+0x3fe>
 804112e:	e01b      	b.n	8041168 <HAL_RCC_OscConfig+0x458>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8041130:	4b50      	ldr	r3, [pc, #320]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 8041132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041136:	4a4f      	ldr	r2, [pc, #316]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 8041138:	f023 0301 	bic.w	r3, r3, #1
 804113c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041140:	f7ff faba 	bl	80406b8 <HAL_GetTick>
 8041144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8041146:	e008      	b.n	804115a <HAL_RCC_OscConfig+0x44a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041148:	f7ff fab6 	bl	80406b8 <HAL_GetTick>
 804114c:	4602      	mov	r2, r0
 804114e:	693b      	ldr	r3, [r7, #16]
 8041150:	1ad3      	subs	r3, r2, r3
 8041152:	2b07      	cmp	r3, #7
 8041154:	d901      	bls.n	804115a <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8041156:	2303      	movs	r3, #3
 8041158:	e236      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 804115a:	4b46      	ldr	r3, [pc, #280]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 804115c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041160:	f003 0302 	and.w	r3, r3, #2
 8041164:	2b00      	cmp	r3, #0
 8041166:	d1ef      	bne.n	8041148 <HAL_RCC_OscConfig+0x438>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8041168:	687b      	ldr	r3, [r7, #4]
 804116a:	681b      	ldr	r3, [r3, #0]
 804116c:	f003 0304 	and.w	r3, r3, #4
 8041170:	2b00      	cmp	r3, #0
 8041172:	f000 8109 	beq.w	8041388 <HAL_RCC_OscConfig+0x678>
  {
    FlagStatus       pwrclkchanged = RESET;
 8041176:	2300      	movs	r3, #0
 8041178:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 804117a:	4b3e      	ldr	r3, [pc, #248]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 804117c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041182:	2b00      	cmp	r3, #0
 8041184:	d10d      	bne.n	80411a2 <HAL_RCC_OscConfig+0x492>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8041186:	4b3b      	ldr	r3, [pc, #236]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 8041188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804118a:	4a3a      	ldr	r2, [pc, #232]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 804118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041190:	6593      	str	r3, [r2, #88]	; 0x58
 8041192:	4b38      	ldr	r3, [pc, #224]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 8041194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804119a:	60bb      	str	r3, [r7, #8]
 804119c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 804119e:	2301      	movs	r3, #1
 80411a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80411a2:	4b35      	ldr	r3, [pc, #212]	; (8041278 <HAL_RCC_OscConfig+0x568>)
 80411a4:	681b      	ldr	r3, [r3, #0]
 80411a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80411aa:	2b00      	cmp	r3, #0
 80411ac:	d118      	bne.n	80411e0 <HAL_RCC_OscConfig+0x4d0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80411ae:	4b32      	ldr	r3, [pc, #200]	; (8041278 <HAL_RCC_OscConfig+0x568>)
 80411b0:	681b      	ldr	r3, [r3, #0]
 80411b2:	4a31      	ldr	r2, [pc, #196]	; (8041278 <HAL_RCC_OscConfig+0x568>)
 80411b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80411b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80411ba:	f7ff fa7d 	bl	80406b8 <HAL_GetTick>
 80411be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80411c0:	e008      	b.n	80411d4 <HAL_RCC_OscConfig+0x4c4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80411c2:	f7ff fa79 	bl	80406b8 <HAL_GetTick>
 80411c6:	4602      	mov	r2, r0
 80411c8:	693b      	ldr	r3, [r7, #16]
 80411ca:	1ad3      	subs	r3, r2, r3
 80411cc:	2b02      	cmp	r3, #2
 80411ce:	d901      	bls.n	80411d4 <HAL_RCC_OscConfig+0x4c4>
        {
          return HAL_TIMEOUT;
 80411d0:	2303      	movs	r3, #3
 80411d2:	e1f9      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80411d4:	4b28      	ldr	r3, [pc, #160]	; (8041278 <HAL_RCC_OscConfig+0x568>)
 80411d6:	681b      	ldr	r3, [r3, #0]
 80411d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80411dc:	2b00      	cmp	r3, #0
 80411de:	d0f0      	beq.n	80411c2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80411e0:	687b      	ldr	r3, [r7, #4]
 80411e2:	689b      	ldr	r3, [r3, #8]
 80411e4:	f003 0301 	and.w	r3, r3, #1
 80411e8:	2b00      	cmp	r3, #0
 80411ea:	d01f      	beq.n	804122c <HAL_RCC_OscConfig+0x51c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80411ec:	687b      	ldr	r3, [r7, #4]
 80411ee:	689b      	ldr	r3, [r3, #8]
 80411f0:	f003 0304 	and.w	r3, r3, #4
 80411f4:	2b00      	cmp	r3, #0
 80411f6:	d010      	beq.n	804121a <HAL_RCC_OscConfig+0x50a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80411f8:	4b1e      	ldr	r3, [pc, #120]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 80411fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80411fe:	4a1d      	ldr	r2, [pc, #116]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 8041200:	f043 0304 	orr.w	r3, r3, #4
 8041204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8041208:	4b1a      	ldr	r3, [pc, #104]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 804120a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804120e:	4a19      	ldr	r2, [pc, #100]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 8041210:	f043 0301 	orr.w	r3, r3, #1
 8041214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8041218:	e018      	b.n	804124c <HAL_RCC_OscConfig+0x53c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 804121a:	4b16      	ldr	r3, [pc, #88]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 804121c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041220:	4a14      	ldr	r2, [pc, #80]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 8041222:	f043 0301 	orr.w	r3, r3, #1
 8041226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 804122a:	e00f      	b.n	804124c <HAL_RCC_OscConfig+0x53c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 804122c:	4b11      	ldr	r3, [pc, #68]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 804122e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041232:	4a10      	ldr	r2, [pc, #64]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 8041234:	f023 0301 	bic.w	r3, r3, #1
 8041238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 804123c:	4b0d      	ldr	r3, [pc, #52]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 804123e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041242:	4a0c      	ldr	r2, [pc, #48]	; (8041274 <HAL_RCC_OscConfig+0x564>)
 8041244:	f023 0304 	bic.w	r3, r3, #4
 8041248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 804124c:	687b      	ldr	r3, [r7, #4]
 804124e:	689b      	ldr	r3, [r3, #8]
 8041250:	2b00      	cmp	r3, #0
 8041252:	d058      	beq.n	8041306 <HAL_RCC_OscConfig+0x5f6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041254:	f7ff fa30 	bl	80406b8 <HAL_GetTick>
 8041258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 804125a:	e00f      	b.n	804127c <HAL_RCC_OscConfig+0x56c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804125c:	f7ff fa2c 	bl	80406b8 <HAL_GetTick>
 8041260:	4602      	mov	r2, r0
 8041262:	693b      	ldr	r3, [r7, #16]
 8041264:	1ad3      	subs	r3, r2, r3
 8041266:	f241 3288 	movw	r2, #5000	; 0x1388
 804126a:	4293      	cmp	r3, r2
 804126c:	d906      	bls.n	804127c <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 804126e:	2303      	movs	r3, #3
 8041270:	e1aa      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
 8041272:	bf00      	nop
 8041274:	40021000 	.word	0x40021000
 8041278:	40007000 	.word	0x40007000
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 804127c:	4bb0      	ldr	r3, [pc, #704]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 804127e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041282:	f003 0302 	and.w	r3, r3, #2
 8041286:	2b00      	cmp	r3, #0
 8041288:	d0e8      	beq.n	804125c <HAL_RCC_OscConfig+0x54c>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 804128a:	687b      	ldr	r3, [r7, #4]
 804128c:	689b      	ldr	r3, [r3, #8]
 804128e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041292:	2b00      	cmp	r3, #0
 8041294:	d01b      	beq.n	80412ce <HAL_RCC_OscConfig+0x5be>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8041296:	4baa      	ldr	r3, [pc, #680]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 8041298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804129c:	4aa8      	ldr	r2, [pc, #672]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 804129e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80412a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80412a6:	e00a      	b.n	80412be <HAL_RCC_OscConfig+0x5ae>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80412a8:	f7ff fa06 	bl	80406b8 <HAL_GetTick>
 80412ac:	4602      	mov	r2, r0
 80412ae:	693b      	ldr	r3, [r7, #16]
 80412b0:	1ad3      	subs	r3, r2, r3
 80412b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80412b6:	4293      	cmp	r3, r2
 80412b8:	d901      	bls.n	80412be <HAL_RCC_OscConfig+0x5ae>
          {
            return HAL_TIMEOUT;
 80412ba:	2303      	movs	r3, #3
 80412bc:	e184      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80412be:	4ba0      	ldr	r3, [pc, #640]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 80412c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80412c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80412c8:	2b00      	cmp	r3, #0
 80412ca:	d0ed      	beq.n	80412a8 <HAL_RCC_OscConfig+0x598>
 80412cc:	e053      	b.n	8041376 <HAL_RCC_OscConfig+0x666>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80412ce:	4b9c      	ldr	r3, [pc, #624]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 80412d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80412d4:	4a9a      	ldr	r2, [pc, #616]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 80412d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80412da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80412de:	e00a      	b.n	80412f6 <HAL_RCC_OscConfig+0x5e6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80412e0:	f7ff f9ea 	bl	80406b8 <HAL_GetTick>
 80412e4:	4602      	mov	r2, r0
 80412e6:	693b      	ldr	r3, [r7, #16]
 80412e8:	1ad3      	subs	r3, r2, r3
 80412ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80412ee:	4293      	cmp	r3, r2
 80412f0:	d901      	bls.n	80412f6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80412f2:	2303      	movs	r3, #3
 80412f4:	e168      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80412f6:	4b92      	ldr	r3, [pc, #584]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 80412f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80412fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8041300:	2b00      	cmp	r3, #0
 8041302:	d1ed      	bne.n	80412e0 <HAL_RCC_OscConfig+0x5d0>
 8041304:	e037      	b.n	8041376 <HAL_RCC_OscConfig+0x666>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041306:	f7ff f9d7 	bl	80406b8 <HAL_GetTick>
 804130a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 804130c:	e00a      	b.n	8041324 <HAL_RCC_OscConfig+0x614>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804130e:	f7ff f9d3 	bl	80406b8 <HAL_GetTick>
 8041312:	4602      	mov	r2, r0
 8041314:	693b      	ldr	r3, [r7, #16]
 8041316:	1ad3      	subs	r3, r2, r3
 8041318:	f241 3288 	movw	r2, #5000	; 0x1388
 804131c:	4293      	cmp	r3, r2
 804131e:	d901      	bls.n	8041324 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_TIMEOUT;
 8041320:	2303      	movs	r3, #3
 8041322:	e151      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8041324:	4b86      	ldr	r3, [pc, #536]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 8041326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804132a:	f003 0302 	and.w	r3, r3, #2
 804132e:	2b00      	cmp	r3, #0
 8041330:	d1ed      	bne.n	804130e <HAL_RCC_OscConfig+0x5fe>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8041332:	4b83      	ldr	r3, [pc, #524]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 8041334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804133c:	2b00      	cmp	r3, #0
 804133e:	d01a      	beq.n	8041376 <HAL_RCC_OscConfig+0x666>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8041340:	4b7f      	ldr	r3, [pc, #508]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 8041342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041346:	4a7e      	ldr	r2, [pc, #504]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 8041348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 804134c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8041350:	e00a      	b.n	8041368 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041352:	f7ff f9b1 	bl	80406b8 <HAL_GetTick>
 8041356:	4602      	mov	r2, r0
 8041358:	693b      	ldr	r3, [r7, #16]
 804135a:	1ad3      	subs	r3, r2, r3
 804135c:	f241 3288 	movw	r2, #5000	; 0x1388
 8041360:	4293      	cmp	r3, r2
 8041362:	d901      	bls.n	8041368 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8041364:	2303      	movs	r3, #3
 8041366:	e12f      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8041368:	4b75      	ldr	r3, [pc, #468]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 804136a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804136e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8041372:	2b00      	cmp	r3, #0
 8041374:	d1ed      	bne.n	8041352 <HAL_RCC_OscConfig+0x642>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8041376:	7ffb      	ldrb	r3, [r7, #31]
 8041378:	2b01      	cmp	r3, #1
 804137a:	d105      	bne.n	8041388 <HAL_RCC_OscConfig+0x678>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 804137c:	4b70      	ldr	r3, [pc, #448]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 804137e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041380:	4a6f      	ldr	r2, [pc, #444]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 8041382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041386:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8041388:	687b      	ldr	r3, [r7, #4]
 804138a:	681b      	ldr	r3, [r3, #0]
 804138c:	f003 0320 	and.w	r3, r3, #32
 8041390:	2b00      	cmp	r3, #0
 8041392:	d03c      	beq.n	804140e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8041394:	687b      	ldr	r3, [r7, #4]
 8041396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041398:	2b00      	cmp	r3, #0
 804139a:	d01c      	beq.n	80413d6 <HAL_RCC_OscConfig+0x6c6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 804139c:	4b68      	ldr	r3, [pc, #416]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 804139e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80413a2:	4a67      	ldr	r2, [pc, #412]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 80413a4:	f043 0301 	orr.w	r3, r3, #1
 80413a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80413ac:	f7ff f984 	bl	80406b8 <HAL_GetTick>
 80413b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80413b2:	e008      	b.n	80413c6 <HAL_RCC_OscConfig+0x6b6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80413b4:	f7ff f980 	bl	80406b8 <HAL_GetTick>
 80413b8:	4602      	mov	r2, r0
 80413ba:	693b      	ldr	r3, [r7, #16]
 80413bc:	1ad3      	subs	r3, r2, r3
 80413be:	2b02      	cmp	r3, #2
 80413c0:	d901      	bls.n	80413c6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80413c2:	2303      	movs	r3, #3
 80413c4:	e100      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80413c6:	4b5e      	ldr	r3, [pc, #376]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 80413c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80413cc:	f003 0302 	and.w	r3, r3, #2
 80413d0:	2b00      	cmp	r3, #0
 80413d2:	d0ef      	beq.n	80413b4 <HAL_RCC_OscConfig+0x6a4>
 80413d4:	e01b      	b.n	804140e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80413d6:	4b5a      	ldr	r3, [pc, #360]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 80413d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80413dc:	4a58      	ldr	r2, [pc, #352]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 80413de:	f023 0301 	bic.w	r3, r3, #1
 80413e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80413e6:	f7ff f967 	bl	80406b8 <HAL_GetTick>
 80413ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80413ec:	e008      	b.n	8041400 <HAL_RCC_OscConfig+0x6f0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80413ee:	f7ff f963 	bl	80406b8 <HAL_GetTick>
 80413f2:	4602      	mov	r2, r0
 80413f4:	693b      	ldr	r3, [r7, #16]
 80413f6:	1ad3      	subs	r3, r2, r3
 80413f8:	2b02      	cmp	r3, #2
 80413fa:	d901      	bls.n	8041400 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_TIMEOUT;
 80413fc:	2303      	movs	r3, #3
 80413fe:	e0e3      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8041400:	4b4f      	ldr	r3, [pc, #316]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 8041402:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041406:	f003 0302 	and.w	r3, r3, #2
 804140a:	2b00      	cmp	r3, #0
 804140c:	d1ef      	bne.n	80413ee <HAL_RCC_OscConfig+0x6de>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 804140e:	687b      	ldr	r3, [r7, #4]
 8041410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041412:	2b00      	cmp	r3, #0
 8041414:	f000 80d7 	beq.w	80415c6 <HAL_RCC_OscConfig+0x8b6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8041418:	4b49      	ldr	r3, [pc, #292]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 804141a:	689b      	ldr	r3, [r3, #8]
 804141c:	f003 030c 	and.w	r3, r3, #12
 8041420:	2b0c      	cmp	r3, #12
 8041422:	f000 8091 	beq.w	8041548 <HAL_RCC_OscConfig+0x838>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8041426:	687b      	ldr	r3, [r7, #4]
 8041428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804142a:	2b02      	cmp	r3, #2
 804142c:	d15a      	bne.n	80414e4 <HAL_RCC_OscConfig+0x7d4>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 804142e:	4b44      	ldr	r3, [pc, #272]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 8041430:	681b      	ldr	r3, [r3, #0]
 8041432:	4a43      	ldr	r2, [pc, #268]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 8041434:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804143a:	f7ff f93d 	bl	80406b8 <HAL_GetTick>
 804143e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041440:	e008      	b.n	8041454 <HAL_RCC_OscConfig+0x744>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041442:	f7ff f939 	bl	80406b8 <HAL_GetTick>
 8041446:	4602      	mov	r2, r0
 8041448:	693b      	ldr	r3, [r7, #16]
 804144a:	1ad3      	subs	r3, r2, r3
 804144c:	2b02      	cmp	r3, #2
 804144e:	d901      	bls.n	8041454 <HAL_RCC_OscConfig+0x744>
          {
            return HAL_TIMEOUT;
 8041450:	2303      	movs	r3, #3
 8041452:	e0b9      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041454:	4b3a      	ldr	r3, [pc, #232]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 8041456:	681b      	ldr	r3, [r3, #0]
 8041458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804145c:	2b00      	cmp	r3, #0
 804145e:	d1f0      	bne.n	8041442 <HAL_RCC_OscConfig+0x732>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8041460:	4b37      	ldr	r3, [pc, #220]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 8041462:	68da      	ldr	r2, [r3, #12]
 8041464:	4b37      	ldr	r3, [pc, #220]	; (8041544 <HAL_RCC_OscConfig+0x834>)
 8041466:	4013      	ands	r3, r2
 8041468:	687a      	ldr	r2, [r7, #4]
 804146a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 804146c:	687a      	ldr	r2, [r7, #4]
 804146e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8041470:	3a01      	subs	r2, #1
 8041472:	0112      	lsls	r2, r2, #4
 8041474:	4311      	orrs	r1, r2
 8041476:	687a      	ldr	r2, [r7, #4]
 8041478:	6b92      	ldr	r2, [r2, #56]	; 0x38
 804147a:	0212      	lsls	r2, r2, #8
 804147c:	4311      	orrs	r1, r2
 804147e:	687a      	ldr	r2, [r7, #4]
 8041480:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8041482:	0852      	lsrs	r2, r2, #1
 8041484:	3a01      	subs	r2, #1
 8041486:	0552      	lsls	r2, r2, #21
 8041488:	4311      	orrs	r1, r2
 804148a:	687a      	ldr	r2, [r7, #4]
 804148c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 804148e:	0852      	lsrs	r2, r2, #1
 8041490:	3a01      	subs	r2, #1
 8041492:	0652      	lsls	r2, r2, #25
 8041494:	4311      	orrs	r1, r2
 8041496:	687a      	ldr	r2, [r7, #4]
 8041498:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 804149a:	06d2      	lsls	r2, r2, #27
 804149c:	430a      	orrs	r2, r1
 804149e:	4928      	ldr	r1, [pc, #160]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 80414a0:	4313      	orrs	r3, r2
 80414a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80414a4:	4b26      	ldr	r3, [pc, #152]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 80414a6:	681b      	ldr	r3, [r3, #0]
 80414a8:	4a25      	ldr	r2, [pc, #148]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 80414aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80414ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80414b0:	4b23      	ldr	r3, [pc, #140]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 80414b2:	68db      	ldr	r3, [r3, #12]
 80414b4:	4a22      	ldr	r2, [pc, #136]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 80414b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80414ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80414bc:	f7ff f8fc 	bl	80406b8 <HAL_GetTick>
 80414c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80414c2:	e008      	b.n	80414d6 <HAL_RCC_OscConfig+0x7c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80414c4:	f7ff f8f8 	bl	80406b8 <HAL_GetTick>
 80414c8:	4602      	mov	r2, r0
 80414ca:	693b      	ldr	r3, [r7, #16]
 80414cc:	1ad3      	subs	r3, r2, r3
 80414ce:	2b02      	cmp	r3, #2
 80414d0:	d901      	bls.n	80414d6 <HAL_RCC_OscConfig+0x7c6>
          {
            return HAL_TIMEOUT;
 80414d2:	2303      	movs	r3, #3
 80414d4:	e078      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80414d6:	4b1a      	ldr	r3, [pc, #104]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 80414d8:	681b      	ldr	r3, [r3, #0]
 80414da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80414de:	2b00      	cmp	r3, #0
 80414e0:	d0f0      	beq.n	80414c4 <HAL_RCC_OscConfig+0x7b4>
 80414e2:	e070      	b.n	80415c6 <HAL_RCC_OscConfig+0x8b6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80414e4:	4b16      	ldr	r3, [pc, #88]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 80414e6:	681b      	ldr	r3, [r3, #0]
 80414e8:	4a15      	ldr	r2, [pc, #84]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 80414ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80414ee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80414f0:	4b13      	ldr	r3, [pc, #76]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 80414f2:	681b      	ldr	r3, [r3, #0]
 80414f4:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80414f8:	2b00      	cmp	r3, #0
 80414fa:	d105      	bne.n	8041508 <HAL_RCC_OscConfig+0x7f8>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80414fc:	4b10      	ldr	r3, [pc, #64]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 80414fe:	68db      	ldr	r3, [r3, #12]
 8041500:	4a0f      	ldr	r2, [pc, #60]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 8041502:	f023 0303 	bic.w	r3, r3, #3
 8041506:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8041508:	4b0d      	ldr	r3, [pc, #52]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 804150a:	68db      	ldr	r3, [r3, #12]
 804150c:	4a0c      	ldr	r2, [pc, #48]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 804150e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8041512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041516:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041518:	f7ff f8ce 	bl	80406b8 <HAL_GetTick>
 804151c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 804151e:	e008      	b.n	8041532 <HAL_RCC_OscConfig+0x822>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041520:	f7ff f8ca 	bl	80406b8 <HAL_GetTick>
 8041524:	4602      	mov	r2, r0
 8041526:	693b      	ldr	r3, [r7, #16]
 8041528:	1ad3      	subs	r3, r2, r3
 804152a:	2b02      	cmp	r3, #2
 804152c:	d901      	bls.n	8041532 <HAL_RCC_OscConfig+0x822>
          {
            return HAL_TIMEOUT;
 804152e:	2303      	movs	r3, #3
 8041530:	e04a      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041532:	4b03      	ldr	r3, [pc, #12]	; (8041540 <HAL_RCC_OscConfig+0x830>)
 8041534:	681b      	ldr	r3, [r3, #0]
 8041536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804153a:	2b00      	cmp	r3, #0
 804153c:	d1f0      	bne.n	8041520 <HAL_RCC_OscConfig+0x810>
 804153e:	e042      	b.n	80415c6 <HAL_RCC_OscConfig+0x8b6>
 8041540:	40021000 	.word	0x40021000
 8041544:	019f800c 	.word	0x019f800c
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8041548:	687b      	ldr	r3, [r7, #4]
 804154a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804154c:	2b01      	cmp	r3, #1
 804154e:	d101      	bne.n	8041554 <HAL_RCC_OscConfig+0x844>
      {
        return HAL_ERROR;
 8041550:	2301      	movs	r3, #1
 8041552:	e039      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8041554:	4b1e      	ldr	r3, [pc, #120]	; (80415d0 <HAL_RCC_OscConfig+0x8c0>)
 8041556:	68db      	ldr	r3, [r3, #12]
 8041558:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 804155a:	697b      	ldr	r3, [r7, #20]
 804155c:	f003 0203 	and.w	r2, r3, #3
 8041560:	687b      	ldr	r3, [r7, #4]
 8041562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041564:	429a      	cmp	r2, r3
 8041566:	d12c      	bne.n	80415c2 <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8041568:	697b      	ldr	r3, [r7, #20]
 804156a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 804156e:	687b      	ldr	r3, [r7, #4]
 8041570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041572:	3b01      	subs	r3, #1
 8041574:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8041576:	429a      	cmp	r2, r3
 8041578:	d123      	bne.n	80415c2 <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 804157a:	697b      	ldr	r3, [r7, #20]
 804157c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8041580:	687b      	ldr	r3, [r7, #4]
 8041582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041584:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8041586:	429a      	cmp	r2, r3
 8041588:	d11b      	bne.n	80415c2 <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 804158a:	697b      	ldr	r3, [r7, #20]
 804158c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8041590:	687b      	ldr	r3, [r7, #4]
 8041592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041594:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8041596:	429a      	cmp	r2, r3
 8041598:	d113      	bne.n	80415c2 <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 804159a:	697b      	ldr	r3, [r7, #20]
 804159c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80415a0:	687b      	ldr	r3, [r7, #4]
 80415a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80415a4:	085b      	lsrs	r3, r3, #1
 80415a6:	3b01      	subs	r3, #1
 80415a8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80415aa:	429a      	cmp	r2, r3
 80415ac:	d109      	bne.n	80415c2 <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80415ae:	697b      	ldr	r3, [r7, #20]
 80415b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80415b4:	687b      	ldr	r3, [r7, #4]
 80415b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80415b8:	085b      	lsrs	r3, r3, #1
 80415ba:	3b01      	subs	r3, #1
 80415bc:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80415be:	429a      	cmp	r2, r3
 80415c0:	d001      	beq.n	80415c6 <HAL_RCC_OscConfig+0x8b6>
        {
          return HAL_ERROR;
 80415c2:	2301      	movs	r3, #1
 80415c4:	e000      	b.n	80415c8 <HAL_RCC_OscConfig+0x8b8>
        }
      }
    }
  }

  return HAL_OK;
 80415c6:	2300      	movs	r3, #0
}
 80415c8:	4618      	mov	r0, r3
 80415ca:	3720      	adds	r7, #32
 80415cc:	46bd      	mov	sp, r7
 80415ce:	bd80      	pop	{r7, pc}
 80415d0:	40021000 	.word	0x40021000

080415d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80415d4:	b580      	push	{r7, lr}
 80415d6:	b086      	sub	sp, #24
 80415d8:	af00      	add	r7, sp, #0
 80415da:	6078      	str	r0, [r7, #4]
 80415dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80415de:	2300      	movs	r3, #0
 80415e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80415e2:	687b      	ldr	r3, [r7, #4]
 80415e4:	2b00      	cmp	r3, #0
 80415e6:	d101      	bne.n	80415ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80415e8:	2301      	movs	r3, #1
 80415ea:	e104      	b.n	80417f6 <HAL_RCC_ClockConfig+0x222>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80415ec:	4b84      	ldr	r3, [pc, #528]	; (8041800 <HAL_RCC_ClockConfig+0x22c>)
 80415ee:	681b      	ldr	r3, [r3, #0]
 80415f0:	f003 030f 	and.w	r3, r3, #15
 80415f4:	683a      	ldr	r2, [r7, #0]
 80415f6:	429a      	cmp	r2, r3
 80415f8:	d910      	bls.n	804161c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80415fa:	4b81      	ldr	r3, [pc, #516]	; (8041800 <HAL_RCC_ClockConfig+0x22c>)
 80415fc:	681b      	ldr	r3, [r3, #0]
 80415fe:	f023 020f 	bic.w	r2, r3, #15
 8041602:	497f      	ldr	r1, [pc, #508]	; (8041800 <HAL_RCC_ClockConfig+0x22c>)
 8041604:	683b      	ldr	r3, [r7, #0]
 8041606:	4313      	orrs	r3, r2
 8041608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 804160a:	4b7d      	ldr	r3, [pc, #500]	; (8041800 <HAL_RCC_ClockConfig+0x22c>)
 804160c:	681b      	ldr	r3, [r3, #0]
 804160e:	f003 030f 	and.w	r3, r3, #15
 8041612:	683a      	ldr	r2, [r7, #0]
 8041614:	429a      	cmp	r2, r3
 8041616:	d001      	beq.n	804161c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8041618:	2301      	movs	r3, #1
 804161a:	e0ec      	b.n	80417f6 <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 804161c:	687b      	ldr	r3, [r7, #4]
 804161e:	681b      	ldr	r3, [r3, #0]
 8041620:	f003 0301 	and.w	r3, r3, #1
 8041624:	2b00      	cmp	r3, #0
 8041626:	f000 808b 	beq.w	8041740 <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 804162a:	687b      	ldr	r3, [r7, #4]
 804162c:	685b      	ldr	r3, [r3, #4]
 804162e:	2b03      	cmp	r3, #3
 8041630:	d134      	bne.n	804169c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8041632:	4b74      	ldr	r3, [pc, #464]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 8041634:	681b      	ldr	r3, [r3, #0]
 8041636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804163a:	2b00      	cmp	r3, #0
 804163c:	d101      	bne.n	8041642 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 804163e:	2301      	movs	r3, #1
 8041640:	e0d9      	b.n	80417f6 <HAL_RCC_ClockConfig+0x222>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8041642:	f000 fa3f 	bl	8041ac4 <RCC_GetSysClockFreqFromPLLSource>
 8041646:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8041648:	693b      	ldr	r3, [r7, #16]
 804164a:	4a6f      	ldr	r2, [pc, #444]	; (8041808 <HAL_RCC_ClockConfig+0x234>)
 804164c:	4293      	cmp	r3, r2
 804164e:	d956      	bls.n	80416fe <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8041650:	4b6c      	ldr	r3, [pc, #432]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 8041652:	689b      	ldr	r3, [r3, #8]
 8041654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8041658:	2b00      	cmp	r3, #0
 804165a:	d10a      	bne.n	8041672 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 804165c:	4b69      	ldr	r3, [pc, #420]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 804165e:	689b      	ldr	r3, [r3, #8]
 8041660:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8041664:	4a67      	ldr	r2, [pc, #412]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 8041666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804166a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 804166c:	2380      	movs	r3, #128	; 0x80
 804166e:	617b      	str	r3, [r7, #20]
 8041670:	e045      	b.n	80416fe <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8041672:	687b      	ldr	r3, [r7, #4]
 8041674:	681b      	ldr	r3, [r3, #0]
 8041676:	f003 0302 	and.w	r3, r3, #2
 804167a:	2b00      	cmp	r3, #0
 804167c:	d03f      	beq.n	80416fe <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 804167e:	687b      	ldr	r3, [r7, #4]
 8041680:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8041682:	2b00      	cmp	r3, #0
 8041684:	d13b      	bne.n	80416fe <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8041686:	4b5f      	ldr	r3, [pc, #380]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 8041688:	689b      	ldr	r3, [r3, #8]
 804168a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 804168e:	4a5d      	ldr	r2, [pc, #372]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 8041690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8041694:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8041696:	2380      	movs	r3, #128	; 0x80
 8041698:	617b      	str	r3, [r7, #20]
 804169a:	e030      	b.n	80416fe <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 804169c:	687b      	ldr	r3, [r7, #4]
 804169e:	685b      	ldr	r3, [r3, #4]
 80416a0:	2b02      	cmp	r3, #2
 80416a2:	d107      	bne.n	80416b4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80416a4:	4b57      	ldr	r3, [pc, #348]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 80416a6:	681b      	ldr	r3, [r3, #0]
 80416a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80416ac:	2b00      	cmp	r3, #0
 80416ae:	d115      	bne.n	80416dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80416b0:	2301      	movs	r3, #1
 80416b2:	e0a0      	b.n	80417f6 <HAL_RCC_ClockConfig+0x222>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80416b4:	687b      	ldr	r3, [r7, #4]
 80416b6:	685b      	ldr	r3, [r3, #4]
 80416b8:	2b00      	cmp	r3, #0
 80416ba:	d107      	bne.n	80416cc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80416bc:	4b51      	ldr	r3, [pc, #324]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 80416be:	681b      	ldr	r3, [r3, #0]
 80416c0:	f003 0302 	and.w	r3, r3, #2
 80416c4:	2b00      	cmp	r3, #0
 80416c6:	d109      	bne.n	80416dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80416c8:	2301      	movs	r3, #1
 80416ca:	e094      	b.n	80417f6 <HAL_RCC_ClockConfig+0x222>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80416cc:	4b4d      	ldr	r3, [pc, #308]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 80416ce:	681b      	ldr	r3, [r3, #0]
 80416d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80416d4:	2b00      	cmp	r3, #0
 80416d6:	d101      	bne.n	80416dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80416d8:	2301      	movs	r3, #1
 80416da:	e08c      	b.n	80417f6 <HAL_RCC_ClockConfig+0x222>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80416dc:	f000 f89a 	bl	8041814 <HAL_RCC_GetSysClockFreq>
 80416e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80416e2:	693b      	ldr	r3, [r7, #16]
 80416e4:	4a48      	ldr	r2, [pc, #288]	; (8041808 <HAL_RCC_ClockConfig+0x234>)
 80416e6:	4293      	cmp	r3, r2
 80416e8:	d909      	bls.n	80416fe <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80416ea:	4b46      	ldr	r3, [pc, #280]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 80416ec:	689b      	ldr	r3, [r3, #8]
 80416ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80416f2:	4a44      	ldr	r2, [pc, #272]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 80416f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80416f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80416fa:	2380      	movs	r3, #128	; 0x80
 80416fc:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80416fe:	4b41      	ldr	r3, [pc, #260]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 8041700:	689b      	ldr	r3, [r3, #8]
 8041702:	f023 0203 	bic.w	r2, r3, #3
 8041706:	687b      	ldr	r3, [r7, #4]
 8041708:	685b      	ldr	r3, [r3, #4]
 804170a:	493e      	ldr	r1, [pc, #248]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 804170c:	4313      	orrs	r3, r2
 804170e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041710:	f7fe ffd2 	bl	80406b8 <HAL_GetTick>
 8041714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041716:	e00a      	b.n	804172e <HAL_RCC_ClockConfig+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8041718:	f7fe ffce 	bl	80406b8 <HAL_GetTick>
 804171c:	4602      	mov	r2, r0
 804171e:	68fb      	ldr	r3, [r7, #12]
 8041720:	1ad3      	subs	r3, r2, r3
 8041722:	f241 3288 	movw	r2, #5000	; 0x1388
 8041726:	4293      	cmp	r3, r2
 8041728:	d901      	bls.n	804172e <HAL_RCC_ClockConfig+0x15a>
      {
        return HAL_TIMEOUT;
 804172a:	2303      	movs	r3, #3
 804172c:	e063      	b.n	80417f6 <HAL_RCC_ClockConfig+0x222>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804172e:	4b35      	ldr	r3, [pc, #212]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 8041730:	689b      	ldr	r3, [r3, #8]
 8041732:	f003 020c 	and.w	r2, r3, #12
 8041736:	687b      	ldr	r3, [r7, #4]
 8041738:	685b      	ldr	r3, [r3, #4]
 804173a:	009b      	lsls	r3, r3, #2
 804173c:	429a      	cmp	r2, r3
 804173e:	d1eb      	bne.n	8041718 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041740:	687b      	ldr	r3, [r7, #4]
 8041742:	681b      	ldr	r3, [r3, #0]
 8041744:	f003 0302 	and.w	r3, r3, #2
 8041748:	2b00      	cmp	r3, #0
 804174a:	d009      	beq.n	8041760 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 804174c:	4b2d      	ldr	r3, [pc, #180]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 804174e:	689b      	ldr	r3, [r3, #8]
 8041750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8041754:	687b      	ldr	r3, [r7, #4]
 8041756:	689b      	ldr	r3, [r3, #8]
 8041758:	492a      	ldr	r1, [pc, #168]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 804175a:	4313      	orrs	r3, r2
 804175c:	608b      	str	r3, [r1, #8]
 804175e:	e008      	b.n	8041772 <HAL_RCC_ClockConfig+0x19e>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8041760:	697b      	ldr	r3, [r7, #20]
 8041762:	2b80      	cmp	r3, #128	; 0x80
 8041764:	d105      	bne.n	8041772 <HAL_RCC_ClockConfig+0x19e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8041766:	4b27      	ldr	r3, [pc, #156]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 8041768:	689b      	ldr	r3, [r3, #8]
 804176a:	4a26      	ldr	r2, [pc, #152]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 804176c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8041770:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8041772:	4b23      	ldr	r3, [pc, #140]	; (8041800 <HAL_RCC_ClockConfig+0x22c>)
 8041774:	681b      	ldr	r3, [r3, #0]
 8041776:	f003 030f 	and.w	r3, r3, #15
 804177a:	683a      	ldr	r2, [r7, #0]
 804177c:	429a      	cmp	r2, r3
 804177e:	d210      	bcs.n	80417a2 <HAL_RCC_ClockConfig+0x1ce>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041780:	4b1f      	ldr	r3, [pc, #124]	; (8041800 <HAL_RCC_ClockConfig+0x22c>)
 8041782:	681b      	ldr	r3, [r3, #0]
 8041784:	f023 020f 	bic.w	r2, r3, #15
 8041788:	491d      	ldr	r1, [pc, #116]	; (8041800 <HAL_RCC_ClockConfig+0x22c>)
 804178a:	683b      	ldr	r3, [r7, #0]
 804178c:	4313      	orrs	r3, r2
 804178e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041790:	4b1b      	ldr	r3, [pc, #108]	; (8041800 <HAL_RCC_ClockConfig+0x22c>)
 8041792:	681b      	ldr	r3, [r3, #0]
 8041794:	f003 030f 	and.w	r3, r3, #15
 8041798:	683a      	ldr	r2, [r7, #0]
 804179a:	429a      	cmp	r2, r3
 804179c:	d001      	beq.n	80417a2 <HAL_RCC_ClockConfig+0x1ce>
    {
      return HAL_ERROR;
 804179e:	2301      	movs	r3, #1
 80417a0:	e029      	b.n	80417f6 <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80417a2:	687b      	ldr	r3, [r7, #4]
 80417a4:	681b      	ldr	r3, [r3, #0]
 80417a6:	f003 0304 	and.w	r3, r3, #4
 80417aa:	2b00      	cmp	r3, #0
 80417ac:	d008      	beq.n	80417c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80417ae:	4b15      	ldr	r3, [pc, #84]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 80417b0:	689b      	ldr	r3, [r3, #8]
 80417b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80417b6:	687b      	ldr	r3, [r7, #4]
 80417b8:	68db      	ldr	r3, [r3, #12]
 80417ba:	4912      	ldr	r1, [pc, #72]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 80417bc:	4313      	orrs	r3, r2
 80417be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80417c0:	687b      	ldr	r3, [r7, #4]
 80417c2:	681b      	ldr	r3, [r3, #0]
 80417c4:	f003 0308 	and.w	r3, r3, #8
 80417c8:	2b00      	cmp	r3, #0
 80417ca:	d009      	beq.n	80417e0 <HAL_RCC_ClockConfig+0x20c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80417cc:	4b0d      	ldr	r3, [pc, #52]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 80417ce:	689b      	ldr	r3, [r3, #8]
 80417d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80417d4:	687b      	ldr	r3, [r7, #4]
 80417d6:	691b      	ldr	r3, [r3, #16]
 80417d8:	00db      	lsls	r3, r3, #3
 80417da:	490a      	ldr	r1, [pc, #40]	; (8041804 <HAL_RCC_ClockConfig+0x230>)
 80417dc:	4313      	orrs	r3, r2
 80417de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80417e0:	f000 f8b2 	bl	8041948 <HAL_RCC_GetHCLKFreq>
 80417e4:	4602      	mov	r2, r0
 80417e6:	4b09      	ldr	r3, [pc, #36]	; (804180c <HAL_RCC_ClockConfig+0x238>)
 80417e8:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80417ea:	4b09      	ldr	r3, [pc, #36]	; (8041810 <HAL_RCC_ClockConfig+0x23c>)
 80417ec:	681b      	ldr	r3, [r3, #0]
 80417ee:	4618      	mov	r0, r3
 80417f0:	f7fe fe42 	bl	8040478 <HAL_InitTick>
 80417f4:	4603      	mov	r3, r0
}
 80417f6:	4618      	mov	r0, r3
 80417f8:	3718      	adds	r7, #24
 80417fa:	46bd      	mov	sp, r7
 80417fc:	bd80      	pop	{r7, pc}
 80417fe:	bf00      	nop
 8041800:	40022000 	.word	0x40022000
 8041804:	40021000 	.word	0x40021000
 8041808:	04c4b400 	.word	0x04c4b400
 804180c:	20018014 	.word	0x20018014
 8041810:	20018018 	.word	0x20018018

08041814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8041814:	b480      	push	{r7}
 8041816:	b089      	sub	sp, #36	; 0x24
 8041818:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 804181a:	2300      	movs	r3, #0
 804181c:	61fb      	str	r3, [r7, #28]
 804181e:	2300      	movs	r3, #0
 8041820:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8041822:	4b46      	ldr	r3, [pc, #280]	; (804193c <HAL_RCC_GetSysClockFreq+0x128>)
 8041824:	689b      	ldr	r3, [r3, #8]
 8041826:	f003 030c 	and.w	r3, r3, #12
 804182a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 804182c:	4b43      	ldr	r3, [pc, #268]	; (804193c <HAL_RCC_GetSysClockFreq+0x128>)
 804182e:	68db      	ldr	r3, [r3, #12]
 8041830:	f003 0303 	and.w	r3, r3, #3
 8041834:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8041836:	693b      	ldr	r3, [r7, #16]
 8041838:	2b00      	cmp	r3, #0
 804183a:	d005      	beq.n	8041848 <HAL_RCC_GetSysClockFreq+0x34>
 804183c:	693b      	ldr	r3, [r7, #16]
 804183e:	2b0c      	cmp	r3, #12
 8041840:	d121      	bne.n	8041886 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8041842:	68fb      	ldr	r3, [r7, #12]
 8041844:	2b01      	cmp	r3, #1
 8041846:	d11e      	bne.n	8041886 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8041848:	4b3c      	ldr	r3, [pc, #240]	; (804193c <HAL_RCC_GetSysClockFreq+0x128>)
 804184a:	681b      	ldr	r3, [r3, #0]
 804184c:	f003 0308 	and.w	r3, r3, #8
 8041850:	2b00      	cmp	r3, #0
 8041852:	d107      	bne.n	8041864 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8041854:	4b39      	ldr	r3, [pc, #228]	; (804193c <HAL_RCC_GetSysClockFreq+0x128>)
 8041856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 804185a:	0a1b      	lsrs	r3, r3, #8
 804185c:	f003 030f 	and.w	r3, r3, #15
 8041860:	61fb      	str	r3, [r7, #28]
 8041862:	e005      	b.n	8041870 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8041864:	4b35      	ldr	r3, [pc, #212]	; (804193c <HAL_RCC_GetSysClockFreq+0x128>)
 8041866:	681b      	ldr	r3, [r3, #0]
 8041868:	091b      	lsrs	r3, r3, #4
 804186a:	f003 030f 	and.w	r3, r3, #15
 804186e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8041870:	4a33      	ldr	r2, [pc, #204]	; (8041940 <HAL_RCC_GetSysClockFreq+0x12c>)
 8041872:	69fb      	ldr	r3, [r7, #28]
 8041874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041878:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 804187a:	693b      	ldr	r3, [r7, #16]
 804187c:	2b00      	cmp	r3, #0
 804187e:	d10d      	bne.n	804189c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8041880:	69fb      	ldr	r3, [r7, #28]
 8041882:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8041884:	e00a      	b.n	804189c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8041886:	693b      	ldr	r3, [r7, #16]
 8041888:	2b04      	cmp	r3, #4
 804188a:	d102      	bne.n	8041892 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 804188c:	4b2d      	ldr	r3, [pc, #180]	; (8041944 <HAL_RCC_GetSysClockFreq+0x130>)
 804188e:	61bb      	str	r3, [r7, #24]
 8041890:	e004      	b.n	804189c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8041892:	693b      	ldr	r3, [r7, #16]
 8041894:	2b08      	cmp	r3, #8
 8041896:	d101      	bne.n	804189c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8041898:	4b2a      	ldr	r3, [pc, #168]	; (8041944 <HAL_RCC_GetSysClockFreq+0x130>)
 804189a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 804189c:	693b      	ldr	r3, [r7, #16]
 804189e:	2b0c      	cmp	r3, #12
 80418a0:	d145      	bne.n	804192e <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80418a2:	4b26      	ldr	r3, [pc, #152]	; (804193c <HAL_RCC_GetSysClockFreq+0x128>)
 80418a4:	68db      	ldr	r3, [r3, #12]
 80418a6:	f003 0303 	and.w	r3, r3, #3
 80418aa:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80418ac:	4b23      	ldr	r3, [pc, #140]	; (804193c <HAL_RCC_GetSysClockFreq+0x128>)
 80418ae:	68db      	ldr	r3, [r3, #12]
 80418b0:	091b      	lsrs	r3, r3, #4
 80418b2:	f003 030f 	and.w	r3, r3, #15
 80418b6:	3301      	adds	r3, #1
 80418b8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80418ba:	68bb      	ldr	r3, [r7, #8]
 80418bc:	2b02      	cmp	r3, #2
 80418be:	d002      	beq.n	80418c6 <HAL_RCC_GetSysClockFreq+0xb2>
 80418c0:	2b03      	cmp	r3, #3
 80418c2:	d00d      	beq.n	80418e0 <HAL_RCC_GetSysClockFreq+0xcc>
 80418c4:	e019      	b.n	80418fa <HAL_RCC_GetSysClockFreq+0xe6>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80418c6:	4a1f      	ldr	r2, [pc, #124]	; (8041944 <HAL_RCC_GetSysClockFreq+0x130>)
 80418c8:	687b      	ldr	r3, [r7, #4]
 80418ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80418ce:	4a1b      	ldr	r2, [pc, #108]	; (804193c <HAL_RCC_GetSysClockFreq+0x128>)
 80418d0:	68d2      	ldr	r2, [r2, #12]
 80418d2:	0a12      	lsrs	r2, r2, #8
 80418d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80418d8:	fb02 f303 	mul.w	r3, r2, r3
 80418dc:	617b      	str	r3, [r7, #20]
        break;
 80418de:	e019      	b.n	8041914 <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80418e0:	4a18      	ldr	r2, [pc, #96]	; (8041944 <HAL_RCC_GetSysClockFreq+0x130>)
 80418e2:	687b      	ldr	r3, [r7, #4]
 80418e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80418e8:	4a14      	ldr	r2, [pc, #80]	; (804193c <HAL_RCC_GetSysClockFreq+0x128>)
 80418ea:	68d2      	ldr	r2, [r2, #12]
 80418ec:	0a12      	lsrs	r2, r2, #8
 80418ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80418f2:	fb02 f303 	mul.w	r3, r2, r3
 80418f6:	617b      	str	r3, [r7, #20]
        break;
 80418f8:	e00c      	b.n	8041914 <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80418fa:	69fa      	ldr	r2, [r7, #28]
 80418fc:	687b      	ldr	r3, [r7, #4]
 80418fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8041902:	4a0e      	ldr	r2, [pc, #56]	; (804193c <HAL_RCC_GetSysClockFreq+0x128>)
 8041904:	68d2      	ldr	r2, [r2, #12]
 8041906:	0a12      	lsrs	r2, r2, #8
 8041908:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804190c:	fb02 f303 	mul.w	r3, r2, r3
 8041910:	617b      	str	r3, [r7, #20]
        break;
 8041912:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8041914:	4b09      	ldr	r3, [pc, #36]	; (804193c <HAL_RCC_GetSysClockFreq+0x128>)
 8041916:	68db      	ldr	r3, [r3, #12]
 8041918:	0e5b      	lsrs	r3, r3, #25
 804191a:	f003 0303 	and.w	r3, r3, #3
 804191e:	3301      	adds	r3, #1
 8041920:	005b      	lsls	r3, r3, #1
 8041922:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8041924:	697a      	ldr	r2, [r7, #20]
 8041926:	683b      	ldr	r3, [r7, #0]
 8041928:	fbb2 f3f3 	udiv	r3, r2, r3
 804192c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 804192e:	69bb      	ldr	r3, [r7, #24]
}
 8041930:	4618      	mov	r0, r3
 8041932:	3724      	adds	r7, #36	; 0x24
 8041934:	46bd      	mov	sp, r7
 8041936:	f85d 7b04 	ldr.w	r7, [sp], #4
 804193a:	4770      	bx	lr
 804193c:	40021000 	.word	0x40021000
 8041940:	08044aec 	.word	0x08044aec
 8041944:	00f42400 	.word	0x00f42400

08041948 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8041948:	b580      	push	{r7, lr}
 804194a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 804194c:	f7ff ff62 	bl	8041814 <HAL_RCC_GetSysClockFreq>
 8041950:	4601      	mov	r1, r0
 8041952:	4b05      	ldr	r3, [pc, #20]	; (8041968 <HAL_RCC_GetHCLKFreq+0x20>)
 8041954:	689b      	ldr	r3, [r3, #8]
 8041956:	091b      	lsrs	r3, r3, #4
 8041958:	f003 030f 	and.w	r3, r3, #15
 804195c:	4a03      	ldr	r2, [pc, #12]	; (804196c <HAL_RCC_GetHCLKFreq+0x24>)
 804195e:	5cd3      	ldrb	r3, [r2, r3]
 8041960:	fa21 f303 	lsr.w	r3, r1, r3
}
 8041964:	4618      	mov	r0, r3
 8041966:	bd80      	pop	{r7, pc}
 8041968:	40021000 	.word	0x40021000
 804196c:	08044ad4 	.word	0x08044ad4

08041970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8041970:	b580      	push	{r7, lr}
 8041972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8041974:	f7ff ffe8 	bl	8041948 <HAL_RCC_GetHCLKFreq>
 8041978:	4601      	mov	r1, r0
 804197a:	4b05      	ldr	r3, [pc, #20]	; (8041990 <HAL_RCC_GetPCLK1Freq+0x20>)
 804197c:	689b      	ldr	r3, [r3, #8]
 804197e:	0a1b      	lsrs	r3, r3, #8
 8041980:	f003 0307 	and.w	r3, r3, #7
 8041984:	4a03      	ldr	r2, [pc, #12]	; (8041994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8041986:	5cd3      	ldrb	r3, [r2, r3]
 8041988:	fa21 f303 	lsr.w	r3, r1, r3
}
 804198c:	4618      	mov	r0, r3
 804198e:	bd80      	pop	{r7, pc}
 8041990:	40021000 	.word	0x40021000
 8041994:	08044ae4 	.word	0x08044ae4

08041998 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8041998:	b480      	push	{r7}
 804199a:	b083      	sub	sp, #12
 804199c:	af00      	add	r7, sp, #0
 804199e:	6078      	str	r0, [r7, #4]
 80419a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80419a2:	687b      	ldr	r3, [r7, #4]
 80419a4:	220f      	movs	r2, #15
 80419a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80419a8:	4b12      	ldr	r3, [pc, #72]	; (80419f4 <HAL_RCC_GetClockConfig+0x5c>)
 80419aa:	689b      	ldr	r3, [r3, #8]
 80419ac:	f003 0203 	and.w	r2, r3, #3
 80419b0:	687b      	ldr	r3, [r7, #4]
 80419b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80419b4:	4b0f      	ldr	r3, [pc, #60]	; (80419f4 <HAL_RCC_GetClockConfig+0x5c>)
 80419b6:	689b      	ldr	r3, [r3, #8]
 80419b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80419bc:	687b      	ldr	r3, [r7, #4]
 80419be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80419c0:	4b0c      	ldr	r3, [pc, #48]	; (80419f4 <HAL_RCC_GetClockConfig+0x5c>)
 80419c2:	689b      	ldr	r3, [r3, #8]
 80419c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80419c8:	687b      	ldr	r3, [r7, #4]
 80419ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80419cc:	4b09      	ldr	r3, [pc, #36]	; (80419f4 <HAL_RCC_GetClockConfig+0x5c>)
 80419ce:	689b      	ldr	r3, [r3, #8]
 80419d0:	08db      	lsrs	r3, r3, #3
 80419d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80419d6:	687b      	ldr	r3, [r7, #4]
 80419d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80419da:	4b07      	ldr	r3, [pc, #28]	; (80419f8 <HAL_RCC_GetClockConfig+0x60>)
 80419dc:	681b      	ldr	r3, [r3, #0]
 80419de:	f003 020f 	and.w	r2, r3, #15
 80419e2:	683b      	ldr	r3, [r7, #0]
 80419e4:	601a      	str	r2, [r3, #0]
}
 80419e6:	bf00      	nop
 80419e8:	370c      	adds	r7, #12
 80419ea:	46bd      	mov	sp, r7
 80419ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80419f0:	4770      	bx	lr
 80419f2:	bf00      	nop
 80419f4:	40021000 	.word	0x40021000
 80419f8:	40022000 	.word	0x40022000

080419fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80419fc:	b580      	push	{r7, lr}
 80419fe:	b086      	sub	sp, #24
 8041a00:	af00      	add	r7, sp, #0
 8041a02:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8041a04:	2300      	movs	r3, #0
 8041a06:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8041a08:	4b2c      	ldr	r3, [pc, #176]	; (8041abc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041a10:	2b00      	cmp	r3, #0
 8041a12:	d003      	beq.n	8041a1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8041a14:	f7ff f8ee 	bl	8040bf4 <HAL_PWREx_GetVoltageRange>
 8041a18:	6138      	str	r0, [r7, #16]
 8041a1a:	e014      	b.n	8041a46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8041a1c:	4b27      	ldr	r3, [pc, #156]	; (8041abc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041a20:	4a26      	ldr	r2, [pc, #152]	; (8041abc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041a26:	6593      	str	r3, [r2, #88]	; 0x58
 8041a28:	4b24      	ldr	r3, [pc, #144]	; (8041abc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041a30:	60fb      	str	r3, [r7, #12]
 8041a32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8041a34:	f7ff f8de 	bl	8040bf4 <HAL_PWREx_GetVoltageRange>
 8041a38:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8041a3a:	4b20      	ldr	r3, [pc, #128]	; (8041abc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041a3e:	4a1f      	ldr	r2, [pc, #124]	; (8041abc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041a44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8041a46:	693b      	ldr	r3, [r7, #16]
 8041a48:	2b00      	cmp	r3, #0
 8041a4a:	d003      	beq.n	8041a54 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8041a4c:	693b      	ldr	r3, [r7, #16]
 8041a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8041a52:	d10b      	bne.n	8041a6c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8041a54:	687b      	ldr	r3, [r7, #4]
 8041a56:	2b80      	cmp	r3, #128	; 0x80
 8041a58:	d919      	bls.n	8041a8e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8041a5a:	687b      	ldr	r3, [r7, #4]
 8041a5c:	2ba0      	cmp	r3, #160	; 0xa0
 8041a5e:	d902      	bls.n	8041a66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8041a60:	2302      	movs	r3, #2
 8041a62:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8041a64:	e013      	b.n	8041a8e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8041a66:	2301      	movs	r3, #1
 8041a68:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8041a6a:	e010      	b.n	8041a8e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8041a6c:	687b      	ldr	r3, [r7, #4]
 8041a6e:	2b80      	cmp	r3, #128	; 0x80
 8041a70:	d902      	bls.n	8041a78 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8041a72:	2303      	movs	r3, #3
 8041a74:	617b      	str	r3, [r7, #20]
 8041a76:	e00a      	b.n	8041a8e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8041a78:	687b      	ldr	r3, [r7, #4]
 8041a7a:	2b80      	cmp	r3, #128	; 0x80
 8041a7c:	d102      	bne.n	8041a84 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8041a7e:	2302      	movs	r3, #2
 8041a80:	617b      	str	r3, [r7, #20]
 8041a82:	e004      	b.n	8041a8e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8041a84:	687b      	ldr	r3, [r7, #4]
 8041a86:	2b70      	cmp	r3, #112	; 0x70
 8041a88:	d101      	bne.n	8041a8e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8041a8a:	2301      	movs	r3, #1
 8041a8c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8041a8e:	4b0c      	ldr	r3, [pc, #48]	; (8041ac0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8041a90:	681b      	ldr	r3, [r3, #0]
 8041a92:	f023 020f 	bic.w	r2, r3, #15
 8041a96:	490a      	ldr	r1, [pc, #40]	; (8041ac0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8041a98:	697b      	ldr	r3, [r7, #20]
 8041a9a:	4313      	orrs	r3, r2
 8041a9c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8041a9e:	4b08      	ldr	r3, [pc, #32]	; (8041ac0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8041aa0:	681b      	ldr	r3, [r3, #0]
 8041aa2:	f003 030f 	and.w	r3, r3, #15
 8041aa6:	697a      	ldr	r2, [r7, #20]
 8041aa8:	429a      	cmp	r2, r3
 8041aaa:	d001      	beq.n	8041ab0 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8041aac:	2301      	movs	r3, #1
 8041aae:	e000      	b.n	8041ab2 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8041ab0:	2300      	movs	r3, #0
}
 8041ab2:	4618      	mov	r0, r3
 8041ab4:	3718      	adds	r7, #24
 8041ab6:	46bd      	mov	sp, r7
 8041ab8:	bd80      	pop	{r7, pc}
 8041aba:	bf00      	nop
 8041abc:	40021000 	.word	0x40021000
 8041ac0:	40022000 	.word	0x40022000

08041ac4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8041ac4:	b480      	push	{r7}
 8041ac6:	b087      	sub	sp, #28
 8041ac8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8041aca:	2300      	movs	r3, #0
 8041acc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8041ace:	4b36      	ldr	r3, [pc, #216]	; (8041ba8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041ad0:	68db      	ldr	r3, [r3, #12]
 8041ad2:	f003 0303 	and.w	r3, r3, #3
 8041ad6:	2b01      	cmp	r3, #1
 8041ad8:	d118      	bne.n	8041b0c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8041ada:	4b33      	ldr	r3, [pc, #204]	; (8041ba8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041adc:	681b      	ldr	r3, [r3, #0]
 8041ade:	f003 0308 	and.w	r3, r3, #8
 8041ae2:	2b00      	cmp	r3, #0
 8041ae4:	d107      	bne.n	8041af6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8041ae6:	4b30      	ldr	r3, [pc, #192]	; (8041ba8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041aec:	0a1b      	lsrs	r3, r3, #8
 8041aee:	f003 030f 	and.w	r3, r3, #15
 8041af2:	617b      	str	r3, [r7, #20]
 8041af4:	e005      	b.n	8041b02 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8041af6:	4b2c      	ldr	r3, [pc, #176]	; (8041ba8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041af8:	681b      	ldr	r3, [r3, #0]
 8041afa:	091b      	lsrs	r3, r3, #4
 8041afc:	f003 030f 	and.w	r3, r3, #15
 8041b00:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8041b02:	4a2a      	ldr	r2, [pc, #168]	; (8041bac <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8041b04:	697b      	ldr	r3, [r7, #20]
 8041b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041b0a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8041b0c:	4b26      	ldr	r3, [pc, #152]	; (8041ba8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041b0e:	68db      	ldr	r3, [r3, #12]
 8041b10:	f003 0303 	and.w	r3, r3, #3
 8041b14:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8041b16:	4b24      	ldr	r3, [pc, #144]	; (8041ba8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041b18:	68db      	ldr	r3, [r3, #12]
 8041b1a:	091b      	lsrs	r3, r3, #4
 8041b1c:	f003 030f 	and.w	r3, r3, #15
 8041b20:	3301      	adds	r3, #1
 8041b22:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8041b24:	68fb      	ldr	r3, [r7, #12]
 8041b26:	2b02      	cmp	r3, #2
 8041b28:	d002      	beq.n	8041b30 <RCC_GetSysClockFreqFromPLLSource+0x6c>
 8041b2a:	2b03      	cmp	r3, #3
 8041b2c:	d00d      	beq.n	8041b4a <RCC_GetSysClockFreqFromPLLSource+0x86>
 8041b2e:	e019      	b.n	8041b64 <RCC_GetSysClockFreqFromPLLSource+0xa0>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041b30:	4a1f      	ldr	r2, [pc, #124]	; (8041bb0 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8041b32:	68bb      	ldr	r3, [r7, #8]
 8041b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8041b38:	4a1b      	ldr	r2, [pc, #108]	; (8041ba8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041b3a:	68d2      	ldr	r2, [r2, #12]
 8041b3c:	0a12      	lsrs	r2, r2, #8
 8041b3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041b42:	fb02 f303 	mul.w	r3, r2, r3
 8041b46:	613b      	str	r3, [r7, #16]
      break;
 8041b48:	e019      	b.n	8041b7e <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041b4a:	4a19      	ldr	r2, [pc, #100]	; (8041bb0 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8041b4c:	68bb      	ldr	r3, [r7, #8]
 8041b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8041b52:	4a15      	ldr	r2, [pc, #84]	; (8041ba8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041b54:	68d2      	ldr	r2, [r2, #12]
 8041b56:	0a12      	lsrs	r2, r2, #8
 8041b58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041b5c:	fb02 f303 	mul.w	r3, r2, r3
 8041b60:	613b      	str	r3, [r7, #16]
      break;
 8041b62:	e00c      	b.n	8041b7e <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041b64:	697a      	ldr	r2, [r7, #20]
 8041b66:	68bb      	ldr	r3, [r7, #8]
 8041b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8041b6c:	4a0e      	ldr	r2, [pc, #56]	; (8041ba8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041b6e:	68d2      	ldr	r2, [r2, #12]
 8041b70:	0a12      	lsrs	r2, r2, #8
 8041b72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041b76:	fb02 f303 	mul.w	r3, r2, r3
 8041b7a:	613b      	str	r3, [r7, #16]
      break;
 8041b7c:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8041b7e:	4b0a      	ldr	r3, [pc, #40]	; (8041ba8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041b80:	68db      	ldr	r3, [r3, #12]
 8041b82:	0e5b      	lsrs	r3, r3, #25
 8041b84:	f003 0303 	and.w	r3, r3, #3
 8041b88:	3301      	adds	r3, #1
 8041b8a:	005b      	lsls	r3, r3, #1
 8041b8c:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8041b8e:	693a      	ldr	r2, [r7, #16]
 8041b90:	687b      	ldr	r3, [r7, #4]
 8041b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8041b96:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8041b98:	683b      	ldr	r3, [r7, #0]
}
 8041b9a:	4618      	mov	r0, r3
 8041b9c:	371c      	adds	r7, #28
 8041b9e:	46bd      	mov	sp, r7
 8041ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ba4:	4770      	bx	lr
 8041ba6:	bf00      	nop
 8041ba8:	40021000 	.word	0x40021000
 8041bac:	08044aec 	.word	0x08044aec
 8041bb0:	00f42400 	.word	0x00f42400

08041bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8041bb4:	b580      	push	{r7, lr}
 8041bb6:	b082      	sub	sp, #8
 8041bb8:	af00      	add	r7, sp, #0
 8041bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8041bbc:	687b      	ldr	r3, [r7, #4]
 8041bbe:	2b00      	cmp	r3, #0
 8041bc0:	d101      	bne.n	8041bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8041bc2:	2301      	movs	r3, #1
 8041bc4:	e049      	b.n	8041c5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8041bc6:	687b      	ldr	r3, [r7, #4]
 8041bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8041bcc:	b2db      	uxtb	r3, r3
 8041bce:	2b00      	cmp	r3, #0
 8041bd0:	d106      	bne.n	8041be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8041bd2:	687b      	ldr	r3, [r7, #4]
 8041bd4:	2200      	movs	r2, #0
 8041bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8041bda:	6878      	ldr	r0, [r7, #4]
 8041bdc:	f000 f841 	bl	8041c62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8041be0:	687b      	ldr	r3, [r7, #4]
 8041be2:	2202      	movs	r2, #2
 8041be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8041be8:	687b      	ldr	r3, [r7, #4]
 8041bea:	681a      	ldr	r2, [r3, #0]
 8041bec:	687b      	ldr	r3, [r7, #4]
 8041bee:	3304      	adds	r3, #4
 8041bf0:	4619      	mov	r1, r3
 8041bf2:	4610      	mov	r0, r2
 8041bf4:	f000 f9f8 	bl	8041fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8041bf8:	687b      	ldr	r3, [r7, #4]
 8041bfa:	2201      	movs	r2, #1
 8041bfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8041c00:	687b      	ldr	r3, [r7, #4]
 8041c02:	2201      	movs	r2, #1
 8041c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8041c08:	687b      	ldr	r3, [r7, #4]
 8041c0a:	2201      	movs	r2, #1
 8041c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8041c10:	687b      	ldr	r3, [r7, #4]
 8041c12:	2201      	movs	r2, #1
 8041c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8041c18:	687b      	ldr	r3, [r7, #4]
 8041c1a:	2201      	movs	r2, #1
 8041c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8041c20:	687b      	ldr	r3, [r7, #4]
 8041c22:	2201      	movs	r2, #1
 8041c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8041c28:	687b      	ldr	r3, [r7, #4]
 8041c2a:	2201      	movs	r2, #1
 8041c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8041c30:	687b      	ldr	r3, [r7, #4]
 8041c32:	2201      	movs	r2, #1
 8041c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8041c38:	687b      	ldr	r3, [r7, #4]
 8041c3a:	2201      	movs	r2, #1
 8041c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8041c40:	687b      	ldr	r3, [r7, #4]
 8041c42:	2201      	movs	r2, #1
 8041c44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8041c48:	687b      	ldr	r3, [r7, #4]
 8041c4a:	2201      	movs	r2, #1
 8041c4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8041c50:	687b      	ldr	r3, [r7, #4]
 8041c52:	2201      	movs	r2, #1
 8041c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8041c58:	2300      	movs	r3, #0
}
 8041c5a:	4618      	mov	r0, r3
 8041c5c:	3708      	adds	r7, #8
 8041c5e:	46bd      	mov	sp, r7
 8041c60:	bd80      	pop	{r7, pc}

08041c62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8041c62:	b480      	push	{r7}
 8041c64:	b083      	sub	sp, #12
 8041c66:	af00      	add	r7, sp, #0
 8041c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8041c6a:	bf00      	nop
 8041c6c:	370c      	adds	r7, #12
 8041c6e:	46bd      	mov	sp, r7
 8041c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041c74:	4770      	bx	lr
	...

08041c78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8041c78:	b480      	push	{r7}
 8041c7a:	b085      	sub	sp, #20
 8041c7c:	af00      	add	r7, sp, #0
 8041c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8041c80:	687b      	ldr	r3, [r7, #4]
 8041c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8041c86:	b2db      	uxtb	r3, r3
 8041c88:	2b01      	cmp	r3, #1
 8041c8a:	d001      	beq.n	8041c90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8041c8c:	2301      	movs	r3, #1
 8041c8e:	e04f      	b.n	8041d30 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8041c90:	687b      	ldr	r3, [r7, #4]
 8041c92:	2202      	movs	r2, #2
 8041c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8041c98:	687b      	ldr	r3, [r7, #4]
 8041c9a:	681b      	ldr	r3, [r3, #0]
 8041c9c:	68da      	ldr	r2, [r3, #12]
 8041c9e:	687b      	ldr	r3, [r7, #4]
 8041ca0:	681b      	ldr	r3, [r3, #0]
 8041ca2:	f042 0201 	orr.w	r2, r2, #1
 8041ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8041ca8:	687b      	ldr	r3, [r7, #4]
 8041caa:	681b      	ldr	r3, [r3, #0]
 8041cac:	4a23      	ldr	r2, [pc, #140]	; (8041d3c <HAL_TIM_Base_Start_IT+0xc4>)
 8041cae:	4293      	cmp	r3, r2
 8041cb0:	d01d      	beq.n	8041cee <HAL_TIM_Base_Start_IT+0x76>
 8041cb2:	687b      	ldr	r3, [r7, #4]
 8041cb4:	681b      	ldr	r3, [r3, #0]
 8041cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8041cba:	d018      	beq.n	8041cee <HAL_TIM_Base_Start_IT+0x76>
 8041cbc:	687b      	ldr	r3, [r7, #4]
 8041cbe:	681b      	ldr	r3, [r3, #0]
 8041cc0:	4a1f      	ldr	r2, [pc, #124]	; (8041d40 <HAL_TIM_Base_Start_IT+0xc8>)
 8041cc2:	4293      	cmp	r3, r2
 8041cc4:	d013      	beq.n	8041cee <HAL_TIM_Base_Start_IT+0x76>
 8041cc6:	687b      	ldr	r3, [r7, #4]
 8041cc8:	681b      	ldr	r3, [r3, #0]
 8041cca:	4a1e      	ldr	r2, [pc, #120]	; (8041d44 <HAL_TIM_Base_Start_IT+0xcc>)
 8041ccc:	4293      	cmp	r3, r2
 8041cce:	d00e      	beq.n	8041cee <HAL_TIM_Base_Start_IT+0x76>
 8041cd0:	687b      	ldr	r3, [r7, #4]
 8041cd2:	681b      	ldr	r3, [r3, #0]
 8041cd4:	4a1c      	ldr	r2, [pc, #112]	; (8041d48 <HAL_TIM_Base_Start_IT+0xd0>)
 8041cd6:	4293      	cmp	r3, r2
 8041cd8:	d009      	beq.n	8041cee <HAL_TIM_Base_Start_IT+0x76>
 8041cda:	687b      	ldr	r3, [r7, #4]
 8041cdc:	681b      	ldr	r3, [r3, #0]
 8041cde:	4a1b      	ldr	r2, [pc, #108]	; (8041d4c <HAL_TIM_Base_Start_IT+0xd4>)
 8041ce0:	4293      	cmp	r3, r2
 8041ce2:	d004      	beq.n	8041cee <HAL_TIM_Base_Start_IT+0x76>
 8041ce4:	687b      	ldr	r3, [r7, #4]
 8041ce6:	681b      	ldr	r3, [r3, #0]
 8041ce8:	4a19      	ldr	r2, [pc, #100]	; (8041d50 <HAL_TIM_Base_Start_IT+0xd8>)
 8041cea:	4293      	cmp	r3, r2
 8041cec:	d115      	bne.n	8041d1a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8041cee:	687b      	ldr	r3, [r7, #4]
 8041cf0:	681b      	ldr	r3, [r3, #0]
 8041cf2:	689a      	ldr	r2, [r3, #8]
 8041cf4:	4b17      	ldr	r3, [pc, #92]	; (8041d54 <HAL_TIM_Base_Start_IT+0xdc>)
 8041cf6:	4013      	ands	r3, r2
 8041cf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8041cfa:	68fb      	ldr	r3, [r7, #12]
 8041cfc:	2b06      	cmp	r3, #6
 8041cfe:	d015      	beq.n	8041d2c <HAL_TIM_Base_Start_IT+0xb4>
 8041d00:	68fb      	ldr	r3, [r7, #12]
 8041d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8041d06:	d011      	beq.n	8041d2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8041d08:	687b      	ldr	r3, [r7, #4]
 8041d0a:	681b      	ldr	r3, [r3, #0]
 8041d0c:	681a      	ldr	r2, [r3, #0]
 8041d0e:	687b      	ldr	r3, [r7, #4]
 8041d10:	681b      	ldr	r3, [r3, #0]
 8041d12:	f042 0201 	orr.w	r2, r2, #1
 8041d16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8041d18:	e008      	b.n	8041d2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8041d1a:	687b      	ldr	r3, [r7, #4]
 8041d1c:	681b      	ldr	r3, [r3, #0]
 8041d1e:	681a      	ldr	r2, [r3, #0]
 8041d20:	687b      	ldr	r3, [r7, #4]
 8041d22:	681b      	ldr	r3, [r3, #0]
 8041d24:	f042 0201 	orr.w	r2, r2, #1
 8041d28:	601a      	str	r2, [r3, #0]
 8041d2a:	e000      	b.n	8041d2e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8041d2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8041d2e:	2300      	movs	r3, #0
}
 8041d30:	4618      	mov	r0, r3
 8041d32:	3714      	adds	r7, #20
 8041d34:	46bd      	mov	sp, r7
 8041d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d3a:	4770      	bx	lr
 8041d3c:	40012c00 	.word	0x40012c00
 8041d40:	40000400 	.word	0x40000400
 8041d44:	40000800 	.word	0x40000800
 8041d48:	40000c00 	.word	0x40000c00
 8041d4c:	40013400 	.word	0x40013400
 8041d50:	40014000 	.word	0x40014000
 8041d54:	00010007 	.word	0x00010007

08041d58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8041d58:	b580      	push	{r7, lr}
 8041d5a:	b082      	sub	sp, #8
 8041d5c:	af00      	add	r7, sp, #0
 8041d5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8041d60:	687b      	ldr	r3, [r7, #4]
 8041d62:	681b      	ldr	r3, [r3, #0]
 8041d64:	691b      	ldr	r3, [r3, #16]
 8041d66:	f003 0302 	and.w	r3, r3, #2
 8041d6a:	2b02      	cmp	r3, #2
 8041d6c:	d122      	bne.n	8041db4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8041d6e:	687b      	ldr	r3, [r7, #4]
 8041d70:	681b      	ldr	r3, [r3, #0]
 8041d72:	68db      	ldr	r3, [r3, #12]
 8041d74:	f003 0302 	and.w	r3, r3, #2
 8041d78:	2b02      	cmp	r3, #2
 8041d7a:	d11b      	bne.n	8041db4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8041d7c:	687b      	ldr	r3, [r7, #4]
 8041d7e:	681b      	ldr	r3, [r3, #0]
 8041d80:	f06f 0202 	mvn.w	r2, #2
 8041d84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8041d86:	687b      	ldr	r3, [r7, #4]
 8041d88:	2201      	movs	r2, #1
 8041d8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8041d8c:	687b      	ldr	r3, [r7, #4]
 8041d8e:	681b      	ldr	r3, [r3, #0]
 8041d90:	699b      	ldr	r3, [r3, #24]
 8041d92:	f003 0303 	and.w	r3, r3, #3
 8041d96:	2b00      	cmp	r3, #0
 8041d98:	d003      	beq.n	8041da2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8041d9a:	6878      	ldr	r0, [r7, #4]
 8041d9c:	f000 f905 	bl	8041faa <HAL_TIM_IC_CaptureCallback>
 8041da0:	e005      	b.n	8041dae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8041da2:	6878      	ldr	r0, [r7, #4]
 8041da4:	f000 f8f7 	bl	8041f96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8041da8:	6878      	ldr	r0, [r7, #4]
 8041daa:	f000 f908 	bl	8041fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8041dae:	687b      	ldr	r3, [r7, #4]
 8041db0:	2200      	movs	r2, #0
 8041db2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8041db4:	687b      	ldr	r3, [r7, #4]
 8041db6:	681b      	ldr	r3, [r3, #0]
 8041db8:	691b      	ldr	r3, [r3, #16]
 8041dba:	f003 0304 	and.w	r3, r3, #4
 8041dbe:	2b04      	cmp	r3, #4
 8041dc0:	d122      	bne.n	8041e08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8041dc2:	687b      	ldr	r3, [r7, #4]
 8041dc4:	681b      	ldr	r3, [r3, #0]
 8041dc6:	68db      	ldr	r3, [r3, #12]
 8041dc8:	f003 0304 	and.w	r3, r3, #4
 8041dcc:	2b04      	cmp	r3, #4
 8041dce:	d11b      	bne.n	8041e08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8041dd0:	687b      	ldr	r3, [r7, #4]
 8041dd2:	681b      	ldr	r3, [r3, #0]
 8041dd4:	f06f 0204 	mvn.w	r2, #4
 8041dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8041dda:	687b      	ldr	r3, [r7, #4]
 8041ddc:	2202      	movs	r2, #2
 8041dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8041de0:	687b      	ldr	r3, [r7, #4]
 8041de2:	681b      	ldr	r3, [r3, #0]
 8041de4:	699b      	ldr	r3, [r3, #24]
 8041de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8041dea:	2b00      	cmp	r3, #0
 8041dec:	d003      	beq.n	8041df6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8041dee:	6878      	ldr	r0, [r7, #4]
 8041df0:	f000 f8db 	bl	8041faa <HAL_TIM_IC_CaptureCallback>
 8041df4:	e005      	b.n	8041e02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8041df6:	6878      	ldr	r0, [r7, #4]
 8041df8:	f000 f8cd 	bl	8041f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8041dfc:	6878      	ldr	r0, [r7, #4]
 8041dfe:	f000 f8de 	bl	8041fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8041e02:	687b      	ldr	r3, [r7, #4]
 8041e04:	2200      	movs	r2, #0
 8041e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8041e08:	687b      	ldr	r3, [r7, #4]
 8041e0a:	681b      	ldr	r3, [r3, #0]
 8041e0c:	691b      	ldr	r3, [r3, #16]
 8041e0e:	f003 0308 	and.w	r3, r3, #8
 8041e12:	2b08      	cmp	r3, #8
 8041e14:	d122      	bne.n	8041e5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8041e16:	687b      	ldr	r3, [r7, #4]
 8041e18:	681b      	ldr	r3, [r3, #0]
 8041e1a:	68db      	ldr	r3, [r3, #12]
 8041e1c:	f003 0308 	and.w	r3, r3, #8
 8041e20:	2b08      	cmp	r3, #8
 8041e22:	d11b      	bne.n	8041e5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8041e24:	687b      	ldr	r3, [r7, #4]
 8041e26:	681b      	ldr	r3, [r3, #0]
 8041e28:	f06f 0208 	mvn.w	r2, #8
 8041e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8041e2e:	687b      	ldr	r3, [r7, #4]
 8041e30:	2204      	movs	r2, #4
 8041e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8041e34:	687b      	ldr	r3, [r7, #4]
 8041e36:	681b      	ldr	r3, [r3, #0]
 8041e38:	69db      	ldr	r3, [r3, #28]
 8041e3a:	f003 0303 	and.w	r3, r3, #3
 8041e3e:	2b00      	cmp	r3, #0
 8041e40:	d003      	beq.n	8041e4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8041e42:	6878      	ldr	r0, [r7, #4]
 8041e44:	f000 f8b1 	bl	8041faa <HAL_TIM_IC_CaptureCallback>
 8041e48:	e005      	b.n	8041e56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8041e4a:	6878      	ldr	r0, [r7, #4]
 8041e4c:	f000 f8a3 	bl	8041f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8041e50:	6878      	ldr	r0, [r7, #4]
 8041e52:	f000 f8b4 	bl	8041fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8041e56:	687b      	ldr	r3, [r7, #4]
 8041e58:	2200      	movs	r2, #0
 8041e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8041e5c:	687b      	ldr	r3, [r7, #4]
 8041e5e:	681b      	ldr	r3, [r3, #0]
 8041e60:	691b      	ldr	r3, [r3, #16]
 8041e62:	f003 0310 	and.w	r3, r3, #16
 8041e66:	2b10      	cmp	r3, #16
 8041e68:	d122      	bne.n	8041eb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8041e6a:	687b      	ldr	r3, [r7, #4]
 8041e6c:	681b      	ldr	r3, [r3, #0]
 8041e6e:	68db      	ldr	r3, [r3, #12]
 8041e70:	f003 0310 	and.w	r3, r3, #16
 8041e74:	2b10      	cmp	r3, #16
 8041e76:	d11b      	bne.n	8041eb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8041e78:	687b      	ldr	r3, [r7, #4]
 8041e7a:	681b      	ldr	r3, [r3, #0]
 8041e7c:	f06f 0210 	mvn.w	r2, #16
 8041e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8041e82:	687b      	ldr	r3, [r7, #4]
 8041e84:	2208      	movs	r2, #8
 8041e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8041e88:	687b      	ldr	r3, [r7, #4]
 8041e8a:	681b      	ldr	r3, [r3, #0]
 8041e8c:	69db      	ldr	r3, [r3, #28]
 8041e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8041e92:	2b00      	cmp	r3, #0
 8041e94:	d003      	beq.n	8041e9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8041e96:	6878      	ldr	r0, [r7, #4]
 8041e98:	f000 f887 	bl	8041faa <HAL_TIM_IC_CaptureCallback>
 8041e9c:	e005      	b.n	8041eaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8041e9e:	6878      	ldr	r0, [r7, #4]
 8041ea0:	f000 f879 	bl	8041f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8041ea4:	6878      	ldr	r0, [r7, #4]
 8041ea6:	f000 f88a 	bl	8041fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8041eaa:	687b      	ldr	r3, [r7, #4]
 8041eac:	2200      	movs	r2, #0
 8041eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8041eb0:	687b      	ldr	r3, [r7, #4]
 8041eb2:	681b      	ldr	r3, [r3, #0]
 8041eb4:	691b      	ldr	r3, [r3, #16]
 8041eb6:	f003 0301 	and.w	r3, r3, #1
 8041eba:	2b01      	cmp	r3, #1
 8041ebc:	d10e      	bne.n	8041edc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8041ebe:	687b      	ldr	r3, [r7, #4]
 8041ec0:	681b      	ldr	r3, [r3, #0]
 8041ec2:	68db      	ldr	r3, [r3, #12]
 8041ec4:	f003 0301 	and.w	r3, r3, #1
 8041ec8:	2b01      	cmp	r3, #1
 8041eca:	d107      	bne.n	8041edc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8041ecc:	687b      	ldr	r3, [r7, #4]
 8041ece:	681b      	ldr	r3, [r3, #0]
 8041ed0:	f06f 0201 	mvn.w	r2, #1
 8041ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8041ed6:	6878      	ldr	r0, [r7, #4]
 8041ed8:	f7fe fa8a 	bl	80403f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8041edc:	687b      	ldr	r3, [r7, #4]
 8041ede:	681b      	ldr	r3, [r3, #0]
 8041ee0:	691b      	ldr	r3, [r3, #16]
 8041ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041ee6:	2b80      	cmp	r3, #128	; 0x80
 8041ee8:	d10e      	bne.n	8041f08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8041eea:	687b      	ldr	r3, [r7, #4]
 8041eec:	681b      	ldr	r3, [r3, #0]
 8041eee:	68db      	ldr	r3, [r3, #12]
 8041ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041ef4:	2b80      	cmp	r3, #128	; 0x80
 8041ef6:	d107      	bne.n	8041f08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8041ef8:	687b      	ldr	r3, [r7, #4]
 8041efa:	681b      	ldr	r3, [r3, #0]
 8041efc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8041f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8041f02:	6878      	ldr	r0, [r7, #4]
 8041f04:	f000 f914 	bl	8042130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8041f08:	687b      	ldr	r3, [r7, #4]
 8041f0a:	681b      	ldr	r3, [r3, #0]
 8041f0c:	691b      	ldr	r3, [r3, #16]
 8041f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8041f16:	d10e      	bne.n	8041f36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8041f18:	687b      	ldr	r3, [r7, #4]
 8041f1a:	681b      	ldr	r3, [r3, #0]
 8041f1c:	68db      	ldr	r3, [r3, #12]
 8041f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041f22:	2b80      	cmp	r3, #128	; 0x80
 8041f24:	d107      	bne.n	8041f36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8041f26:	687b      	ldr	r3, [r7, #4]
 8041f28:	681b      	ldr	r3, [r3, #0]
 8041f2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8041f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8041f30:	6878      	ldr	r0, [r7, #4]
 8041f32:	f000 f907 	bl	8042144 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8041f36:	687b      	ldr	r3, [r7, #4]
 8041f38:	681b      	ldr	r3, [r3, #0]
 8041f3a:	691b      	ldr	r3, [r3, #16]
 8041f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041f40:	2b40      	cmp	r3, #64	; 0x40
 8041f42:	d10e      	bne.n	8041f62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8041f44:	687b      	ldr	r3, [r7, #4]
 8041f46:	681b      	ldr	r3, [r3, #0]
 8041f48:	68db      	ldr	r3, [r3, #12]
 8041f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041f4e:	2b40      	cmp	r3, #64	; 0x40
 8041f50:	d107      	bne.n	8041f62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8041f52:	687b      	ldr	r3, [r7, #4]
 8041f54:	681b      	ldr	r3, [r3, #0]
 8041f56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8041f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8041f5c:	6878      	ldr	r0, [r7, #4]
 8041f5e:	f000 f838 	bl	8041fd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8041f62:	687b      	ldr	r3, [r7, #4]
 8041f64:	681b      	ldr	r3, [r3, #0]
 8041f66:	691b      	ldr	r3, [r3, #16]
 8041f68:	f003 0320 	and.w	r3, r3, #32
 8041f6c:	2b20      	cmp	r3, #32
 8041f6e:	d10e      	bne.n	8041f8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8041f70:	687b      	ldr	r3, [r7, #4]
 8041f72:	681b      	ldr	r3, [r3, #0]
 8041f74:	68db      	ldr	r3, [r3, #12]
 8041f76:	f003 0320 	and.w	r3, r3, #32
 8041f7a:	2b20      	cmp	r3, #32
 8041f7c:	d107      	bne.n	8041f8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8041f7e:	687b      	ldr	r3, [r7, #4]
 8041f80:	681b      	ldr	r3, [r3, #0]
 8041f82:	f06f 0220 	mvn.w	r2, #32
 8041f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8041f88:	6878      	ldr	r0, [r7, #4]
 8041f8a:	f000 f8c7 	bl	804211c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8041f8e:	bf00      	nop
 8041f90:	3708      	adds	r7, #8
 8041f92:	46bd      	mov	sp, r7
 8041f94:	bd80      	pop	{r7, pc}

08041f96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8041f96:	b480      	push	{r7}
 8041f98:	b083      	sub	sp, #12
 8041f9a:	af00      	add	r7, sp, #0
 8041f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8041f9e:	bf00      	nop
 8041fa0:	370c      	adds	r7, #12
 8041fa2:	46bd      	mov	sp, r7
 8041fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041fa8:	4770      	bx	lr

08041faa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8041faa:	b480      	push	{r7}
 8041fac:	b083      	sub	sp, #12
 8041fae:	af00      	add	r7, sp, #0
 8041fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8041fb2:	bf00      	nop
 8041fb4:	370c      	adds	r7, #12
 8041fb6:	46bd      	mov	sp, r7
 8041fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041fbc:	4770      	bx	lr

08041fbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8041fbe:	b480      	push	{r7}
 8041fc0:	b083      	sub	sp, #12
 8041fc2:	af00      	add	r7, sp, #0
 8041fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8041fc6:	bf00      	nop
 8041fc8:	370c      	adds	r7, #12
 8041fca:	46bd      	mov	sp, r7
 8041fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041fd0:	4770      	bx	lr

08041fd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8041fd2:	b480      	push	{r7}
 8041fd4:	b083      	sub	sp, #12
 8041fd6:	af00      	add	r7, sp, #0
 8041fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8041fda:	bf00      	nop
 8041fdc:	370c      	adds	r7, #12
 8041fde:	46bd      	mov	sp, r7
 8041fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041fe4:	4770      	bx	lr
	...

08041fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8041fe8:	b480      	push	{r7}
 8041fea:	b085      	sub	sp, #20
 8041fec:	af00      	add	r7, sp, #0
 8041fee:	6078      	str	r0, [r7, #4]
 8041ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8041ff2:	687b      	ldr	r3, [r7, #4]
 8041ff4:	681b      	ldr	r3, [r3, #0]
 8041ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8041ff8:	687b      	ldr	r3, [r7, #4]
 8041ffa:	4a40      	ldr	r2, [pc, #256]	; (80420fc <TIM_Base_SetConfig+0x114>)
 8041ffc:	4293      	cmp	r3, r2
 8041ffe:	d013      	beq.n	8042028 <TIM_Base_SetConfig+0x40>
 8042000:	687b      	ldr	r3, [r7, #4]
 8042002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8042006:	d00f      	beq.n	8042028 <TIM_Base_SetConfig+0x40>
 8042008:	687b      	ldr	r3, [r7, #4]
 804200a:	4a3d      	ldr	r2, [pc, #244]	; (8042100 <TIM_Base_SetConfig+0x118>)
 804200c:	4293      	cmp	r3, r2
 804200e:	d00b      	beq.n	8042028 <TIM_Base_SetConfig+0x40>
 8042010:	687b      	ldr	r3, [r7, #4]
 8042012:	4a3c      	ldr	r2, [pc, #240]	; (8042104 <TIM_Base_SetConfig+0x11c>)
 8042014:	4293      	cmp	r3, r2
 8042016:	d007      	beq.n	8042028 <TIM_Base_SetConfig+0x40>
 8042018:	687b      	ldr	r3, [r7, #4]
 804201a:	4a3b      	ldr	r2, [pc, #236]	; (8042108 <TIM_Base_SetConfig+0x120>)
 804201c:	4293      	cmp	r3, r2
 804201e:	d003      	beq.n	8042028 <TIM_Base_SetConfig+0x40>
 8042020:	687b      	ldr	r3, [r7, #4]
 8042022:	4a3a      	ldr	r2, [pc, #232]	; (804210c <TIM_Base_SetConfig+0x124>)
 8042024:	4293      	cmp	r3, r2
 8042026:	d108      	bne.n	804203a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8042028:	68fb      	ldr	r3, [r7, #12]
 804202a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804202e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8042030:	683b      	ldr	r3, [r7, #0]
 8042032:	685b      	ldr	r3, [r3, #4]
 8042034:	68fa      	ldr	r2, [r7, #12]
 8042036:	4313      	orrs	r3, r2
 8042038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 804203a:	687b      	ldr	r3, [r7, #4]
 804203c:	4a2f      	ldr	r2, [pc, #188]	; (80420fc <TIM_Base_SetConfig+0x114>)
 804203e:	4293      	cmp	r3, r2
 8042040:	d01f      	beq.n	8042082 <TIM_Base_SetConfig+0x9a>
 8042042:	687b      	ldr	r3, [r7, #4]
 8042044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8042048:	d01b      	beq.n	8042082 <TIM_Base_SetConfig+0x9a>
 804204a:	687b      	ldr	r3, [r7, #4]
 804204c:	4a2c      	ldr	r2, [pc, #176]	; (8042100 <TIM_Base_SetConfig+0x118>)
 804204e:	4293      	cmp	r3, r2
 8042050:	d017      	beq.n	8042082 <TIM_Base_SetConfig+0x9a>
 8042052:	687b      	ldr	r3, [r7, #4]
 8042054:	4a2b      	ldr	r2, [pc, #172]	; (8042104 <TIM_Base_SetConfig+0x11c>)
 8042056:	4293      	cmp	r3, r2
 8042058:	d013      	beq.n	8042082 <TIM_Base_SetConfig+0x9a>
 804205a:	687b      	ldr	r3, [r7, #4]
 804205c:	4a2a      	ldr	r2, [pc, #168]	; (8042108 <TIM_Base_SetConfig+0x120>)
 804205e:	4293      	cmp	r3, r2
 8042060:	d00f      	beq.n	8042082 <TIM_Base_SetConfig+0x9a>
 8042062:	687b      	ldr	r3, [r7, #4]
 8042064:	4a29      	ldr	r2, [pc, #164]	; (804210c <TIM_Base_SetConfig+0x124>)
 8042066:	4293      	cmp	r3, r2
 8042068:	d00b      	beq.n	8042082 <TIM_Base_SetConfig+0x9a>
 804206a:	687b      	ldr	r3, [r7, #4]
 804206c:	4a28      	ldr	r2, [pc, #160]	; (8042110 <TIM_Base_SetConfig+0x128>)
 804206e:	4293      	cmp	r3, r2
 8042070:	d007      	beq.n	8042082 <TIM_Base_SetConfig+0x9a>
 8042072:	687b      	ldr	r3, [r7, #4]
 8042074:	4a27      	ldr	r2, [pc, #156]	; (8042114 <TIM_Base_SetConfig+0x12c>)
 8042076:	4293      	cmp	r3, r2
 8042078:	d003      	beq.n	8042082 <TIM_Base_SetConfig+0x9a>
 804207a:	687b      	ldr	r3, [r7, #4]
 804207c:	4a26      	ldr	r2, [pc, #152]	; (8042118 <TIM_Base_SetConfig+0x130>)
 804207e:	4293      	cmp	r3, r2
 8042080:	d108      	bne.n	8042094 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8042082:	68fb      	ldr	r3, [r7, #12]
 8042084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8042088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 804208a:	683b      	ldr	r3, [r7, #0]
 804208c:	68db      	ldr	r3, [r3, #12]
 804208e:	68fa      	ldr	r2, [r7, #12]
 8042090:	4313      	orrs	r3, r2
 8042092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8042094:	68fb      	ldr	r3, [r7, #12]
 8042096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 804209a:	683b      	ldr	r3, [r7, #0]
 804209c:	695b      	ldr	r3, [r3, #20]
 804209e:	4313      	orrs	r3, r2
 80420a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80420a2:	687b      	ldr	r3, [r7, #4]
 80420a4:	68fa      	ldr	r2, [r7, #12]
 80420a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80420a8:	683b      	ldr	r3, [r7, #0]
 80420aa:	689a      	ldr	r2, [r3, #8]
 80420ac:	687b      	ldr	r3, [r7, #4]
 80420ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80420b0:	683b      	ldr	r3, [r7, #0]
 80420b2:	681a      	ldr	r2, [r3, #0]
 80420b4:	687b      	ldr	r3, [r7, #4]
 80420b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80420b8:	687b      	ldr	r3, [r7, #4]
 80420ba:	4a10      	ldr	r2, [pc, #64]	; (80420fc <TIM_Base_SetConfig+0x114>)
 80420bc:	4293      	cmp	r3, r2
 80420be:	d00f      	beq.n	80420e0 <TIM_Base_SetConfig+0xf8>
 80420c0:	687b      	ldr	r3, [r7, #4]
 80420c2:	4a12      	ldr	r2, [pc, #72]	; (804210c <TIM_Base_SetConfig+0x124>)
 80420c4:	4293      	cmp	r3, r2
 80420c6:	d00b      	beq.n	80420e0 <TIM_Base_SetConfig+0xf8>
 80420c8:	687b      	ldr	r3, [r7, #4]
 80420ca:	4a11      	ldr	r2, [pc, #68]	; (8042110 <TIM_Base_SetConfig+0x128>)
 80420cc:	4293      	cmp	r3, r2
 80420ce:	d007      	beq.n	80420e0 <TIM_Base_SetConfig+0xf8>
 80420d0:	687b      	ldr	r3, [r7, #4]
 80420d2:	4a10      	ldr	r2, [pc, #64]	; (8042114 <TIM_Base_SetConfig+0x12c>)
 80420d4:	4293      	cmp	r3, r2
 80420d6:	d003      	beq.n	80420e0 <TIM_Base_SetConfig+0xf8>
 80420d8:	687b      	ldr	r3, [r7, #4]
 80420da:	4a0f      	ldr	r2, [pc, #60]	; (8042118 <TIM_Base_SetConfig+0x130>)
 80420dc:	4293      	cmp	r3, r2
 80420de:	d103      	bne.n	80420e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80420e0:	683b      	ldr	r3, [r7, #0]
 80420e2:	691a      	ldr	r2, [r3, #16]
 80420e4:	687b      	ldr	r3, [r7, #4]
 80420e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80420e8:	687b      	ldr	r3, [r7, #4]
 80420ea:	2201      	movs	r2, #1
 80420ec:	615a      	str	r2, [r3, #20]
}
 80420ee:	bf00      	nop
 80420f0:	3714      	adds	r7, #20
 80420f2:	46bd      	mov	sp, r7
 80420f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80420f8:	4770      	bx	lr
 80420fa:	bf00      	nop
 80420fc:	40012c00 	.word	0x40012c00
 8042100:	40000400 	.word	0x40000400
 8042104:	40000800 	.word	0x40000800
 8042108:	40000c00 	.word	0x40000c00
 804210c:	40013400 	.word	0x40013400
 8042110:	40014000 	.word	0x40014000
 8042114:	40014400 	.word	0x40014400
 8042118:	40014800 	.word	0x40014800

0804211c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 804211c:	b480      	push	{r7}
 804211e:	b083      	sub	sp, #12
 8042120:	af00      	add	r7, sp, #0
 8042122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8042124:	bf00      	nop
 8042126:	370c      	adds	r7, #12
 8042128:	46bd      	mov	sp, r7
 804212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804212e:	4770      	bx	lr

08042130 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8042130:	b480      	push	{r7}
 8042132:	b083      	sub	sp, #12
 8042134:	af00      	add	r7, sp, #0
 8042136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8042138:	bf00      	nop
 804213a:	370c      	adds	r7, #12
 804213c:	46bd      	mov	sp, r7
 804213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042142:	4770      	bx	lr

08042144 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8042144:	b480      	push	{r7}
 8042146:	b083      	sub	sp, #12
 8042148:	af00      	add	r7, sp, #0
 804214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 804214c:	bf00      	nop
 804214e:	370c      	adds	r7, #12
 8042150:	46bd      	mov	sp, r7
 8042152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042156:	4770      	bx	lr

08042158 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8042158:	b480      	push	{r7}
 804215a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 804215c:	bf00      	nop
 804215e:	46bd      	mov	sp, r7
 8042160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042164:	4770      	bx	lr
	...

08042168 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8042168:	b480      	push	{r7}
 804216a:	b085      	sub	sp, #20
 804216c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 804216e:	f3ef 8305 	mrs	r3, IPSR
 8042172:	60bb      	str	r3, [r7, #8]
  return(result);
 8042174:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8042176:	2b00      	cmp	r3, #0
 8042178:	d10f      	bne.n	804219a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804217a:	f3ef 8310 	mrs	r3, PRIMASK
 804217e:	607b      	str	r3, [r7, #4]
  return(result);
 8042180:	687b      	ldr	r3, [r7, #4]
 8042182:	2b00      	cmp	r3, #0
 8042184:	d105      	bne.n	8042192 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8042186:	f3ef 8311 	mrs	r3, BASEPRI
 804218a:	603b      	str	r3, [r7, #0]
  return(result);
 804218c:	683b      	ldr	r3, [r7, #0]
 804218e:	2b00      	cmp	r3, #0
 8042190:	d007      	beq.n	80421a2 <osKernelInitialize+0x3a>
 8042192:	4b0e      	ldr	r3, [pc, #56]	; (80421cc <osKernelInitialize+0x64>)
 8042194:	681b      	ldr	r3, [r3, #0]
 8042196:	2b02      	cmp	r3, #2
 8042198:	d103      	bne.n	80421a2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 804219a:	f06f 0305 	mvn.w	r3, #5
 804219e:	60fb      	str	r3, [r7, #12]
 80421a0:	e00c      	b.n	80421bc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80421a2:	4b0a      	ldr	r3, [pc, #40]	; (80421cc <osKernelInitialize+0x64>)
 80421a4:	681b      	ldr	r3, [r3, #0]
 80421a6:	2b00      	cmp	r3, #0
 80421a8:	d105      	bne.n	80421b6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80421aa:	4b08      	ldr	r3, [pc, #32]	; (80421cc <osKernelInitialize+0x64>)
 80421ac:	2201      	movs	r2, #1
 80421ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80421b0:	2300      	movs	r3, #0
 80421b2:	60fb      	str	r3, [r7, #12]
 80421b4:	e002      	b.n	80421bc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80421b6:	f04f 33ff 	mov.w	r3, #4294967295
 80421ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80421bc:	68fb      	ldr	r3, [r7, #12]
}
 80421be:	4618      	mov	r0, r3
 80421c0:	3714      	adds	r7, #20
 80421c2:	46bd      	mov	sp, r7
 80421c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80421c8:	4770      	bx	lr
 80421ca:	bf00      	nop
 80421cc:	20018044 	.word	0x20018044

080421d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80421d0:	b580      	push	{r7, lr}
 80421d2:	b084      	sub	sp, #16
 80421d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80421d6:	f3ef 8305 	mrs	r3, IPSR
 80421da:	60bb      	str	r3, [r7, #8]
  return(result);
 80421dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80421de:	2b00      	cmp	r3, #0
 80421e0:	d10f      	bne.n	8042202 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80421e2:	f3ef 8310 	mrs	r3, PRIMASK
 80421e6:	607b      	str	r3, [r7, #4]
  return(result);
 80421e8:	687b      	ldr	r3, [r7, #4]
 80421ea:	2b00      	cmp	r3, #0
 80421ec:	d105      	bne.n	80421fa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80421ee:	f3ef 8311 	mrs	r3, BASEPRI
 80421f2:	603b      	str	r3, [r7, #0]
  return(result);
 80421f4:	683b      	ldr	r3, [r7, #0]
 80421f6:	2b00      	cmp	r3, #0
 80421f8:	d007      	beq.n	804220a <osKernelStart+0x3a>
 80421fa:	4b0f      	ldr	r3, [pc, #60]	; (8042238 <osKernelStart+0x68>)
 80421fc:	681b      	ldr	r3, [r3, #0]
 80421fe:	2b02      	cmp	r3, #2
 8042200:	d103      	bne.n	804220a <osKernelStart+0x3a>
    stat = osErrorISR;
 8042202:	f06f 0305 	mvn.w	r3, #5
 8042206:	60fb      	str	r3, [r7, #12]
 8042208:	e010      	b.n	804222c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 804220a:	4b0b      	ldr	r3, [pc, #44]	; (8042238 <osKernelStart+0x68>)
 804220c:	681b      	ldr	r3, [r3, #0]
 804220e:	2b01      	cmp	r3, #1
 8042210:	d109      	bne.n	8042226 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8042212:	f7ff ffa1 	bl	8042158 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8042216:	4b08      	ldr	r3, [pc, #32]	; (8042238 <osKernelStart+0x68>)
 8042218:	2202      	movs	r2, #2
 804221a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 804221c:	f001 fb62 	bl	80438e4 <vTaskStartScheduler>
      stat = osOK;
 8042220:	2300      	movs	r3, #0
 8042222:	60fb      	str	r3, [r7, #12]
 8042224:	e002      	b.n	804222c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8042226:	f04f 33ff 	mov.w	r3, #4294967295
 804222a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 804222c:	68fb      	ldr	r3, [r7, #12]
}
 804222e:	4618      	mov	r0, r3
 8042230:	3710      	adds	r7, #16
 8042232:	46bd      	mov	sp, r7
 8042234:	bd80      	pop	{r7, pc}
 8042236:	bf00      	nop
 8042238:	20018044 	.word	0x20018044

0804223c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 804223c:	b580      	push	{r7, lr}
 804223e:	b090      	sub	sp, #64	; 0x40
 8042240:	af04      	add	r7, sp, #16
 8042242:	60f8      	str	r0, [r7, #12]
 8042244:	60b9      	str	r1, [r7, #8]
 8042246:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8042248:	2300      	movs	r3, #0
 804224a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 804224c:	f3ef 8305 	mrs	r3, IPSR
 8042250:	61fb      	str	r3, [r7, #28]
  return(result);
 8042252:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8042254:	2b00      	cmp	r3, #0
 8042256:	f040 8090 	bne.w	804237a <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804225a:	f3ef 8310 	mrs	r3, PRIMASK
 804225e:	61bb      	str	r3, [r7, #24]
  return(result);
 8042260:	69bb      	ldr	r3, [r7, #24]
 8042262:	2b00      	cmp	r3, #0
 8042264:	d105      	bne.n	8042272 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8042266:	f3ef 8311 	mrs	r3, BASEPRI
 804226a:	617b      	str	r3, [r7, #20]
  return(result);
 804226c:	697b      	ldr	r3, [r7, #20]
 804226e:	2b00      	cmp	r3, #0
 8042270:	d003      	beq.n	804227a <osThreadNew+0x3e>
 8042272:	4b44      	ldr	r3, [pc, #272]	; (8042384 <osThreadNew+0x148>)
 8042274:	681b      	ldr	r3, [r3, #0]
 8042276:	2b02      	cmp	r3, #2
 8042278:	d07f      	beq.n	804237a <osThreadNew+0x13e>
 804227a:	68fb      	ldr	r3, [r7, #12]
 804227c:	2b00      	cmp	r3, #0
 804227e:	d07c      	beq.n	804237a <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8042280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8042284:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8042286:	2318      	movs	r3, #24
 8042288:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 804228a:	2300      	movs	r3, #0
 804228c:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 804228e:	f04f 33ff 	mov.w	r3, #4294967295
 8042292:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8042294:	687b      	ldr	r3, [r7, #4]
 8042296:	2b00      	cmp	r3, #0
 8042298:	d045      	beq.n	8042326 <osThreadNew+0xea>
      if (attr->name != NULL) {
 804229a:	687b      	ldr	r3, [r7, #4]
 804229c:	681b      	ldr	r3, [r3, #0]
 804229e:	2b00      	cmp	r3, #0
 80422a0:	d002      	beq.n	80422a8 <osThreadNew+0x6c>
        name = attr->name;
 80422a2:	687b      	ldr	r3, [r7, #4]
 80422a4:	681b      	ldr	r3, [r3, #0]
 80422a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80422a8:	687b      	ldr	r3, [r7, #4]
 80422aa:	699b      	ldr	r3, [r3, #24]
 80422ac:	2b00      	cmp	r3, #0
 80422ae:	d002      	beq.n	80422b6 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 80422b0:	687b      	ldr	r3, [r7, #4]
 80422b2:	699b      	ldr	r3, [r3, #24]
 80422b4:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80422b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80422b8:	2b00      	cmp	r3, #0
 80422ba:	d008      	beq.n	80422ce <osThreadNew+0x92>
 80422bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80422be:	2b38      	cmp	r3, #56	; 0x38
 80422c0:	d805      	bhi.n	80422ce <osThreadNew+0x92>
 80422c2:	687b      	ldr	r3, [r7, #4]
 80422c4:	685b      	ldr	r3, [r3, #4]
 80422c6:	f003 0301 	and.w	r3, r3, #1
 80422ca:	2b00      	cmp	r3, #0
 80422cc:	d001      	beq.n	80422d2 <osThreadNew+0x96>
        return (NULL);
 80422ce:	2300      	movs	r3, #0
 80422d0:	e054      	b.n	804237c <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 80422d2:	687b      	ldr	r3, [r7, #4]
 80422d4:	695b      	ldr	r3, [r3, #20]
 80422d6:	2b00      	cmp	r3, #0
 80422d8:	d003      	beq.n	80422e2 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80422da:	687b      	ldr	r3, [r7, #4]
 80422dc:	695b      	ldr	r3, [r3, #20]
 80422de:	089b      	lsrs	r3, r3, #2
 80422e0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80422e2:	687b      	ldr	r3, [r7, #4]
 80422e4:	689b      	ldr	r3, [r3, #8]
 80422e6:	2b00      	cmp	r3, #0
 80422e8:	d00e      	beq.n	8042308 <osThreadNew+0xcc>
 80422ea:	687b      	ldr	r3, [r7, #4]
 80422ec:	68db      	ldr	r3, [r3, #12]
 80422ee:	2b5b      	cmp	r3, #91	; 0x5b
 80422f0:	d90a      	bls.n	8042308 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80422f2:	687b      	ldr	r3, [r7, #4]
 80422f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80422f6:	2b00      	cmp	r3, #0
 80422f8:	d006      	beq.n	8042308 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80422fa:	687b      	ldr	r3, [r7, #4]
 80422fc:	695b      	ldr	r3, [r3, #20]
 80422fe:	2b00      	cmp	r3, #0
 8042300:	d002      	beq.n	8042308 <osThreadNew+0xcc>
        mem = 1;
 8042302:	2301      	movs	r3, #1
 8042304:	623b      	str	r3, [r7, #32]
 8042306:	e010      	b.n	804232a <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8042308:	687b      	ldr	r3, [r7, #4]
 804230a:	689b      	ldr	r3, [r3, #8]
 804230c:	2b00      	cmp	r3, #0
 804230e:	d10c      	bne.n	804232a <osThreadNew+0xee>
 8042310:	687b      	ldr	r3, [r7, #4]
 8042312:	68db      	ldr	r3, [r3, #12]
 8042314:	2b00      	cmp	r3, #0
 8042316:	d108      	bne.n	804232a <osThreadNew+0xee>
 8042318:	687b      	ldr	r3, [r7, #4]
 804231a:	691b      	ldr	r3, [r3, #16]
 804231c:	2b00      	cmp	r3, #0
 804231e:	d104      	bne.n	804232a <osThreadNew+0xee>
          mem = 0;
 8042320:	2300      	movs	r3, #0
 8042322:	623b      	str	r3, [r7, #32]
 8042324:	e001      	b.n	804232a <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8042326:	2300      	movs	r3, #0
 8042328:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 804232a:	6a3b      	ldr	r3, [r7, #32]
 804232c:	2b01      	cmp	r3, #1
 804232e:	d110      	bne.n	8042352 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8042330:	687b      	ldr	r3, [r7, #4]
 8042332:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8042334:	687a      	ldr	r2, [r7, #4]
 8042336:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8042338:	9202      	str	r2, [sp, #8]
 804233a:	9301      	str	r3, [sp, #4]
 804233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804233e:	9300      	str	r3, [sp, #0]
 8042340:	68bb      	ldr	r3, [r7, #8]
 8042342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8042344:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8042346:	68f8      	ldr	r0, [r7, #12]
 8042348:	f001 f930 	bl	80435ac <xTaskCreateStatic>
 804234c:	4603      	mov	r3, r0
 804234e:	613b      	str	r3, [r7, #16]
 8042350:	e013      	b.n	804237a <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8042352:	6a3b      	ldr	r3, [r7, #32]
 8042354:	2b00      	cmp	r3, #0
 8042356:	d110      	bne.n	804237a <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8042358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804235a:	b29a      	uxth	r2, r3
 804235c:	f107 0310 	add.w	r3, r7, #16
 8042360:	9301      	str	r3, [sp, #4]
 8042362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042364:	9300      	str	r3, [sp, #0]
 8042366:	68bb      	ldr	r3, [r7, #8]
 8042368:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 804236a:	68f8      	ldr	r0, [r7, #12]
 804236c:	f001 f960 	bl	8043630 <xTaskCreate>
 8042370:	4603      	mov	r3, r0
 8042372:	2b01      	cmp	r3, #1
 8042374:	d001      	beq.n	804237a <osThreadNew+0x13e>
          hTask = NULL;
 8042376:	2300      	movs	r3, #0
 8042378:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 804237a:	693b      	ldr	r3, [r7, #16]
}
 804237c:	4618      	mov	r0, r3
 804237e:	3730      	adds	r7, #48	; 0x30
 8042380:	46bd      	mov	sp, r7
 8042382:	bd80      	pop	{r7, pc}
 8042384:	20018044 	.word	0x20018044

08042388 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8042388:	b580      	push	{r7, lr}
 804238a:	b086      	sub	sp, #24
 804238c:	af00      	add	r7, sp, #0
 804238e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8042390:	f3ef 8305 	mrs	r3, IPSR
 8042394:	613b      	str	r3, [r7, #16]
  return(result);
 8042396:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8042398:	2b00      	cmp	r3, #0
 804239a:	d10f      	bne.n	80423bc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804239c:	f3ef 8310 	mrs	r3, PRIMASK
 80423a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80423a2:	68fb      	ldr	r3, [r7, #12]
 80423a4:	2b00      	cmp	r3, #0
 80423a6:	d105      	bne.n	80423b4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80423a8:	f3ef 8311 	mrs	r3, BASEPRI
 80423ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80423ae:	68bb      	ldr	r3, [r7, #8]
 80423b0:	2b00      	cmp	r3, #0
 80423b2:	d007      	beq.n	80423c4 <osDelay+0x3c>
 80423b4:	4b0a      	ldr	r3, [pc, #40]	; (80423e0 <osDelay+0x58>)
 80423b6:	681b      	ldr	r3, [r3, #0]
 80423b8:	2b02      	cmp	r3, #2
 80423ba:	d103      	bne.n	80423c4 <osDelay+0x3c>
    stat = osErrorISR;
 80423bc:	f06f 0305 	mvn.w	r3, #5
 80423c0:	617b      	str	r3, [r7, #20]
 80423c2:	e007      	b.n	80423d4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80423c4:	2300      	movs	r3, #0
 80423c6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80423c8:	687b      	ldr	r3, [r7, #4]
 80423ca:	2b00      	cmp	r3, #0
 80423cc:	d002      	beq.n	80423d4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80423ce:	6878      	ldr	r0, [r7, #4]
 80423d0:	f001 fa64 	bl	804389c <vTaskDelay>
    }
  }

  return (stat);
 80423d4:	697b      	ldr	r3, [r7, #20]
}
 80423d6:	4618      	mov	r0, r3
 80423d8:	3718      	adds	r7, #24
 80423da:	46bd      	mov	sp, r7
 80423dc:	bd80      	pop	{r7, pc}
 80423de:	bf00      	nop
 80423e0:	20018044 	.word	0x20018044

080423e4 <vApplicationStackOverflowHook>:

/**
  Dummy implementation of the callback function vApplicationStackOverflowHook().
*/
#if (configCHECK_FOR_STACK_OVERFLOW > 0)
__WEAK void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName) {
 80423e4:	b480      	push	{r7}
 80423e6:	b083      	sub	sp, #12
 80423e8:	af00      	add	r7, sp, #0
 80423ea:	6078      	str	r0, [r7, #4]
 80423ec:	6039      	str	r1, [r7, #0]
  (void)xTask;
  (void)pcTaskName;
}
 80423ee:	bf00      	nop
 80423f0:	370c      	adds	r7, #12
 80423f2:	46bd      	mov	sp, r7
 80423f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80423f8:	4770      	bx	lr
	...

080423fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80423fc:	b480      	push	{r7}
 80423fe:	b085      	sub	sp, #20
 8042400:	af00      	add	r7, sp, #0
 8042402:	60f8      	str	r0, [r7, #12]
 8042404:	60b9      	str	r1, [r7, #8]
 8042406:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8042408:	68fb      	ldr	r3, [r7, #12]
 804240a:	4a07      	ldr	r2, [pc, #28]	; (8042428 <vApplicationGetIdleTaskMemory+0x2c>)
 804240c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 804240e:	68bb      	ldr	r3, [r7, #8]
 8042410:	4a06      	ldr	r2, [pc, #24]	; (804242c <vApplicationGetIdleTaskMemory+0x30>)
 8042412:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8042414:	687b      	ldr	r3, [r7, #4]
 8042416:	f44f 7200 	mov.w	r2, #512	; 0x200
 804241a:	601a      	str	r2, [r3, #0]
}
 804241c:	bf00      	nop
 804241e:	3714      	adds	r7, #20
 8042420:	46bd      	mov	sp, r7
 8042422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042426:	4770      	bx	lr
 8042428:	20018048 	.word	0x20018048
 804242c:	200180a4 	.word	0x200180a4

08042430 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8042430:	b480      	push	{r7}
 8042432:	b085      	sub	sp, #20
 8042434:	af00      	add	r7, sp, #0
 8042436:	60f8      	str	r0, [r7, #12]
 8042438:	60b9      	str	r1, [r7, #8]
 804243a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 804243c:	68fb      	ldr	r3, [r7, #12]
 804243e:	4a07      	ldr	r2, [pc, #28]	; (804245c <vApplicationGetTimerTaskMemory+0x2c>)
 8042440:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8042442:	68bb      	ldr	r3, [r7, #8]
 8042444:	4a06      	ldr	r2, [pc, #24]	; (8042460 <vApplicationGetTimerTaskMemory+0x30>)
 8042446:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8042448:	687b      	ldr	r3, [r7, #4]
 804244a:	f44f 7200 	mov.w	r2, #512	; 0x200
 804244e:	601a      	str	r2, [r3, #0]
}
 8042450:	bf00      	nop
 8042452:	3714      	adds	r7, #20
 8042454:	46bd      	mov	sp, r7
 8042456:	f85d 7b04 	ldr.w	r7, [sp], #4
 804245a:	4770      	bx	lr
 804245c:	200188a4 	.word	0x200188a4
 8042460:	20018900 	.word	0x20018900

08042464 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8042464:	b580      	push	{r7, lr}
 8042466:	b086      	sub	sp, #24
 8042468:	af00      	add	r7, sp, #0
 804246a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 804246c:	2300      	movs	r3, #0
 804246e:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8042470:	f001 fa8c 	bl	804398c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8042474:	4b4a      	ldr	r3, [pc, #296]	; (80425a0 <pvPortMalloc+0x13c>)
 8042476:	681b      	ldr	r3, [r3, #0]
 8042478:	2b00      	cmp	r3, #0
 804247a:	d101      	bne.n	8042480 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 804247c:	f000 f8e2 	bl	8042644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8042480:	4b48      	ldr	r3, [pc, #288]	; (80425a4 <pvPortMalloc+0x140>)
 8042482:	681a      	ldr	r2, [r3, #0]
 8042484:	687b      	ldr	r3, [r7, #4]
 8042486:	4013      	ands	r3, r2
 8042488:	2b00      	cmp	r3, #0
 804248a:	d17b      	bne.n	8042584 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 804248c:	687b      	ldr	r3, [r7, #4]
 804248e:	2b00      	cmp	r3, #0
 8042490:	d014      	beq.n	80424bc <pvPortMalloc+0x58>
			{
				xWantedSize += xHeapStructSize;
 8042492:	2208      	movs	r2, #8
 8042494:	687b      	ldr	r3, [r7, #4]
 8042496:	4413      	add	r3, r2
 8042498:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 804249a:	687b      	ldr	r3, [r7, #4]
 804249c:	f003 0307 	and.w	r3, r3, #7
 80424a0:	2b00      	cmp	r3, #0
 80424a2:	d00b      	beq.n	80424bc <pvPortMalloc+0x58>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80424a4:	687b      	ldr	r3, [r7, #4]
 80424a6:	f023 0307 	bic.w	r3, r3, #7
 80424aa:	3308      	adds	r3, #8
 80424ac:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80424ae:	687b      	ldr	r3, [r7, #4]
 80424b0:	f003 0307 	and.w	r3, r3, #7
 80424b4:	2b00      	cmp	r3, #0
 80424b6:	d001      	beq.n	80424bc <pvPortMalloc+0x58>
 80424b8:	b672      	cpsid	i
 80424ba:	e7fe      	b.n	80424ba <pvPortMalloc+0x56>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80424bc:	687b      	ldr	r3, [r7, #4]
 80424be:	2b00      	cmp	r3, #0
 80424c0:	d060      	beq.n	8042584 <pvPortMalloc+0x120>
 80424c2:	4b39      	ldr	r3, [pc, #228]	; (80425a8 <pvPortMalloc+0x144>)
 80424c4:	681b      	ldr	r3, [r3, #0]
 80424c6:	687a      	ldr	r2, [r7, #4]
 80424c8:	429a      	cmp	r2, r3
 80424ca:	d85b      	bhi.n	8042584 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80424cc:	4b37      	ldr	r3, [pc, #220]	; (80425ac <pvPortMalloc+0x148>)
 80424ce:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80424d0:	4b36      	ldr	r3, [pc, #216]	; (80425ac <pvPortMalloc+0x148>)
 80424d2:	681b      	ldr	r3, [r3, #0]
 80424d4:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80424d6:	e004      	b.n	80424e2 <pvPortMalloc+0x7e>
				{
					pxPreviousBlock = pxBlock;
 80424d8:	697b      	ldr	r3, [r7, #20]
 80424da:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80424dc:	697b      	ldr	r3, [r7, #20]
 80424de:	681b      	ldr	r3, [r3, #0]
 80424e0:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80424e2:	697b      	ldr	r3, [r7, #20]
 80424e4:	685b      	ldr	r3, [r3, #4]
 80424e6:	687a      	ldr	r2, [r7, #4]
 80424e8:	429a      	cmp	r2, r3
 80424ea:	d903      	bls.n	80424f4 <pvPortMalloc+0x90>
 80424ec:	697b      	ldr	r3, [r7, #20]
 80424ee:	681b      	ldr	r3, [r3, #0]
 80424f0:	2b00      	cmp	r3, #0
 80424f2:	d1f1      	bne.n	80424d8 <pvPortMalloc+0x74>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80424f4:	4b2a      	ldr	r3, [pc, #168]	; (80425a0 <pvPortMalloc+0x13c>)
 80424f6:	681b      	ldr	r3, [r3, #0]
 80424f8:	697a      	ldr	r2, [r7, #20]
 80424fa:	429a      	cmp	r2, r3
 80424fc:	d042      	beq.n	8042584 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80424fe:	693b      	ldr	r3, [r7, #16]
 8042500:	681b      	ldr	r3, [r3, #0]
 8042502:	2208      	movs	r2, #8
 8042504:	4413      	add	r3, r2
 8042506:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8042508:	697b      	ldr	r3, [r7, #20]
 804250a:	681a      	ldr	r2, [r3, #0]
 804250c:	693b      	ldr	r3, [r7, #16]
 804250e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8042510:	697b      	ldr	r3, [r7, #20]
 8042512:	685a      	ldr	r2, [r3, #4]
 8042514:	687b      	ldr	r3, [r7, #4]
 8042516:	1ad2      	subs	r2, r2, r3
 8042518:	2308      	movs	r3, #8
 804251a:	005b      	lsls	r3, r3, #1
 804251c:	429a      	cmp	r2, r3
 804251e:	d916      	bls.n	804254e <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8042520:	697a      	ldr	r2, [r7, #20]
 8042522:	687b      	ldr	r3, [r7, #4]
 8042524:	4413      	add	r3, r2
 8042526:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8042528:	68bb      	ldr	r3, [r7, #8]
 804252a:	f003 0307 	and.w	r3, r3, #7
 804252e:	2b00      	cmp	r3, #0
 8042530:	d001      	beq.n	8042536 <pvPortMalloc+0xd2>
 8042532:	b672      	cpsid	i
 8042534:	e7fe      	b.n	8042534 <pvPortMalloc+0xd0>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8042536:	697b      	ldr	r3, [r7, #20]
 8042538:	685a      	ldr	r2, [r3, #4]
 804253a:	687b      	ldr	r3, [r7, #4]
 804253c:	1ad2      	subs	r2, r2, r3
 804253e:	68bb      	ldr	r3, [r7, #8]
 8042540:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8042542:	697b      	ldr	r3, [r7, #20]
 8042544:	687a      	ldr	r2, [r7, #4]
 8042546:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8042548:	68b8      	ldr	r0, [r7, #8]
 804254a:	f000 f8dd 	bl	8042708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 804254e:	4b16      	ldr	r3, [pc, #88]	; (80425a8 <pvPortMalloc+0x144>)
 8042550:	681a      	ldr	r2, [r3, #0]
 8042552:	697b      	ldr	r3, [r7, #20]
 8042554:	685b      	ldr	r3, [r3, #4]
 8042556:	1ad3      	subs	r3, r2, r3
 8042558:	4a13      	ldr	r2, [pc, #76]	; (80425a8 <pvPortMalloc+0x144>)
 804255a:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 804255c:	4b12      	ldr	r3, [pc, #72]	; (80425a8 <pvPortMalloc+0x144>)
 804255e:	681a      	ldr	r2, [r3, #0]
 8042560:	4b13      	ldr	r3, [pc, #76]	; (80425b0 <pvPortMalloc+0x14c>)
 8042562:	681b      	ldr	r3, [r3, #0]
 8042564:	429a      	cmp	r2, r3
 8042566:	d203      	bcs.n	8042570 <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8042568:	4b0f      	ldr	r3, [pc, #60]	; (80425a8 <pvPortMalloc+0x144>)
 804256a:	681b      	ldr	r3, [r3, #0]
 804256c:	4a10      	ldr	r2, [pc, #64]	; (80425b0 <pvPortMalloc+0x14c>)
 804256e:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8042570:	697b      	ldr	r3, [r7, #20]
 8042572:	685a      	ldr	r2, [r3, #4]
 8042574:	4b0b      	ldr	r3, [pc, #44]	; (80425a4 <pvPortMalloc+0x140>)
 8042576:	681b      	ldr	r3, [r3, #0]
 8042578:	431a      	orrs	r2, r3
 804257a:	697b      	ldr	r3, [r7, #20]
 804257c:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 804257e:	697b      	ldr	r3, [r7, #20]
 8042580:	2200      	movs	r2, #0
 8042582:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8042584:	f001 fa48 	bl	8043a18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8042588:	68fb      	ldr	r3, [r7, #12]
 804258a:	f003 0307 	and.w	r3, r3, #7
 804258e:	2b00      	cmp	r3, #0
 8042590:	d001      	beq.n	8042596 <pvPortMalloc+0x132>
 8042592:	b672      	cpsid	i
 8042594:	e7fe      	b.n	8042594 <pvPortMalloc+0x130>
	return pvReturn;
 8042596:	68fb      	ldr	r3, [r7, #12]
}
 8042598:	4618      	mov	r0, r3
 804259a:	3718      	adds	r7, #24
 804259c:	46bd      	mov	sp, r7
 804259e:	bd80      	pop	{r7, pc}
 80425a0:	2001b108 	.word	0x2001b108
 80425a4:	2001b114 	.word	0x2001b114
 80425a8:	2001b10c 	.word	0x2001b10c
 80425ac:	2001b100 	.word	0x2001b100
 80425b0:	2001b110 	.word	0x2001b110

080425b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80425b4:	b580      	push	{r7, lr}
 80425b6:	b084      	sub	sp, #16
 80425b8:	af00      	add	r7, sp, #0
 80425ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80425bc:	687b      	ldr	r3, [r7, #4]
 80425be:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80425c0:	687b      	ldr	r3, [r7, #4]
 80425c2:	2b00      	cmp	r3, #0
 80425c4:	d036      	beq.n	8042634 <vPortFree+0x80>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80425c6:	2308      	movs	r3, #8
 80425c8:	425b      	negs	r3, r3
 80425ca:	68fa      	ldr	r2, [r7, #12]
 80425cc:	4413      	add	r3, r2
 80425ce:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80425d0:	68fb      	ldr	r3, [r7, #12]
 80425d2:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80425d4:	68bb      	ldr	r3, [r7, #8]
 80425d6:	685a      	ldr	r2, [r3, #4]
 80425d8:	4b18      	ldr	r3, [pc, #96]	; (804263c <vPortFree+0x88>)
 80425da:	681b      	ldr	r3, [r3, #0]
 80425dc:	4013      	ands	r3, r2
 80425de:	2b00      	cmp	r3, #0
 80425e0:	d101      	bne.n	80425e6 <vPortFree+0x32>
 80425e2:	b672      	cpsid	i
 80425e4:	e7fe      	b.n	80425e4 <vPortFree+0x30>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80425e6:	68bb      	ldr	r3, [r7, #8]
 80425e8:	681b      	ldr	r3, [r3, #0]
 80425ea:	2b00      	cmp	r3, #0
 80425ec:	d001      	beq.n	80425f2 <vPortFree+0x3e>
 80425ee:	b672      	cpsid	i
 80425f0:	e7fe      	b.n	80425f0 <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80425f2:	68bb      	ldr	r3, [r7, #8]
 80425f4:	685a      	ldr	r2, [r3, #4]
 80425f6:	4b11      	ldr	r3, [pc, #68]	; (804263c <vPortFree+0x88>)
 80425f8:	681b      	ldr	r3, [r3, #0]
 80425fa:	4013      	ands	r3, r2
 80425fc:	2b00      	cmp	r3, #0
 80425fe:	d019      	beq.n	8042634 <vPortFree+0x80>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8042600:	68bb      	ldr	r3, [r7, #8]
 8042602:	681b      	ldr	r3, [r3, #0]
 8042604:	2b00      	cmp	r3, #0
 8042606:	d115      	bne.n	8042634 <vPortFree+0x80>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8042608:	68bb      	ldr	r3, [r7, #8]
 804260a:	685a      	ldr	r2, [r3, #4]
 804260c:	4b0b      	ldr	r3, [pc, #44]	; (804263c <vPortFree+0x88>)
 804260e:	681b      	ldr	r3, [r3, #0]
 8042610:	43db      	mvns	r3, r3
 8042612:	401a      	ands	r2, r3
 8042614:	68bb      	ldr	r3, [r7, #8]
 8042616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8042618:	f001 f9b8 	bl	804398c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 804261c:	68bb      	ldr	r3, [r7, #8]
 804261e:	685a      	ldr	r2, [r3, #4]
 8042620:	4b07      	ldr	r3, [pc, #28]	; (8042640 <vPortFree+0x8c>)
 8042622:	681b      	ldr	r3, [r3, #0]
 8042624:	4413      	add	r3, r2
 8042626:	4a06      	ldr	r2, [pc, #24]	; (8042640 <vPortFree+0x8c>)
 8042628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 804262a:	68b8      	ldr	r0, [r7, #8]
 804262c:	f000 f86c 	bl	8042708 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8042630:	f001 f9f2 	bl	8043a18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8042634:	bf00      	nop
 8042636:	3710      	adds	r7, #16
 8042638:	46bd      	mov	sp, r7
 804263a:	bd80      	pop	{r7, pc}
 804263c:	2001b114 	.word	0x2001b114
 8042640:	2001b10c 	.word	0x2001b10c

08042644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8042644:	b480      	push	{r7}
 8042646:	b085      	sub	sp, #20
 8042648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 804264a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 804264e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8042650:	4b27      	ldr	r3, [pc, #156]	; (80426f0 <prvHeapInit+0xac>)
 8042652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8042654:	68fb      	ldr	r3, [r7, #12]
 8042656:	f003 0307 	and.w	r3, r3, #7
 804265a:	2b00      	cmp	r3, #0
 804265c:	d00c      	beq.n	8042678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 804265e:	68fb      	ldr	r3, [r7, #12]
 8042660:	3307      	adds	r3, #7
 8042662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8042664:	68fb      	ldr	r3, [r7, #12]
 8042666:	f023 0307 	bic.w	r3, r3, #7
 804266a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 804266c:	68ba      	ldr	r2, [r7, #8]
 804266e:	68fb      	ldr	r3, [r7, #12]
 8042670:	1ad3      	subs	r3, r2, r3
 8042672:	4a1f      	ldr	r2, [pc, #124]	; (80426f0 <prvHeapInit+0xac>)
 8042674:	4413      	add	r3, r2
 8042676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8042678:	68fb      	ldr	r3, [r7, #12]
 804267a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 804267c:	4a1d      	ldr	r2, [pc, #116]	; (80426f4 <prvHeapInit+0xb0>)
 804267e:	687b      	ldr	r3, [r7, #4]
 8042680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8042682:	4b1c      	ldr	r3, [pc, #112]	; (80426f4 <prvHeapInit+0xb0>)
 8042684:	2200      	movs	r2, #0
 8042686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8042688:	687b      	ldr	r3, [r7, #4]
 804268a:	68ba      	ldr	r2, [r7, #8]
 804268c:	4413      	add	r3, r2
 804268e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8042690:	2208      	movs	r2, #8
 8042692:	68fb      	ldr	r3, [r7, #12]
 8042694:	1a9b      	subs	r3, r3, r2
 8042696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8042698:	68fb      	ldr	r3, [r7, #12]
 804269a:	f023 0307 	bic.w	r3, r3, #7
 804269e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80426a0:	68fb      	ldr	r3, [r7, #12]
 80426a2:	4a15      	ldr	r2, [pc, #84]	; (80426f8 <prvHeapInit+0xb4>)
 80426a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80426a6:	4b14      	ldr	r3, [pc, #80]	; (80426f8 <prvHeapInit+0xb4>)
 80426a8:	681b      	ldr	r3, [r3, #0]
 80426aa:	2200      	movs	r2, #0
 80426ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80426ae:	4b12      	ldr	r3, [pc, #72]	; (80426f8 <prvHeapInit+0xb4>)
 80426b0:	681b      	ldr	r3, [r3, #0]
 80426b2:	2200      	movs	r2, #0
 80426b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80426b6:	687b      	ldr	r3, [r7, #4]
 80426b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80426ba:	683b      	ldr	r3, [r7, #0]
 80426bc:	68fa      	ldr	r2, [r7, #12]
 80426be:	1ad2      	subs	r2, r2, r3
 80426c0:	683b      	ldr	r3, [r7, #0]
 80426c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80426c4:	4b0c      	ldr	r3, [pc, #48]	; (80426f8 <prvHeapInit+0xb4>)
 80426c6:	681a      	ldr	r2, [r3, #0]
 80426c8:	683b      	ldr	r3, [r7, #0]
 80426ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80426cc:	683b      	ldr	r3, [r7, #0]
 80426ce:	685b      	ldr	r3, [r3, #4]
 80426d0:	4a0a      	ldr	r2, [pc, #40]	; (80426fc <prvHeapInit+0xb8>)
 80426d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80426d4:	683b      	ldr	r3, [r7, #0]
 80426d6:	685b      	ldr	r3, [r3, #4]
 80426d8:	4a09      	ldr	r2, [pc, #36]	; (8042700 <prvHeapInit+0xbc>)
 80426da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80426dc:	4b09      	ldr	r3, [pc, #36]	; (8042704 <prvHeapInit+0xc0>)
 80426de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80426e2:	601a      	str	r2, [r3, #0]
}
 80426e4:	bf00      	nop
 80426e6:	3714      	adds	r7, #20
 80426e8:	46bd      	mov	sp, r7
 80426ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80426ee:	4770      	bx	lr
 80426f0:	20019100 	.word	0x20019100
 80426f4:	2001b100 	.word	0x2001b100
 80426f8:	2001b108 	.word	0x2001b108
 80426fc:	2001b110 	.word	0x2001b110
 8042700:	2001b10c 	.word	0x2001b10c
 8042704:	2001b114 	.word	0x2001b114

08042708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8042708:	b480      	push	{r7}
 804270a:	b085      	sub	sp, #20
 804270c:	af00      	add	r7, sp, #0
 804270e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8042710:	4b28      	ldr	r3, [pc, #160]	; (80427b4 <prvInsertBlockIntoFreeList+0xac>)
 8042712:	60fb      	str	r3, [r7, #12]
 8042714:	e002      	b.n	804271c <prvInsertBlockIntoFreeList+0x14>
 8042716:	68fb      	ldr	r3, [r7, #12]
 8042718:	681b      	ldr	r3, [r3, #0]
 804271a:	60fb      	str	r3, [r7, #12]
 804271c:	68fb      	ldr	r3, [r7, #12]
 804271e:	681b      	ldr	r3, [r3, #0]
 8042720:	687a      	ldr	r2, [r7, #4]
 8042722:	429a      	cmp	r2, r3
 8042724:	d8f7      	bhi.n	8042716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8042726:	68fb      	ldr	r3, [r7, #12]
 8042728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 804272a:	68fb      	ldr	r3, [r7, #12]
 804272c:	685b      	ldr	r3, [r3, #4]
 804272e:	68ba      	ldr	r2, [r7, #8]
 8042730:	4413      	add	r3, r2
 8042732:	687a      	ldr	r2, [r7, #4]
 8042734:	429a      	cmp	r2, r3
 8042736:	d108      	bne.n	804274a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8042738:	68fb      	ldr	r3, [r7, #12]
 804273a:	685a      	ldr	r2, [r3, #4]
 804273c:	687b      	ldr	r3, [r7, #4]
 804273e:	685b      	ldr	r3, [r3, #4]
 8042740:	441a      	add	r2, r3
 8042742:	68fb      	ldr	r3, [r7, #12]
 8042744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8042746:	68fb      	ldr	r3, [r7, #12]
 8042748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 804274a:	687b      	ldr	r3, [r7, #4]
 804274c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 804274e:	687b      	ldr	r3, [r7, #4]
 8042750:	685b      	ldr	r3, [r3, #4]
 8042752:	68ba      	ldr	r2, [r7, #8]
 8042754:	441a      	add	r2, r3
 8042756:	68fb      	ldr	r3, [r7, #12]
 8042758:	681b      	ldr	r3, [r3, #0]
 804275a:	429a      	cmp	r2, r3
 804275c:	d118      	bne.n	8042790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 804275e:	68fb      	ldr	r3, [r7, #12]
 8042760:	681a      	ldr	r2, [r3, #0]
 8042762:	4b15      	ldr	r3, [pc, #84]	; (80427b8 <prvInsertBlockIntoFreeList+0xb0>)
 8042764:	681b      	ldr	r3, [r3, #0]
 8042766:	429a      	cmp	r2, r3
 8042768:	d00d      	beq.n	8042786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 804276a:	687b      	ldr	r3, [r7, #4]
 804276c:	685a      	ldr	r2, [r3, #4]
 804276e:	68fb      	ldr	r3, [r7, #12]
 8042770:	681b      	ldr	r3, [r3, #0]
 8042772:	685b      	ldr	r3, [r3, #4]
 8042774:	441a      	add	r2, r3
 8042776:	687b      	ldr	r3, [r7, #4]
 8042778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 804277a:	68fb      	ldr	r3, [r7, #12]
 804277c:	681b      	ldr	r3, [r3, #0]
 804277e:	681a      	ldr	r2, [r3, #0]
 8042780:	687b      	ldr	r3, [r7, #4]
 8042782:	601a      	str	r2, [r3, #0]
 8042784:	e008      	b.n	8042798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8042786:	4b0c      	ldr	r3, [pc, #48]	; (80427b8 <prvInsertBlockIntoFreeList+0xb0>)
 8042788:	681a      	ldr	r2, [r3, #0]
 804278a:	687b      	ldr	r3, [r7, #4]
 804278c:	601a      	str	r2, [r3, #0]
 804278e:	e003      	b.n	8042798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8042790:	68fb      	ldr	r3, [r7, #12]
 8042792:	681a      	ldr	r2, [r3, #0]
 8042794:	687b      	ldr	r3, [r7, #4]
 8042796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8042798:	68fa      	ldr	r2, [r7, #12]
 804279a:	687b      	ldr	r3, [r7, #4]
 804279c:	429a      	cmp	r2, r3
 804279e:	d002      	beq.n	80427a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80427a0:	68fb      	ldr	r3, [r7, #12]
 80427a2:	687a      	ldr	r2, [r7, #4]
 80427a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80427a6:	bf00      	nop
 80427a8:	3714      	adds	r7, #20
 80427aa:	46bd      	mov	sp, r7
 80427ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80427b0:	4770      	bx	lr
 80427b2:	bf00      	nop
 80427b4:	2001b100 	.word	0x2001b100
 80427b8:	2001b108 	.word	0x2001b108

080427bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80427bc:	b480      	push	{r7}
 80427be:	b083      	sub	sp, #12
 80427c0:	af00      	add	r7, sp, #0
 80427c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80427c4:	687b      	ldr	r3, [r7, #4]
 80427c6:	f103 0208 	add.w	r2, r3, #8
 80427ca:	687b      	ldr	r3, [r7, #4]
 80427cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80427ce:	687b      	ldr	r3, [r7, #4]
 80427d0:	f04f 32ff 	mov.w	r2, #4294967295
 80427d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80427d6:	687b      	ldr	r3, [r7, #4]
 80427d8:	f103 0208 	add.w	r2, r3, #8
 80427dc:	687b      	ldr	r3, [r7, #4]
 80427de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80427e0:	687b      	ldr	r3, [r7, #4]
 80427e2:	f103 0208 	add.w	r2, r3, #8
 80427e6:	687b      	ldr	r3, [r7, #4]
 80427e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80427ea:	687b      	ldr	r3, [r7, #4]
 80427ec:	2200      	movs	r2, #0
 80427ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80427f0:	bf00      	nop
 80427f2:	370c      	adds	r7, #12
 80427f4:	46bd      	mov	sp, r7
 80427f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80427fa:	4770      	bx	lr

080427fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80427fc:	b480      	push	{r7}
 80427fe:	b083      	sub	sp, #12
 8042800:	af00      	add	r7, sp, #0
 8042802:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8042804:	687b      	ldr	r3, [r7, #4]
 8042806:	2200      	movs	r2, #0
 8042808:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 804280a:	bf00      	nop
 804280c:	370c      	adds	r7, #12
 804280e:	46bd      	mov	sp, r7
 8042810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042814:	4770      	bx	lr

08042816 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8042816:	b480      	push	{r7}
 8042818:	b085      	sub	sp, #20
 804281a:	af00      	add	r7, sp, #0
 804281c:	6078      	str	r0, [r7, #4]
 804281e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8042820:	687b      	ldr	r3, [r7, #4]
 8042822:	685b      	ldr	r3, [r3, #4]
 8042824:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8042826:	683b      	ldr	r3, [r7, #0]
 8042828:	68fa      	ldr	r2, [r7, #12]
 804282a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 804282c:	68fb      	ldr	r3, [r7, #12]
 804282e:	689a      	ldr	r2, [r3, #8]
 8042830:	683b      	ldr	r3, [r7, #0]
 8042832:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8042834:	68fb      	ldr	r3, [r7, #12]
 8042836:	689b      	ldr	r3, [r3, #8]
 8042838:	683a      	ldr	r2, [r7, #0]
 804283a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 804283c:	68fb      	ldr	r3, [r7, #12]
 804283e:	683a      	ldr	r2, [r7, #0]
 8042840:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8042842:	683b      	ldr	r3, [r7, #0]
 8042844:	687a      	ldr	r2, [r7, #4]
 8042846:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8042848:	687b      	ldr	r3, [r7, #4]
 804284a:	681b      	ldr	r3, [r3, #0]
 804284c:	1c5a      	adds	r2, r3, #1
 804284e:	687b      	ldr	r3, [r7, #4]
 8042850:	601a      	str	r2, [r3, #0]
}
 8042852:	bf00      	nop
 8042854:	3714      	adds	r7, #20
 8042856:	46bd      	mov	sp, r7
 8042858:	f85d 7b04 	ldr.w	r7, [sp], #4
 804285c:	4770      	bx	lr

0804285e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 804285e:	b480      	push	{r7}
 8042860:	b085      	sub	sp, #20
 8042862:	af00      	add	r7, sp, #0
 8042864:	6078      	str	r0, [r7, #4]
 8042866:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8042868:	683b      	ldr	r3, [r7, #0]
 804286a:	681b      	ldr	r3, [r3, #0]
 804286c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 804286e:	68bb      	ldr	r3, [r7, #8]
 8042870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042874:	d103      	bne.n	804287e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8042876:	687b      	ldr	r3, [r7, #4]
 8042878:	691b      	ldr	r3, [r3, #16]
 804287a:	60fb      	str	r3, [r7, #12]
 804287c:	e00c      	b.n	8042898 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 804287e:	687b      	ldr	r3, [r7, #4]
 8042880:	3308      	adds	r3, #8
 8042882:	60fb      	str	r3, [r7, #12]
 8042884:	e002      	b.n	804288c <vListInsert+0x2e>
 8042886:	68fb      	ldr	r3, [r7, #12]
 8042888:	685b      	ldr	r3, [r3, #4]
 804288a:	60fb      	str	r3, [r7, #12]
 804288c:	68fb      	ldr	r3, [r7, #12]
 804288e:	685b      	ldr	r3, [r3, #4]
 8042890:	681b      	ldr	r3, [r3, #0]
 8042892:	68ba      	ldr	r2, [r7, #8]
 8042894:	429a      	cmp	r2, r3
 8042896:	d2f6      	bcs.n	8042886 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8042898:	68fb      	ldr	r3, [r7, #12]
 804289a:	685a      	ldr	r2, [r3, #4]
 804289c:	683b      	ldr	r3, [r7, #0]
 804289e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80428a0:	683b      	ldr	r3, [r7, #0]
 80428a2:	685b      	ldr	r3, [r3, #4]
 80428a4:	683a      	ldr	r2, [r7, #0]
 80428a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80428a8:	683b      	ldr	r3, [r7, #0]
 80428aa:	68fa      	ldr	r2, [r7, #12]
 80428ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80428ae:	68fb      	ldr	r3, [r7, #12]
 80428b0:	683a      	ldr	r2, [r7, #0]
 80428b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80428b4:	683b      	ldr	r3, [r7, #0]
 80428b6:	687a      	ldr	r2, [r7, #4]
 80428b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80428ba:	687b      	ldr	r3, [r7, #4]
 80428bc:	681b      	ldr	r3, [r3, #0]
 80428be:	1c5a      	adds	r2, r3, #1
 80428c0:	687b      	ldr	r3, [r7, #4]
 80428c2:	601a      	str	r2, [r3, #0]
}
 80428c4:	bf00      	nop
 80428c6:	3714      	adds	r7, #20
 80428c8:	46bd      	mov	sp, r7
 80428ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80428ce:	4770      	bx	lr

080428d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80428d0:	b480      	push	{r7}
 80428d2:	b085      	sub	sp, #20
 80428d4:	af00      	add	r7, sp, #0
 80428d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80428d8:	687b      	ldr	r3, [r7, #4]
 80428da:	691b      	ldr	r3, [r3, #16]
 80428dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80428de:	687b      	ldr	r3, [r7, #4]
 80428e0:	685b      	ldr	r3, [r3, #4]
 80428e2:	687a      	ldr	r2, [r7, #4]
 80428e4:	6892      	ldr	r2, [r2, #8]
 80428e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80428e8:	687b      	ldr	r3, [r7, #4]
 80428ea:	689b      	ldr	r3, [r3, #8]
 80428ec:	687a      	ldr	r2, [r7, #4]
 80428ee:	6852      	ldr	r2, [r2, #4]
 80428f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80428f2:	68fb      	ldr	r3, [r7, #12]
 80428f4:	685b      	ldr	r3, [r3, #4]
 80428f6:	687a      	ldr	r2, [r7, #4]
 80428f8:	429a      	cmp	r2, r3
 80428fa:	d103      	bne.n	8042904 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80428fc:	687b      	ldr	r3, [r7, #4]
 80428fe:	689a      	ldr	r2, [r3, #8]
 8042900:	68fb      	ldr	r3, [r7, #12]
 8042902:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8042904:	687b      	ldr	r3, [r7, #4]
 8042906:	2200      	movs	r2, #0
 8042908:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 804290a:	68fb      	ldr	r3, [r7, #12]
 804290c:	681b      	ldr	r3, [r3, #0]
 804290e:	1e5a      	subs	r2, r3, #1
 8042910:	68fb      	ldr	r3, [r7, #12]
 8042912:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8042914:	68fb      	ldr	r3, [r7, #12]
 8042916:	681b      	ldr	r3, [r3, #0]
}
 8042918:	4618      	mov	r0, r3
 804291a:	3714      	adds	r7, #20
 804291c:	46bd      	mov	sp, r7
 804291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042922:	4770      	bx	lr

08042924 <prvSetupTimerInterrupt>:
	portDONT_DISCARD volatile SecureContextHandle_t xSecureContext = portNO_SECURE_CONTEXT;
#endif /* configENABLE_TRUSTZONE */
/*-----------------------------------------------------------*/

static void prvSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8042924:	b480      	push	{r7}
 8042926:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*( portNVIC_SYSTICK_CTRL ) = 0UL;
 8042928:	4b0b      	ldr	r3, [pc, #44]	; (8042958 <prvSetupTimerInterrupt+0x34>)
 804292a:	2200      	movs	r2, #0
 804292c:	601a      	str	r2, [r3, #0]
	*( portNVIC_SYSTICK_CURRENT_VALUE ) = 0UL;
 804292e:	4b0b      	ldr	r3, [pc, #44]	; (804295c <prvSetupTimerInterrupt+0x38>)
 8042930:	2200      	movs	r2, #0
 8042932:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*( portNVIC_SYSTICK_LOAD ) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8042934:	4b0a      	ldr	r3, [pc, #40]	; (8042960 <prvSetupTimerInterrupt+0x3c>)
 8042936:	681b      	ldr	r3, [r3, #0]
 8042938:	4a0a      	ldr	r2, [pc, #40]	; (8042964 <prvSetupTimerInterrupt+0x40>)
 804293a:	fba2 2303 	umull	r2, r3, r2, r3
 804293e:	099b      	lsrs	r3, r3, #6
 8042940:	4a09      	ldr	r2, [pc, #36]	; (8042968 <prvSetupTimerInterrupt+0x44>)
 8042942:	3b01      	subs	r3, #1
 8042944:	6013      	str	r3, [r2, #0]
	*( portNVIC_SYSTICK_CTRL ) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8042946:	4b04      	ldr	r3, [pc, #16]	; (8042958 <prvSetupTimerInterrupt+0x34>)
 8042948:	2207      	movs	r2, #7
 804294a:	601a      	str	r2, [r3, #0]
}
 804294c:	bf00      	nop
 804294e:	46bd      	mov	sp, r7
 8042950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042954:	4770      	bx	lr
 8042956:	bf00      	nop
 8042958:	e000e010 	.word	0xe000e010
 804295c:	e000e018 	.word	0xe000e018
 8042960:	20018014 	.word	0x20018014
 8042964:	10624dd3 	.word	0x10624dd3
 8042968:	e000e014 	.word	0xe000e014

0804296c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 804296c:	b480      	push	{r7}
 804296e:	b083      	sub	sp, #12
 8042970:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8042972:	2300      	movs	r3, #0
 8042974:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 8042976:	4b09      	ldr	r3, [pc, #36]	; (804299c <prvTaskExitError+0x30>)
 8042978:	681b      	ldr	r3, [r3, #0]
 804297a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804297e:	d001      	beq.n	8042984 <prvTaskExitError+0x18>
 8042980:	b672      	cpsid	i
 8042982:	e7fe      	b.n	8042982 <prvTaskExitError+0x16>
	portDISABLE_INTERRUPTS();
 8042984:	b672      	cpsid	i

	while( ulDummy == 0 )
 8042986:	bf00      	nop
 8042988:	687b      	ldr	r3, [r7, #4]
 804298a:	2b00      	cmp	r3, #0
 804298c:	d0fc      	beq.n	8042988 <prvTaskExitError+0x1c>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 804298e:	bf00      	nop
 8042990:	370c      	adds	r7, #12
 8042992:	46bd      	mov	sp, r7
 8042994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042998:	4770      	bx	lr
 804299a:	bf00      	nop
 804299c:	20018020 	.word	0x20018020

080429a0 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 80429a0:	b480      	push	{r7}
 80429a2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80429a4:	4b06      	ldr	r3, [pc, #24]	; (80429c0 <vPortYield+0x20>)
 80429a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80429aa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80429ac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80429b0:	f3bf 8f6f 	isb	sy
}
 80429b4:	bf00      	nop
 80429b6:	46bd      	mov	sp, r7
 80429b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80429bc:	4770      	bx	lr
 80429be:	bf00      	nop
 80429c0:	e000ed04 	.word	0xe000ed04

080429c4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80429c4:	b480      	push	{r7}
 80429c6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80429c8:	b672      	cpsid	i
	ulCriticalNesting++;
 80429ca:	4b07      	ldr	r3, [pc, #28]	; (80429e8 <vPortEnterCritical+0x24>)
 80429cc:	681b      	ldr	r3, [r3, #0]
 80429ce:	3301      	adds	r3, #1
 80429d0:	4a05      	ldr	r2, [pc, #20]	; (80429e8 <vPortEnterCritical+0x24>)
 80429d2:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80429d4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80429d8:	f3bf 8f6f 	isb	sy
}
 80429dc:	bf00      	nop
 80429de:	46bd      	mov	sp, r7
 80429e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80429e4:	4770      	bx	lr
 80429e6:	bf00      	nop
 80429e8:	20018020 	.word	0x20018020

080429ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80429ec:	b480      	push	{r7}
 80429ee:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 80429f0:	4b0a      	ldr	r3, [pc, #40]	; (8042a1c <vPortExitCritical+0x30>)
 80429f2:	681b      	ldr	r3, [r3, #0]
 80429f4:	2b00      	cmp	r3, #0
 80429f6:	d101      	bne.n	80429fc <vPortExitCritical+0x10>
 80429f8:	b672      	cpsid	i
 80429fa:	e7fe      	b.n	80429fa <vPortExitCritical+0xe>
	ulCriticalNesting--;
 80429fc:	4b07      	ldr	r3, [pc, #28]	; (8042a1c <vPortExitCritical+0x30>)
 80429fe:	681b      	ldr	r3, [r3, #0]
 8042a00:	3b01      	subs	r3, #1
 8042a02:	4a06      	ldr	r2, [pc, #24]	; (8042a1c <vPortExitCritical+0x30>)
 8042a04:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 8042a06:	4b05      	ldr	r3, [pc, #20]	; (8042a1c <vPortExitCritical+0x30>)
 8042a08:	681b      	ldr	r3, [r3, #0]
 8042a0a:	2b00      	cmp	r3, #0
 8042a0c:	d100      	bne.n	8042a10 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8042a0e:	b662      	cpsie	i
	}
}
 8042a10:	bf00      	nop
 8042a12:	46bd      	mov	sp, r7
 8042a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042a18:	4770      	bx	lr
 8042a1a:	bf00      	nop
 8042a1c:	20018020 	.word	0x20018020

08042a20 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8042a20:	b580      	push	{r7, lr}
 8042a22:	b082      	sub	sp, #8
 8042a24:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8042a26:	f000 f937 	bl	8042c98 <ulSetInterruptMaskFromISR>
 8042a2a:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8042a2c:	f001 f890 	bl	8043b50 <xTaskIncrementTick>
 8042a30:	4603      	mov	r3, r0
 8042a32:	2b00      	cmp	r3, #0
 8042a34:	d003      	beq.n	8042a3e <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8042a36:	4b05      	ldr	r3, [pc, #20]	; (8042a4c <SysTick_Handler+0x2c>)
 8042a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8042a3c:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8042a3e:	6878      	ldr	r0, [r7, #4]
 8042a40:	f000 f930 	bl	8042ca4 <vClearInterruptMaskFromISR>
}
 8042a44:	bf00      	nop
 8042a46:	3708      	adds	r7, #8
 8042a48:	46bd      	mov	sp, r7
 8042a4a:	bd80      	pop	{r7, pc}
 8042a4c:	e000ed04 	.word	0xe000ed04

08042a50 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8042a50:	b580      	push	{r7, lr}
 8042a52:	b086      	sub	sp, #24
 8042a54:	af00      	add	r7, sp, #0
 8042a56:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 8042a58:	687b      	ldr	r3, [r7, #4]
 8042a5a:	699b      	ldr	r3, [r3, #24]
 8042a5c:	617b      	str	r3, [r7, #20]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 8042a5e:	697b      	ldr	r3, [r7, #20]
 8042a60:	3b02      	subs	r3, #2
 8042a62:	781b      	ldrb	r3, [r3, #0]
 8042a64:	74fb      	strb	r3, [r7, #19]

	switch( ucSVCNumber )
 8042a66:	7cfb      	ldrb	r3, [r7, #19]
 8042a68:	2b01      	cmp	r3, #1
 8042a6a:	d018      	beq.n	8042a9e <vPortSVCHandler_C+0x4e>
 8042a6c:	2b02      	cmp	r3, #2
 8042a6e:	d01e      	beq.n	8042aae <vPortSVCHandler_C+0x5e>
 8042a70:	2b00      	cmp	r3, #0
 8042a72:	d123      	bne.n	8042abc <vPortSVCHandler_C+0x6c>
		#if( configENABLE_TRUSTZONE == 1 )
			case portSVC_ALLOCATE_SECURE_CONTEXT:
			{
				/* R0 contains the stack size passed as parameter to the
				 * vPortAllocateSecureContext function. */
				ulR0 = pulCallerStackAddress[ 0 ];
 8042a74:	687b      	ldr	r3, [r7, #4]
 8042a76:	681b      	ldr	r3, [r3, #0]
 8042a78:	60fb      	str	r3, [r7, #12]
					xSecureContext = SecureContext_AllocateContext( ulR0, ulIsTaskPrivileged );
				}
				#else
				{
					/* Allocate and load a context for the secure task. */
					xSecureContext = SecureContext_AllocateContext( ulR0 );
 8042a7a:	68f8      	ldr	r0, [r7, #12]
 8042a7c:	f001 ffa4 	bl	80449c8 <__SecureContext_AllocateContext_veneer>
 8042a80:	4602      	mov	r2, r0
 8042a82:	4b11      	ldr	r3, [pc, #68]	; (8042ac8 <vPortSVCHandler_C+0x78>)
 8042a84:	601a      	str	r2, [r3, #0]
				}
				#endif /* configENABLE_MPU */

				configASSERT( xSecureContext != NULL );
 8042a86:	4b10      	ldr	r3, [pc, #64]	; (8042ac8 <vPortSVCHandler_C+0x78>)
 8042a88:	681b      	ldr	r3, [r3, #0]
 8042a8a:	2b00      	cmp	r3, #0
 8042a8c:	d101      	bne.n	8042a92 <vPortSVCHandler_C+0x42>
 8042a8e:	b672      	cpsid	i
 8042a90:	e7fe      	b.n	8042a90 <vPortSVCHandler_C+0x40>
				SecureContext_LoadContext( xSecureContext );
 8042a92:	4b0d      	ldr	r3, [pc, #52]	; (8042ac8 <vPortSVCHandler_C+0x78>)
 8042a94:	681b      	ldr	r3, [r3, #0]
 8042a96:	4618      	mov	r0, r3
 8042a98:	f001 ff8e 	bl	80449b8 <__SecureContext_LoadContext_veneer>
			}
			break;
 8042a9c:	e010      	b.n	8042ac0 <vPortSVCHandler_C+0x70>

			case portSVC_FREE_SECURE_CONTEXT:
			{
				/* R0 contains the secure context handle to be freed. */
				ulR0 = pulCallerStackAddress[ 0 ];
 8042a9e:	687b      	ldr	r3, [r7, #4]
 8042aa0:	681b      	ldr	r3, [r3, #0]
 8042aa2:	60fb      	str	r3, [r7, #12]

				/* Free the secure context. */
				SecureContext_FreeContext( ( SecureContextHandle_t ) ulR0 );
 8042aa4:	68fb      	ldr	r3, [r7, #12]
 8042aa6:	4618      	mov	r0, r3
 8042aa8:	f001 ff9e 	bl	80449e8 <__SecureContext_FreeContext_veneer>
			}
			break;
 8042aac:	e008      	b.n	8042ac0 <vPortSVCHandler_C+0x70>
		{
			#if( configENABLE_TRUSTZONE == 1 )
			{
				/* De-prioritize the non-secure exceptions so that the
				 * non-secure pendSV runs at the lowest priority. */
				SecureInit_DePrioritizeNSExceptions();
 8042aae:	f001 ffb3 	bl	8044a18 <__SecureInit_DePrioritizeNSExceptions_veneer>

				/* Initialize the secure context management system. */
				SecureContext_Init();
 8042ab2:	f001 ff91 	bl	80449d8 <__SecureContext_Init_veneer>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 8042ab6:	f000 f8bb 	bl	8042c30 <vRestoreContextOfFirstTask>
		}
		break;
 8042aba:	e001      	b.n	8042ac0 <vPortSVCHandler_C+0x70>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 8042abc:	b672      	cpsid	i
 8042abe:	e7fe      	b.n	8042abe <vPortSVCHandler_C+0x6e>
		}
	}
}
 8042ac0:	bf00      	nop
 8042ac2:	3718      	adds	r7, #24
 8042ac4:	46bd      	mov	sp, r7
 8042ac6:	bd80      	pop	{r7, pc}
 8042ac8:	2001b118 	.word	0x2001b118

08042acc <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 8042acc:	b480      	push	{r7}
 8042ace:	b085      	sub	sp, #20
 8042ad0:	af00      	add	r7, sp, #0
 8042ad2:	60f8      	str	r0, [r7, #12]
 8042ad4:	60b9      	str	r1, [r7, #8]
 8042ad6:	607a      	str	r2, [r7, #4]
 8042ad8:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8042ada:	68fb      	ldr	r3, [r7, #12]
 8042adc:	3b04      	subs	r3, #4
 8042ade:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 8042ae0:	68fb      	ldr	r3, [r7, #12]
 8042ae2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8042ae6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042ae8:	68fb      	ldr	r3, [r7, #12]
 8042aea:	3b04      	subs	r3, #4
 8042aec:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 8042aee:	687a      	ldr	r2, [r7, #4]
 8042af0:	68fb      	ldr	r3, [r7, #12]
 8042af2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042af4:	68fb      	ldr	r3, [r7, #12]
 8042af6:	3b04      	subs	r3, #4
 8042af8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8042afa:	4a3b      	ldr	r2, [pc, #236]	; (8042be8 <pxPortInitialiseStack+0x11c>)
 8042afc:	68fb      	ldr	r3, [r7, #12]
 8042afe:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042b00:	68fb      	ldr	r3, [r7, #12]
 8042b02:	3b04      	subs	r3, #4
 8042b04:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 8042b06:	68fb      	ldr	r3, [r7, #12]
 8042b08:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8042b0c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042b0e:	68fb      	ldr	r3, [r7, #12]
 8042b10:	3b04      	subs	r3, #4
 8042b12:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 8042b14:	68fb      	ldr	r3, [r7, #12]
 8042b16:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8042b1a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042b1c:	68fb      	ldr	r3, [r7, #12]
 8042b1e:	3b04      	subs	r3, #4
 8042b20:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 8042b22:	68fb      	ldr	r3, [r7, #12]
 8042b24:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8042b28:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042b2a:	68fb      	ldr	r3, [r7, #12]
 8042b2c:	3b04      	subs	r3, #4
 8042b2e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 8042b30:	68fb      	ldr	r3, [r7, #12]
 8042b32:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8042b36:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042b38:	68fb      	ldr	r3, [r7, #12]
 8042b3a:	3b04      	subs	r3, #4
 8042b3c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 8042b3e:	683a      	ldr	r2, [r7, #0]
 8042b40:	68fb      	ldr	r3, [r7, #12]
 8042b42:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042b44:	68fb      	ldr	r3, [r7, #12]
 8042b46:	3b04      	subs	r3, #4
 8042b48:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 8042b4a:	68fb      	ldr	r3, [r7, #12]
 8042b4c:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8042b50:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042b52:	68fb      	ldr	r3, [r7, #12]
 8042b54:	3b04      	subs	r3, #4
 8042b56:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 8042b58:	68fb      	ldr	r3, [r7, #12]
 8042b5a:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8042b5e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042b60:	68fb      	ldr	r3, [r7, #12]
 8042b62:	3b04      	subs	r3, #4
 8042b64:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 8042b66:	68fb      	ldr	r3, [r7, #12]
 8042b68:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8042b6c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042b6e:	68fb      	ldr	r3, [r7, #12]
 8042b70:	3b04      	subs	r3, #4
 8042b72:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 8042b74:	68fb      	ldr	r3, [r7, #12]
 8042b76:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8042b7a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042b7c:	68fb      	ldr	r3, [r7, #12]
 8042b7e:	3b04      	subs	r3, #4
 8042b80:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 8042b82:	68fb      	ldr	r3, [r7, #12]
 8042b84:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8042b88:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042b8a:	68fb      	ldr	r3, [r7, #12]
 8042b8c:	3b04      	subs	r3, #4
 8042b8e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 8042b90:	68fb      	ldr	r3, [r7, #12]
 8042b92:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8042b96:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042b98:	68fb      	ldr	r3, [r7, #12]
 8042b9a:	3b04      	subs	r3, #4
 8042b9c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 8042b9e:	68fb      	ldr	r3, [r7, #12]
 8042ba0:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8042ba4:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042ba6:	68fb      	ldr	r3, [r7, #12]
 8042ba8:	3b04      	subs	r3, #4
 8042baa:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 8042bac:	68fb      	ldr	r3, [r7, #12]
 8042bae:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8042bb2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8042bb4:	68fb      	ldr	r3, [r7, #12]
 8042bb6:	3b04      	subs	r3, #4
 8042bb8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 8042bba:	68fb      	ldr	r3, [r7, #12]
 8042bbc:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8042bc0:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 8042bc2:	68fb      	ldr	r3, [r7, #12]
 8042bc4:	3b04      	subs	r3, #4
 8042bc6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 8042bc8:	68ba      	ldr	r2, [r7, #8]
 8042bca:	68fb      	ldr	r3, [r7, #12]
 8042bcc:	601a      	str	r2, [r3, #0]

		#if( configENABLE_TRUSTZONE == 1 )
		{
			pxTopOfStack--;
 8042bce:	68fb      	ldr	r3, [r7, #12]
 8042bd0:	3b04      	subs	r3, #4
 8042bd2:	60fb      	str	r3, [r7, #12]
			*pxTopOfStack = portNO_SECURE_CONTEXT;		/* Slot used to hold this task's xSecureContext value. */
 8042bd4:	68fb      	ldr	r3, [r7, #12]
 8042bd6:	2200      	movs	r2, #0
 8042bd8:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 8042bda:	68fb      	ldr	r3, [r7, #12]
}
 8042bdc:	4618      	mov	r0, r3
 8042bde:	3714      	adds	r7, #20
 8042be0:	46bd      	mov	sp, r7
 8042be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042be6:	4770      	bx	lr
 8042be8:	0804296d 	.word	0x0804296d

08042bec <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8042bec:	b580      	push	{r7, lr}
 8042bee:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*( portNVIC_SYSPRI2 ) |= portNVIC_PENDSV_PRI;
 8042bf0:	4b0c      	ldr	r3, [pc, #48]	; (8042c24 <xPortStartScheduler+0x38>)
 8042bf2:	681b      	ldr	r3, [r3, #0]
 8042bf4:	4a0b      	ldr	r2, [pc, #44]	; (8042c24 <xPortStartScheduler+0x38>)
 8042bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8042bfa:	6013      	str	r3, [r2, #0]
	*( portNVIC_SYSPRI2 ) |= portNVIC_SYSTICK_PRI;
 8042bfc:	4b09      	ldr	r3, [pc, #36]	; (8042c24 <xPortStartScheduler+0x38>)
 8042bfe:	681b      	ldr	r3, [r3, #0]
 8042c00:	4a08      	ldr	r2, [pc, #32]	; (8042c24 <xPortStartScheduler+0x38>)
 8042c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8042c06:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	prvSetupTimerInterrupt();
 8042c08:	f7ff fe8c 	bl	8042924 <prvSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 8042c0c:	4b06      	ldr	r3, [pc, #24]	; (8042c28 <xPortStartScheduler+0x3c>)
 8042c0e:	2200      	movs	r2, #0
 8042c10:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 8042c12:	f000 f82d 	bl	8042c70 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 8042c16:	f001 f84b 	bl	8043cb0 <vTaskSwitchContext>
	prvTaskExitError();
 8042c1a:	f7ff fea7 	bl	804296c <prvTaskExitError>

	/* Should not get here. */
	return 0;
 8042c1e:	2300      	movs	r3, #0
}
 8042c20:	4618      	mov	r0, r3
 8042c22:	bd80      	pop	{r7, pc}
 8042c24:	e000ed20 	.word	0xe000ed20
 8042c28:	20018020 	.word	0x20018020
 8042c2c:	00000000 	.word	0x00000000

08042c30 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8042c30:	4a0b      	ldr	r2, [pc, #44]	; (8042c60 <pxCurrentTCBConst2>)
 8042c32:	6813      	ldr	r3, [r2, #0]
 8042c34:	6818      	ldr	r0, [r3, #0]
 8042c36:	c80e      	ldmia	r0!, {r1, r2, r3}
 8042c38:	4c0a      	ldr	r4, [pc, #40]	; (8042c64 <xSecureContextConst2>)
 8042c3a:	6021      	str	r1, [r4, #0]
 8042c3c:	f382 880b 	msr	PSPLIM, r2
 8042c40:	2102      	movs	r1, #2
 8042c42:	f381 8814 	msr	CONTROL, r1
 8042c46:	3020      	adds	r0, #32
 8042c48:	f380 8809 	msr	PSP, r0
 8042c4c:	f3bf 8f6f 	isb	sy
 8042c50:	4718      	bx	r3
 8042c52:	bf00      	nop
 8042c54:	f3af 8000 	nop.w
 8042c58:	f3af 8000 	nop.w
 8042c5c:	f3af 8000 	nop.w

08042c60 <pxCurrentTCBConst2>:
 8042c60:	2001b11c 	.word	0x2001b11c

08042c64 <xSecureContextConst2>:
 8042c64:	2001b118 	.word	0x2001b118
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8042c68:	bf00      	nop
 8042c6a:	bf00      	nop
 8042c6c:	0000      	movs	r0, r0
	...

08042c70 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8042c70:	4807      	ldr	r0, [pc, #28]	; (8042c90 <xVTORConst>)
 8042c72:	6800      	ldr	r0, [r0, #0]
 8042c74:	6800      	ldr	r0, [r0, #0]
 8042c76:	f380 8808 	msr	MSP, r0
 8042c7a:	b662      	cpsie	i
 8042c7c:	b661      	cpsie	f
 8042c7e:	f3bf 8f4f 	dsb	sy
 8042c82:	f3bf 8f6f 	isb	sy
 8042c86:	df02      	svc	2
 8042c88:	bf00      	nop
 8042c8a:	bf00      	nop
 8042c8c:	f3af 8000 	nop.w

08042c90 <xVTORConst>:
 8042c90:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 8042c94:	bf00      	nop
 8042c96:	bf00      	nop

08042c98 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8042c98:	f3ef 8010 	mrs	r0, PRIMASK
 8042c9c:	b672      	cpsid	i
 8042c9e:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will never be reached,
	 * but some compilers warn if it is not included, while others won't compile
	 * if it is. */
	return 0;
#endif
}
 8042ca0:	bf00      	nop
 8042ca2:	4618      	mov	r0, r3

08042ca4 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8042ca4:	f380 8810 	msr	PRIMASK, r0
 8042ca8:	4770      	bx	lr
	 * the compiler can't see that.  Some compilers generate warnings without
	 * the following line, while others generate warnings if the line is
	 * included. */
	( void ) ulMask;
#endif
}
 8042caa:	bf00      	nop
 8042cac:	0000      	movs	r0, r0
	...

08042cb0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8042cb0:	f3ef 8109 	mrs	r1, PSP
 8042cb4:	4a1f      	ldr	r2, [pc, #124]	; (8042d34 <xSecureContextConst>)
 8042cb6:	6810      	ldr	r0, [r2, #0]
 8042cb8:	b178      	cbz	r0, 8042cda <save_ns_context>
 8042cba:	b507      	push	{r0, r1, r2, lr}
 8042cbc:	f001 feb4 	bl	8044a28 <__SecureContext_SaveContext_veneer>
 8042cc0:	bc0f      	pop	{r0, r1, r2, r3}
 8042cc2:	469e      	mov	lr, r3
 8042cc4:	065a      	lsls	r2, r3, #25
 8042cc6:	d508      	bpl.n	8042cda <save_ns_context>
 8042cc8:	4b19      	ldr	r3, [pc, #100]	; (8042d30 <pxCurrentTCBConst>)
 8042cca:	681a      	ldr	r2, [r3, #0]
 8042ccc:	390c      	subs	r1, #12
 8042cce:	6011      	str	r1, [r2, #0]
 8042cd0:	f3ef 820b 	mrs	r2, PSPLIM
 8042cd4:	4673      	mov	r3, lr
 8042cd6:	c10d      	stmia	r1!, {r0, r2, r3}
 8042cd8:	e00b      	b.n	8042cf2 <select_next_task>

08042cda <save_ns_context>:
 8042cda:	4b15      	ldr	r3, [pc, #84]	; (8042d30 <pxCurrentTCBConst>)
 8042cdc:	681a      	ldr	r2, [r3, #0]
 8042cde:	392c      	subs	r1, #44	; 0x2c
 8042ce0:	6011      	str	r1, [r2, #0]
 8042ce2:	310c      	adds	r1, #12
 8042ce4:	e881 0ff0 	stmia.w	r1, {r4, r5, r6, r7, r8, r9, sl, fp}
 8042ce8:	f3ef 820b 	mrs	r2, PSPLIM
 8042cec:	4673      	mov	r3, lr
 8042cee:	390c      	subs	r1, #12
 8042cf0:	c10d      	stmia	r1!, {r0, r2, r3}

08042cf2 <select_next_task>:
 8042cf2:	b672      	cpsid	i
 8042cf4:	f000 ffdc 	bl	8043cb0 <vTaskSwitchContext>
 8042cf8:	b662      	cpsie	i
 8042cfa:	4a0d      	ldr	r2, [pc, #52]	; (8042d30 <pxCurrentTCBConst>)
 8042cfc:	6813      	ldr	r3, [r2, #0]
 8042cfe:	6819      	ldr	r1, [r3, #0]
 8042d00:	c90d      	ldmia	r1!, {r0, r2, r3}
 8042d02:	f382 880b 	msr	PSPLIM, r2
 8042d06:	469e      	mov	lr, r3
 8042d08:	4a0a      	ldr	r2, [pc, #40]	; (8042d34 <xSecureContextConst>)
 8042d0a:	6010      	str	r0, [r2, #0]
 8042d0c:	b148      	cbz	r0, 8042d22 <restore_ns_context>
 8042d0e:	b40a      	push	{r1, r3}
 8042d10:	f001 fe52 	bl	80449b8 <__SecureContext_LoadContext_veneer>
 8042d14:	bc0a      	pop	{r1, r3}
 8042d16:	469e      	mov	lr, r3
 8042d18:	065a      	lsls	r2, r3, #25
 8042d1a:	d502      	bpl.n	8042d22 <restore_ns_context>
 8042d1c:	f381 8809 	msr	PSP, r1
 8042d20:	4770      	bx	lr

08042d22 <restore_ns_context>:
 8042d22:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8042d26:	f381 8809 	msr	PSP, r1
 8042d2a:	4770      	bx	lr
 8042d2c:	f3af 8000 	nop.w

08042d30 <pxCurrentTCBConst>:
 8042d30:	2001b11c 	.word	0x2001b11c

08042d34 <xSecureContextConst>:
 8042d34:	2001b118 	.word	0x2001b118
	"xMAIR0Const: .word 0xe000edc0						\n"
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8042d38:	bf00      	nop
 8042d3a:	bf00      	nop
 8042d3c:	0000      	movs	r0, r0
	...

08042d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8042d40:	f01e 0f04 	tst.w	lr, #4
 8042d44:	bf0c      	ite	eq
 8042d46:	f3ef 8008 	mrseq	r0, MSP
 8042d4a:	f3ef 8009 	mrsne	r0, PSP
 8042d4e:	4904      	ldr	r1, [pc, #16]	; (8042d60 <svchandler_address_const>)
 8042d50:	4708      	bx	r1
 8042d52:	bf00      	nop
 8042d54:	f3af 8000 	nop.w
 8042d58:	f3af 8000 	nop.w
 8042d5c:	f3af 8000 	nop.w

08042d60 <svchandler_address_const>:
 8042d60:	08042a51 	.word	0x08042a51
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 8042d64:	bf00      	nop
 8042d66:	bf00      	nop

08042d68 <vPortAllocateSecureContext>:
/*-----------------------------------------------------------*/

void vPortAllocateSecureContext( uint32_t ulSecureStackSize ) /* __attribute__ (( naked )) */
{
	__asm volatile
 8042d68:	df00      	svc	0
 8042d6a:	4770      	bx	lr
	(
	"	svc %0											\n" /* Secure context is allocated in the supervisor call. */
	"	bx lr											\n" /* Return. */
	:: "i" ( portSVC_ALLOCATE_SECURE_CONTEXT ) : "memory"
	);
}
 8042d6c:	bf00      	nop

08042d6e <vPortFreeSecureContext>:
/*-----------------------------------------------------------*/

void vPortFreeSecureContext( uint32_t *pulTCB ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8042d6e:	6801      	ldr	r1, [r0, #0]
 8042d70:	6808      	ldr	r0, [r1, #0]
 8042d72:	2800      	cmp	r0, #0
 8042d74:	bf18      	it	ne
 8042d76:	df01      	svcne	1
 8042d78:	4770      	bx	lr
	"	it ne											\n"
	"	svcne %0										\n" /* Secure context is freed in the supervisor call. */
	"	bx lr											\n" /* Return. */
	:: "i" ( portSVC_FREE_SECURE_CONTEXT ) : "memory"
	);
}
 8042d7a:	bf00      	nop

08042d7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8042d7c:	b580      	push	{r7, lr}
 8042d7e:	b084      	sub	sp, #16
 8042d80:	af00      	add	r7, sp, #0
 8042d82:	6078      	str	r0, [r7, #4]
 8042d84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8042d86:	687b      	ldr	r3, [r7, #4]
 8042d88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8042d8a:	68fb      	ldr	r3, [r7, #12]
 8042d8c:	2b00      	cmp	r3, #0
 8042d8e:	d101      	bne.n	8042d94 <xQueueGenericReset+0x18>
 8042d90:	b672      	cpsid	i
 8042d92:	e7fe      	b.n	8042d92 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8042d94:	f7ff fe16 	bl	80429c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8042d98:	68fb      	ldr	r3, [r7, #12]
 8042d9a:	681a      	ldr	r2, [r3, #0]
 8042d9c:	68fb      	ldr	r3, [r7, #12]
 8042d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042da0:	68f9      	ldr	r1, [r7, #12]
 8042da2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8042da4:	fb01 f303 	mul.w	r3, r1, r3
 8042da8:	441a      	add	r2, r3
 8042daa:	68fb      	ldr	r3, [r7, #12]
 8042dac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8042dae:	68fb      	ldr	r3, [r7, #12]
 8042db0:	2200      	movs	r2, #0
 8042db2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8042db4:	68fb      	ldr	r3, [r7, #12]
 8042db6:	681a      	ldr	r2, [r3, #0]
 8042db8:	68fb      	ldr	r3, [r7, #12]
 8042dba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8042dbc:	68fb      	ldr	r3, [r7, #12]
 8042dbe:	681a      	ldr	r2, [r3, #0]
 8042dc0:	68fb      	ldr	r3, [r7, #12]
 8042dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042dc4:	3b01      	subs	r3, #1
 8042dc6:	68f9      	ldr	r1, [r7, #12]
 8042dc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8042dca:	fb01 f303 	mul.w	r3, r1, r3
 8042dce:	441a      	add	r2, r3
 8042dd0:	68fb      	ldr	r3, [r7, #12]
 8042dd2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8042dd4:	68fb      	ldr	r3, [r7, #12]
 8042dd6:	22ff      	movs	r2, #255	; 0xff
 8042dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8042ddc:	68fb      	ldr	r3, [r7, #12]
 8042dde:	22ff      	movs	r2, #255	; 0xff
 8042de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8042de4:	683b      	ldr	r3, [r7, #0]
 8042de6:	2b00      	cmp	r3, #0
 8042de8:	d10e      	bne.n	8042e08 <xQueueGenericReset+0x8c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8042dea:	68fb      	ldr	r3, [r7, #12]
 8042dec:	691b      	ldr	r3, [r3, #16]
 8042dee:	2b00      	cmp	r3, #0
 8042df0:	d014      	beq.n	8042e1c <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8042df2:	68fb      	ldr	r3, [r7, #12]
 8042df4:	3310      	adds	r3, #16
 8042df6:	4618      	mov	r0, r3
 8042df8:	f001 f812 	bl	8043e20 <xTaskRemoveFromEventList>
 8042dfc:	4603      	mov	r3, r0
 8042dfe:	2b00      	cmp	r3, #0
 8042e00:	d00c      	beq.n	8042e1c <xQueueGenericReset+0xa0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8042e02:	f7ff fdcd 	bl	80429a0 <vPortYield>
 8042e06:	e009      	b.n	8042e1c <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8042e08:	68fb      	ldr	r3, [r7, #12]
 8042e0a:	3310      	adds	r3, #16
 8042e0c:	4618      	mov	r0, r3
 8042e0e:	f7ff fcd5 	bl	80427bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8042e12:	68fb      	ldr	r3, [r7, #12]
 8042e14:	3324      	adds	r3, #36	; 0x24
 8042e16:	4618      	mov	r0, r3
 8042e18:	f7ff fcd0 	bl	80427bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8042e1c:	f7ff fde6 	bl	80429ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8042e20:	2301      	movs	r3, #1
}
 8042e22:	4618      	mov	r0, r3
 8042e24:	3710      	adds	r7, #16
 8042e26:	46bd      	mov	sp, r7
 8042e28:	bd80      	pop	{r7, pc}

08042e2a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8042e2a:	b580      	push	{r7, lr}
 8042e2c:	b088      	sub	sp, #32
 8042e2e:	af02      	add	r7, sp, #8
 8042e30:	60f8      	str	r0, [r7, #12]
 8042e32:	60b9      	str	r1, [r7, #8]
 8042e34:	607a      	str	r2, [r7, #4]
 8042e36:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8042e38:	68fb      	ldr	r3, [r7, #12]
 8042e3a:	2b00      	cmp	r3, #0
 8042e3c:	d101      	bne.n	8042e42 <xQueueGenericCreateStatic+0x18>
 8042e3e:	b672      	cpsid	i
 8042e40:	e7fe      	b.n	8042e40 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8042e42:	683b      	ldr	r3, [r7, #0]
 8042e44:	2b00      	cmp	r3, #0
 8042e46:	d101      	bne.n	8042e4c <xQueueGenericCreateStatic+0x22>
 8042e48:	b672      	cpsid	i
 8042e4a:	e7fe      	b.n	8042e4a <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8042e4c:	687b      	ldr	r3, [r7, #4]
 8042e4e:	2b00      	cmp	r3, #0
 8042e50:	d002      	beq.n	8042e58 <xQueueGenericCreateStatic+0x2e>
 8042e52:	68bb      	ldr	r3, [r7, #8]
 8042e54:	2b00      	cmp	r3, #0
 8042e56:	d001      	beq.n	8042e5c <xQueueGenericCreateStatic+0x32>
 8042e58:	2301      	movs	r3, #1
 8042e5a:	e000      	b.n	8042e5e <xQueueGenericCreateStatic+0x34>
 8042e5c:	2300      	movs	r3, #0
 8042e5e:	2b00      	cmp	r3, #0
 8042e60:	d101      	bne.n	8042e66 <xQueueGenericCreateStatic+0x3c>
 8042e62:	b672      	cpsid	i
 8042e64:	e7fe      	b.n	8042e64 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8042e66:	687b      	ldr	r3, [r7, #4]
 8042e68:	2b00      	cmp	r3, #0
 8042e6a:	d102      	bne.n	8042e72 <xQueueGenericCreateStatic+0x48>
 8042e6c:	68bb      	ldr	r3, [r7, #8]
 8042e6e:	2b00      	cmp	r3, #0
 8042e70:	d101      	bne.n	8042e76 <xQueueGenericCreateStatic+0x4c>
 8042e72:	2301      	movs	r3, #1
 8042e74:	e000      	b.n	8042e78 <xQueueGenericCreateStatic+0x4e>
 8042e76:	2300      	movs	r3, #0
 8042e78:	2b00      	cmp	r3, #0
 8042e7a:	d101      	bne.n	8042e80 <xQueueGenericCreateStatic+0x56>
 8042e7c:	b672      	cpsid	i
 8042e7e:	e7fe      	b.n	8042e7e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8042e80:	2350      	movs	r3, #80	; 0x50
 8042e82:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8042e84:	693b      	ldr	r3, [r7, #16]
 8042e86:	2b50      	cmp	r3, #80	; 0x50
 8042e88:	d001      	beq.n	8042e8e <xQueueGenericCreateStatic+0x64>
 8042e8a:	b672      	cpsid	i
 8042e8c:	e7fe      	b.n	8042e8c <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8042e8e:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8042e90:	683b      	ldr	r3, [r7, #0]
 8042e92:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8042e94:	697b      	ldr	r3, [r7, #20]
 8042e96:	2b00      	cmp	r3, #0
 8042e98:	d00d      	beq.n	8042eb6 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8042e9a:	697b      	ldr	r3, [r7, #20]
 8042e9c:	2201      	movs	r2, #1
 8042e9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8042ea2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8042ea6:	697b      	ldr	r3, [r7, #20]
 8042ea8:	9300      	str	r3, [sp, #0]
 8042eaa:	4613      	mov	r3, r2
 8042eac:	687a      	ldr	r2, [r7, #4]
 8042eae:	68b9      	ldr	r1, [r7, #8]
 8042eb0:	68f8      	ldr	r0, [r7, #12]
 8042eb2:	f000 f805 	bl	8042ec0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8042eb6:	697b      	ldr	r3, [r7, #20]
	}
 8042eb8:	4618      	mov	r0, r3
 8042eba:	3718      	adds	r7, #24
 8042ebc:	46bd      	mov	sp, r7
 8042ebe:	bd80      	pop	{r7, pc}

08042ec0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8042ec0:	b580      	push	{r7, lr}
 8042ec2:	b084      	sub	sp, #16
 8042ec4:	af00      	add	r7, sp, #0
 8042ec6:	60f8      	str	r0, [r7, #12]
 8042ec8:	60b9      	str	r1, [r7, #8]
 8042eca:	607a      	str	r2, [r7, #4]
 8042ecc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8042ece:	68bb      	ldr	r3, [r7, #8]
 8042ed0:	2b00      	cmp	r3, #0
 8042ed2:	d103      	bne.n	8042edc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8042ed4:	69bb      	ldr	r3, [r7, #24]
 8042ed6:	69ba      	ldr	r2, [r7, #24]
 8042ed8:	601a      	str	r2, [r3, #0]
 8042eda:	e002      	b.n	8042ee2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8042edc:	69bb      	ldr	r3, [r7, #24]
 8042ede:	687a      	ldr	r2, [r7, #4]
 8042ee0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8042ee2:	69bb      	ldr	r3, [r7, #24]
 8042ee4:	68fa      	ldr	r2, [r7, #12]
 8042ee6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8042ee8:	69bb      	ldr	r3, [r7, #24]
 8042eea:	68ba      	ldr	r2, [r7, #8]
 8042eec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8042eee:	2101      	movs	r1, #1
 8042ef0:	69b8      	ldr	r0, [r7, #24]
 8042ef2:	f7ff ff43 	bl	8042d7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8042ef6:	69bb      	ldr	r3, [r7, #24]
 8042ef8:	78fa      	ldrb	r2, [r7, #3]
 8042efa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8042efe:	bf00      	nop
 8042f00:	3710      	adds	r7, #16
 8042f02:	46bd      	mov	sp, r7
 8042f04:	bd80      	pop	{r7, pc}

08042f06 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8042f06:	b580      	push	{r7, lr}
 8042f08:	b08a      	sub	sp, #40	; 0x28
 8042f0a:	af00      	add	r7, sp, #0
 8042f0c:	60f8      	str	r0, [r7, #12]
 8042f0e:	60b9      	str	r1, [r7, #8]
 8042f10:	607a      	str	r2, [r7, #4]
 8042f12:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8042f14:	2300      	movs	r3, #0
 8042f16:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8042f18:	68fb      	ldr	r3, [r7, #12]
 8042f1a:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8042f1c:	6a3b      	ldr	r3, [r7, #32]
 8042f1e:	2b00      	cmp	r3, #0
 8042f20:	d101      	bne.n	8042f26 <xQueueGenericSend+0x20>
 8042f22:	b672      	cpsid	i
 8042f24:	e7fe      	b.n	8042f24 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8042f26:	68bb      	ldr	r3, [r7, #8]
 8042f28:	2b00      	cmp	r3, #0
 8042f2a:	d103      	bne.n	8042f34 <xQueueGenericSend+0x2e>
 8042f2c:	6a3b      	ldr	r3, [r7, #32]
 8042f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042f30:	2b00      	cmp	r3, #0
 8042f32:	d101      	bne.n	8042f38 <xQueueGenericSend+0x32>
 8042f34:	2301      	movs	r3, #1
 8042f36:	e000      	b.n	8042f3a <xQueueGenericSend+0x34>
 8042f38:	2300      	movs	r3, #0
 8042f3a:	2b00      	cmp	r3, #0
 8042f3c:	d101      	bne.n	8042f42 <xQueueGenericSend+0x3c>
 8042f3e:	b672      	cpsid	i
 8042f40:	e7fe      	b.n	8042f40 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8042f42:	683b      	ldr	r3, [r7, #0]
 8042f44:	2b02      	cmp	r3, #2
 8042f46:	d103      	bne.n	8042f50 <xQueueGenericSend+0x4a>
 8042f48:	6a3b      	ldr	r3, [r7, #32]
 8042f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042f4c:	2b01      	cmp	r3, #1
 8042f4e:	d101      	bne.n	8042f54 <xQueueGenericSend+0x4e>
 8042f50:	2301      	movs	r3, #1
 8042f52:	e000      	b.n	8042f56 <xQueueGenericSend+0x50>
 8042f54:	2300      	movs	r3, #0
 8042f56:	2b00      	cmp	r3, #0
 8042f58:	d101      	bne.n	8042f5e <xQueueGenericSend+0x58>
 8042f5a:	b672      	cpsid	i
 8042f5c:	e7fe      	b.n	8042f5c <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8042f5e:	f001 f90f 	bl	8044180 <xTaskGetSchedulerState>
 8042f62:	4603      	mov	r3, r0
 8042f64:	2b00      	cmp	r3, #0
 8042f66:	d102      	bne.n	8042f6e <xQueueGenericSend+0x68>
 8042f68:	687b      	ldr	r3, [r7, #4]
 8042f6a:	2b00      	cmp	r3, #0
 8042f6c:	d101      	bne.n	8042f72 <xQueueGenericSend+0x6c>
 8042f6e:	2301      	movs	r3, #1
 8042f70:	e000      	b.n	8042f74 <xQueueGenericSend+0x6e>
 8042f72:	2300      	movs	r3, #0
 8042f74:	2b00      	cmp	r3, #0
 8042f76:	d101      	bne.n	8042f7c <xQueueGenericSend+0x76>
 8042f78:	b672      	cpsid	i
 8042f7a:	e7fe      	b.n	8042f7a <xQueueGenericSend+0x74>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8042f7c:	f7ff fd22 	bl	80429c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8042f80:	6a3b      	ldr	r3, [r7, #32]
 8042f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8042f84:	6a3b      	ldr	r3, [r7, #32]
 8042f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042f88:	429a      	cmp	r2, r3
 8042f8a:	d302      	bcc.n	8042f92 <xQueueGenericSend+0x8c>
 8042f8c:	683b      	ldr	r3, [r7, #0]
 8042f8e:	2b02      	cmp	r3, #2
 8042f90:	d11d      	bne.n	8042fce <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8042f92:	683a      	ldr	r2, [r7, #0]
 8042f94:	68b9      	ldr	r1, [r7, #8]
 8042f96:	6a38      	ldr	r0, [r7, #32]
 8042f98:	f000 f99b 	bl	80432d2 <prvCopyDataToQueue>
 8042f9c:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8042f9e:	6a3b      	ldr	r3, [r7, #32]
 8042fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042fa2:	2b00      	cmp	r3, #0
 8042fa4:	d00a      	beq.n	8042fbc <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8042fa6:	6a3b      	ldr	r3, [r7, #32]
 8042fa8:	3324      	adds	r3, #36	; 0x24
 8042faa:	4618      	mov	r0, r3
 8042fac:	f000 ff38 	bl	8043e20 <xTaskRemoveFromEventList>
 8042fb0:	4603      	mov	r3, r0
 8042fb2:	2b00      	cmp	r3, #0
 8042fb4:	d007      	beq.n	8042fc6 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8042fb6:	f7ff fcf3 	bl	80429a0 <vPortYield>
 8042fba:	e004      	b.n	8042fc6 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8042fbc:	69fb      	ldr	r3, [r7, #28]
 8042fbe:	2b00      	cmp	r3, #0
 8042fc0:	d001      	beq.n	8042fc6 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8042fc2:	f7ff fced 	bl	80429a0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8042fc6:	f7ff fd11 	bl	80429ec <vPortExitCritical>
				return pdPASS;
 8042fca:	2301      	movs	r3, #1
 8042fcc:	e05c      	b.n	8043088 <xQueueGenericSend+0x182>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8042fce:	687b      	ldr	r3, [r7, #4]
 8042fd0:	2b00      	cmp	r3, #0
 8042fd2:	d103      	bne.n	8042fdc <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8042fd4:	f7ff fd0a 	bl	80429ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8042fd8:	2300      	movs	r3, #0
 8042fda:	e055      	b.n	8043088 <xQueueGenericSend+0x182>
				}
				else if( xEntryTimeSet == pdFALSE )
 8042fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042fde:	2b00      	cmp	r3, #0
 8042fe0:	d106      	bne.n	8042ff0 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8042fe2:	f107 0314 	add.w	r3, r7, #20
 8042fe6:	4618      	mov	r0, r3
 8042fe8:	f000 ff76 	bl	8043ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8042fec:	2301      	movs	r3, #1
 8042fee:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8042ff0:	f7ff fcfc 	bl	80429ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8042ff4:	f000 fcca 	bl	804398c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8042ff8:	f7ff fce4 	bl	80429c4 <vPortEnterCritical>
 8042ffc:	6a3b      	ldr	r3, [r7, #32]
 8042ffe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8043002:	b25b      	sxtb	r3, r3
 8043004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043008:	d103      	bne.n	8043012 <xQueueGenericSend+0x10c>
 804300a:	6a3b      	ldr	r3, [r7, #32]
 804300c:	2200      	movs	r2, #0
 804300e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8043012:	6a3b      	ldr	r3, [r7, #32]
 8043014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8043018:	b25b      	sxtb	r3, r3
 804301a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804301e:	d103      	bne.n	8043028 <xQueueGenericSend+0x122>
 8043020:	6a3b      	ldr	r3, [r7, #32]
 8043022:	2200      	movs	r2, #0
 8043024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8043028:	f7ff fce0 	bl	80429ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 804302c:	1d3a      	adds	r2, r7, #4
 804302e:	f107 0314 	add.w	r3, r7, #20
 8043032:	4611      	mov	r1, r2
 8043034:	4618      	mov	r0, r3
 8043036:	f000 ff65 	bl	8043f04 <xTaskCheckForTimeOut>
 804303a:	4603      	mov	r3, r0
 804303c:	2b00      	cmp	r3, #0
 804303e:	d11d      	bne.n	804307c <xQueueGenericSend+0x176>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8043040:	6a38      	ldr	r0, [r7, #32]
 8043042:	f000 fa3e 	bl	80434c2 <prvIsQueueFull>
 8043046:	4603      	mov	r3, r0
 8043048:	2b00      	cmp	r3, #0
 804304a:	d011      	beq.n	8043070 <xQueueGenericSend+0x16a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 804304c:	6a3b      	ldr	r3, [r7, #32]
 804304e:	3310      	adds	r3, #16
 8043050:	687a      	ldr	r2, [r7, #4]
 8043052:	4611      	mov	r1, r2
 8043054:	4618      	mov	r0, r3
 8043056:	f000 fea5 	bl	8043da4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 804305a:	6a38      	ldr	r0, [r7, #32]
 804305c:	f000 f9c9 	bl	80433f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8043060:	f000 fcda 	bl	8043a18 <xTaskResumeAll>
 8043064:	4603      	mov	r3, r0
 8043066:	2b00      	cmp	r3, #0
 8043068:	d188      	bne.n	8042f7c <xQueueGenericSend+0x76>
				{
					portYIELD_WITHIN_API();
 804306a:	f7ff fc99 	bl	80429a0 <vPortYield>
 804306e:	e785      	b.n	8042f7c <xQueueGenericSend+0x76>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8043070:	6a38      	ldr	r0, [r7, #32]
 8043072:	f000 f9be 	bl	80433f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8043076:	f000 fccf 	bl	8043a18 <xTaskResumeAll>
 804307a:	e77f      	b.n	8042f7c <xQueueGenericSend+0x76>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 804307c:	6a38      	ldr	r0, [r7, #32]
 804307e:	f000 f9b8 	bl	80433f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8043082:	f000 fcc9 	bl	8043a18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8043086:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8043088:	4618      	mov	r0, r3
 804308a:	3728      	adds	r7, #40	; 0x28
 804308c:	46bd      	mov	sp, r7
 804308e:	bd80      	pop	{r7, pc}

08043090 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8043090:	b580      	push	{r7, lr}
 8043092:	b088      	sub	sp, #32
 8043094:	af00      	add	r7, sp, #0
 8043096:	60f8      	str	r0, [r7, #12]
 8043098:	60b9      	str	r1, [r7, #8]
 804309a:	607a      	str	r2, [r7, #4]
 804309c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 804309e:	68fb      	ldr	r3, [r7, #12]
 80430a0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80430a2:	69bb      	ldr	r3, [r7, #24]
 80430a4:	2b00      	cmp	r3, #0
 80430a6:	d101      	bne.n	80430ac <xQueueGenericSendFromISR+0x1c>
 80430a8:	b672      	cpsid	i
 80430aa:	e7fe      	b.n	80430aa <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80430ac:	68bb      	ldr	r3, [r7, #8]
 80430ae:	2b00      	cmp	r3, #0
 80430b0:	d103      	bne.n	80430ba <xQueueGenericSendFromISR+0x2a>
 80430b2:	69bb      	ldr	r3, [r7, #24]
 80430b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80430b6:	2b00      	cmp	r3, #0
 80430b8:	d101      	bne.n	80430be <xQueueGenericSendFromISR+0x2e>
 80430ba:	2301      	movs	r3, #1
 80430bc:	e000      	b.n	80430c0 <xQueueGenericSendFromISR+0x30>
 80430be:	2300      	movs	r3, #0
 80430c0:	2b00      	cmp	r3, #0
 80430c2:	d101      	bne.n	80430c8 <xQueueGenericSendFromISR+0x38>
 80430c4:	b672      	cpsid	i
 80430c6:	e7fe      	b.n	80430c6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80430c8:	683b      	ldr	r3, [r7, #0]
 80430ca:	2b02      	cmp	r3, #2
 80430cc:	d103      	bne.n	80430d6 <xQueueGenericSendFromISR+0x46>
 80430ce:	69bb      	ldr	r3, [r7, #24]
 80430d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80430d2:	2b01      	cmp	r3, #1
 80430d4:	d101      	bne.n	80430da <xQueueGenericSendFromISR+0x4a>
 80430d6:	2301      	movs	r3, #1
 80430d8:	e000      	b.n	80430dc <xQueueGenericSendFromISR+0x4c>
 80430da:	2300      	movs	r3, #0
 80430dc:	2b00      	cmp	r3, #0
 80430de:	d101      	bne.n	80430e4 <xQueueGenericSendFromISR+0x54>
 80430e0:	b672      	cpsid	i
 80430e2:	e7fe      	b.n	80430e2 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80430e4:	f7ff fdd8 	bl	8042c98 <ulSetInterruptMaskFromISR>
 80430e8:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80430ea:	69bb      	ldr	r3, [r7, #24]
 80430ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80430ee:	69bb      	ldr	r3, [r7, #24]
 80430f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80430f2:	429a      	cmp	r2, r3
 80430f4:	d302      	bcc.n	80430fc <xQueueGenericSendFromISR+0x6c>
 80430f6:	683b      	ldr	r3, [r7, #0]
 80430f8:	2b02      	cmp	r3, #2
 80430fa:	d12a      	bne.n	8043152 <xQueueGenericSendFromISR+0xc2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80430fc:	69bb      	ldr	r3, [r7, #24]
 80430fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8043102:	74fb      	strb	r3, [r7, #19]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8043104:	683a      	ldr	r2, [r7, #0]
 8043106:	68b9      	ldr	r1, [r7, #8]
 8043108:	69b8      	ldr	r0, [r7, #24]
 804310a:	f000 f8e2 	bl	80432d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 804310e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8043112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043116:	d112      	bne.n	804313e <xQueueGenericSendFromISR+0xae>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8043118:	69bb      	ldr	r3, [r7, #24]
 804311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804311c:	2b00      	cmp	r3, #0
 804311e:	d015      	beq.n	804314c <xQueueGenericSendFromISR+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8043120:	69bb      	ldr	r3, [r7, #24]
 8043122:	3324      	adds	r3, #36	; 0x24
 8043124:	4618      	mov	r0, r3
 8043126:	f000 fe7b 	bl	8043e20 <xTaskRemoveFromEventList>
 804312a:	4603      	mov	r3, r0
 804312c:	2b00      	cmp	r3, #0
 804312e:	d00d      	beq.n	804314c <xQueueGenericSendFromISR+0xbc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8043130:	687b      	ldr	r3, [r7, #4]
 8043132:	2b00      	cmp	r3, #0
 8043134:	d00a      	beq.n	804314c <xQueueGenericSendFromISR+0xbc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8043136:	687b      	ldr	r3, [r7, #4]
 8043138:	2201      	movs	r2, #1
 804313a:	601a      	str	r2, [r3, #0]
 804313c:	e006      	b.n	804314c <xQueueGenericSendFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 804313e:	7cfb      	ldrb	r3, [r7, #19]
 8043140:	3301      	adds	r3, #1
 8043142:	b2db      	uxtb	r3, r3
 8043144:	b25a      	sxtb	r2, r3
 8043146:	69bb      	ldr	r3, [r7, #24]
 8043148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 804314c:	2301      	movs	r3, #1
 804314e:	61fb      	str	r3, [r7, #28]
		{
 8043150:	e001      	b.n	8043156 <xQueueGenericSendFromISR+0xc6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8043152:	2300      	movs	r3, #0
 8043154:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8043156:	6978      	ldr	r0, [r7, #20]
 8043158:	f7ff fda4 	bl	8042ca4 <vClearInterruptMaskFromISR>

	return xReturn;
 804315c:	69fb      	ldr	r3, [r7, #28]
}
 804315e:	4618      	mov	r0, r3
 8043160:	3720      	adds	r7, #32
 8043162:	46bd      	mov	sp, r7
 8043164:	bd80      	pop	{r7, pc}

08043166 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8043166:	b580      	push	{r7, lr}
 8043168:	b08a      	sub	sp, #40	; 0x28
 804316a:	af00      	add	r7, sp, #0
 804316c:	60f8      	str	r0, [r7, #12]
 804316e:	60b9      	str	r1, [r7, #8]
 8043170:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8043172:	2300      	movs	r3, #0
 8043174:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8043176:	68fb      	ldr	r3, [r7, #12]
 8043178:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 804317a:	6a3b      	ldr	r3, [r7, #32]
 804317c:	2b00      	cmp	r3, #0
 804317e:	d101      	bne.n	8043184 <xQueueReceive+0x1e>
 8043180:	b672      	cpsid	i
 8043182:	e7fe      	b.n	8043182 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8043184:	68bb      	ldr	r3, [r7, #8]
 8043186:	2b00      	cmp	r3, #0
 8043188:	d103      	bne.n	8043192 <xQueueReceive+0x2c>
 804318a:	6a3b      	ldr	r3, [r7, #32]
 804318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804318e:	2b00      	cmp	r3, #0
 8043190:	d101      	bne.n	8043196 <xQueueReceive+0x30>
 8043192:	2301      	movs	r3, #1
 8043194:	e000      	b.n	8043198 <xQueueReceive+0x32>
 8043196:	2300      	movs	r3, #0
 8043198:	2b00      	cmp	r3, #0
 804319a:	d101      	bne.n	80431a0 <xQueueReceive+0x3a>
 804319c:	b672      	cpsid	i
 804319e:	e7fe      	b.n	804319e <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80431a0:	f000 ffee 	bl	8044180 <xTaskGetSchedulerState>
 80431a4:	4603      	mov	r3, r0
 80431a6:	2b00      	cmp	r3, #0
 80431a8:	d102      	bne.n	80431b0 <xQueueReceive+0x4a>
 80431aa:	687b      	ldr	r3, [r7, #4]
 80431ac:	2b00      	cmp	r3, #0
 80431ae:	d101      	bne.n	80431b4 <xQueueReceive+0x4e>
 80431b0:	2301      	movs	r3, #1
 80431b2:	e000      	b.n	80431b6 <xQueueReceive+0x50>
 80431b4:	2300      	movs	r3, #0
 80431b6:	2b00      	cmp	r3, #0
 80431b8:	d101      	bne.n	80431be <xQueueReceive+0x58>
 80431ba:	b672      	cpsid	i
 80431bc:	e7fe      	b.n	80431bc <xQueueReceive+0x56>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80431be:	f7ff fc01 	bl	80429c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80431c2:	6a3b      	ldr	r3, [r7, #32]
 80431c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80431c6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80431c8:	69fb      	ldr	r3, [r7, #28]
 80431ca:	2b00      	cmp	r3, #0
 80431cc:	d019      	beq.n	8043202 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80431ce:	68b9      	ldr	r1, [r7, #8]
 80431d0:	6a38      	ldr	r0, [r7, #32]
 80431d2:	f000 f8e8 	bl	80433a6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80431d6:	69fb      	ldr	r3, [r7, #28]
 80431d8:	1e5a      	subs	r2, r3, #1
 80431da:	6a3b      	ldr	r3, [r7, #32]
 80431dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80431de:	6a3b      	ldr	r3, [r7, #32]
 80431e0:	691b      	ldr	r3, [r3, #16]
 80431e2:	2b00      	cmp	r3, #0
 80431e4:	d009      	beq.n	80431fa <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80431e6:	6a3b      	ldr	r3, [r7, #32]
 80431e8:	3310      	adds	r3, #16
 80431ea:	4618      	mov	r0, r3
 80431ec:	f000 fe18 	bl	8043e20 <xTaskRemoveFromEventList>
 80431f0:	4603      	mov	r3, r0
 80431f2:	2b00      	cmp	r3, #0
 80431f4:	d001      	beq.n	80431fa <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80431f6:	f7ff fbd3 	bl	80429a0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80431fa:	f7ff fbf7 	bl	80429ec <vPortExitCritical>
				return pdPASS;
 80431fe:	2301      	movs	r3, #1
 8043200:	e063      	b.n	80432ca <xQueueReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8043202:	687b      	ldr	r3, [r7, #4]
 8043204:	2b00      	cmp	r3, #0
 8043206:	d103      	bne.n	8043210 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8043208:	f7ff fbf0 	bl	80429ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 804320c:	2300      	movs	r3, #0
 804320e:	e05c      	b.n	80432ca <xQueueReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
 8043210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043212:	2b00      	cmp	r3, #0
 8043214:	d106      	bne.n	8043224 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8043216:	f107 0314 	add.w	r3, r7, #20
 804321a:	4618      	mov	r0, r3
 804321c:	f000 fe5c 	bl	8043ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8043220:	2301      	movs	r3, #1
 8043222:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8043224:	f7ff fbe2 	bl	80429ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8043228:	f000 fbb0 	bl	804398c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 804322c:	f7ff fbca 	bl	80429c4 <vPortEnterCritical>
 8043230:	6a3b      	ldr	r3, [r7, #32]
 8043232:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8043236:	b25b      	sxtb	r3, r3
 8043238:	f1b3 3fff 	cmp.w	r3, #4294967295
 804323c:	d103      	bne.n	8043246 <xQueueReceive+0xe0>
 804323e:	6a3b      	ldr	r3, [r7, #32]
 8043240:	2200      	movs	r2, #0
 8043242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8043246:	6a3b      	ldr	r3, [r7, #32]
 8043248:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 804324c:	b25b      	sxtb	r3, r3
 804324e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043252:	d103      	bne.n	804325c <xQueueReceive+0xf6>
 8043254:	6a3b      	ldr	r3, [r7, #32]
 8043256:	2200      	movs	r2, #0
 8043258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 804325c:	f7ff fbc6 	bl	80429ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8043260:	1d3a      	adds	r2, r7, #4
 8043262:	f107 0314 	add.w	r3, r7, #20
 8043266:	4611      	mov	r1, r2
 8043268:	4618      	mov	r0, r3
 804326a:	f000 fe4b 	bl	8043f04 <xTaskCheckForTimeOut>
 804326e:	4603      	mov	r3, r0
 8043270:	2b00      	cmp	r3, #0
 8043272:	d11d      	bne.n	80432b0 <xQueueReceive+0x14a>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8043274:	6a38      	ldr	r0, [r7, #32]
 8043276:	f000 f90e 	bl	8043496 <prvIsQueueEmpty>
 804327a:	4603      	mov	r3, r0
 804327c:	2b00      	cmp	r3, #0
 804327e:	d011      	beq.n	80432a4 <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8043280:	6a3b      	ldr	r3, [r7, #32]
 8043282:	3324      	adds	r3, #36	; 0x24
 8043284:	687a      	ldr	r2, [r7, #4]
 8043286:	4611      	mov	r1, r2
 8043288:	4618      	mov	r0, r3
 804328a:	f000 fd8b 	bl	8043da4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 804328e:	6a38      	ldr	r0, [r7, #32]
 8043290:	f000 f8af 	bl	80433f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8043294:	f000 fbc0 	bl	8043a18 <xTaskResumeAll>
 8043298:	4603      	mov	r3, r0
 804329a:	2b00      	cmp	r3, #0
 804329c:	d18f      	bne.n	80431be <xQueueReceive+0x58>
				{
					portYIELD_WITHIN_API();
 804329e:	f7ff fb7f 	bl	80429a0 <vPortYield>
 80432a2:	e78c      	b.n	80431be <xQueueReceive+0x58>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80432a4:	6a38      	ldr	r0, [r7, #32]
 80432a6:	f000 f8a4 	bl	80433f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80432aa:	f000 fbb5 	bl	8043a18 <xTaskResumeAll>
 80432ae:	e786      	b.n	80431be <xQueueReceive+0x58>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80432b0:	6a38      	ldr	r0, [r7, #32]
 80432b2:	f000 f89e 	bl	80433f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80432b6:	f000 fbaf 	bl	8043a18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80432ba:	6a38      	ldr	r0, [r7, #32]
 80432bc:	f000 f8eb 	bl	8043496 <prvIsQueueEmpty>
 80432c0:	4603      	mov	r3, r0
 80432c2:	2b00      	cmp	r3, #0
 80432c4:	f43f af7b 	beq.w	80431be <xQueueReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80432c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80432ca:	4618      	mov	r0, r3
 80432cc:	3728      	adds	r7, #40	; 0x28
 80432ce:	46bd      	mov	sp, r7
 80432d0:	bd80      	pop	{r7, pc}

080432d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80432d2:	b580      	push	{r7, lr}
 80432d4:	b086      	sub	sp, #24
 80432d6:	af00      	add	r7, sp, #0
 80432d8:	60f8      	str	r0, [r7, #12]
 80432da:	60b9      	str	r1, [r7, #8]
 80432dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80432de:	2300      	movs	r3, #0
 80432e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80432e2:	68fb      	ldr	r3, [r7, #12]
 80432e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80432e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80432e8:	68fb      	ldr	r3, [r7, #12]
 80432ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80432ec:	2b00      	cmp	r3, #0
 80432ee:	d10d      	bne.n	804330c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80432f0:	68fb      	ldr	r3, [r7, #12]
 80432f2:	681b      	ldr	r3, [r3, #0]
 80432f4:	2b00      	cmp	r3, #0
 80432f6:	d14d      	bne.n	8043394 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80432f8:	68fb      	ldr	r3, [r7, #12]
 80432fa:	689b      	ldr	r3, [r3, #8]
 80432fc:	4618      	mov	r0, r3
 80432fe:	f000 ff5d 	bl	80441bc <xTaskPriorityDisinherit>
 8043302:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8043304:	68fb      	ldr	r3, [r7, #12]
 8043306:	2200      	movs	r2, #0
 8043308:	609a      	str	r2, [r3, #8]
 804330a:	e043      	b.n	8043394 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 804330c:	687b      	ldr	r3, [r7, #4]
 804330e:	2b00      	cmp	r3, #0
 8043310:	d119      	bne.n	8043346 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8043312:	68fb      	ldr	r3, [r7, #12]
 8043314:	6858      	ldr	r0, [r3, #4]
 8043316:	68fb      	ldr	r3, [r7, #12]
 8043318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804331a:	461a      	mov	r2, r3
 804331c:	68b9      	ldr	r1, [r7, #8]
 804331e:	f001 fb29 	bl	8044974 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8043322:	68fb      	ldr	r3, [r7, #12]
 8043324:	685a      	ldr	r2, [r3, #4]
 8043326:	68fb      	ldr	r3, [r7, #12]
 8043328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804332a:	441a      	add	r2, r3
 804332c:	68fb      	ldr	r3, [r7, #12]
 804332e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8043330:	68fb      	ldr	r3, [r7, #12]
 8043332:	685a      	ldr	r2, [r3, #4]
 8043334:	68fb      	ldr	r3, [r7, #12]
 8043336:	689b      	ldr	r3, [r3, #8]
 8043338:	429a      	cmp	r2, r3
 804333a:	d32b      	bcc.n	8043394 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 804333c:	68fb      	ldr	r3, [r7, #12]
 804333e:	681a      	ldr	r2, [r3, #0]
 8043340:	68fb      	ldr	r3, [r7, #12]
 8043342:	605a      	str	r2, [r3, #4]
 8043344:	e026      	b.n	8043394 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8043346:	68fb      	ldr	r3, [r7, #12]
 8043348:	68d8      	ldr	r0, [r3, #12]
 804334a:	68fb      	ldr	r3, [r7, #12]
 804334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804334e:	461a      	mov	r2, r3
 8043350:	68b9      	ldr	r1, [r7, #8]
 8043352:	f001 fb0f 	bl	8044974 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8043356:	68fb      	ldr	r3, [r7, #12]
 8043358:	68da      	ldr	r2, [r3, #12]
 804335a:	68fb      	ldr	r3, [r7, #12]
 804335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804335e:	425b      	negs	r3, r3
 8043360:	441a      	add	r2, r3
 8043362:	68fb      	ldr	r3, [r7, #12]
 8043364:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8043366:	68fb      	ldr	r3, [r7, #12]
 8043368:	68da      	ldr	r2, [r3, #12]
 804336a:	68fb      	ldr	r3, [r7, #12]
 804336c:	681b      	ldr	r3, [r3, #0]
 804336e:	429a      	cmp	r2, r3
 8043370:	d207      	bcs.n	8043382 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8043372:	68fb      	ldr	r3, [r7, #12]
 8043374:	689a      	ldr	r2, [r3, #8]
 8043376:	68fb      	ldr	r3, [r7, #12]
 8043378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804337a:	425b      	negs	r3, r3
 804337c:	441a      	add	r2, r3
 804337e:	68fb      	ldr	r3, [r7, #12]
 8043380:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8043382:	687b      	ldr	r3, [r7, #4]
 8043384:	2b02      	cmp	r3, #2
 8043386:	d105      	bne.n	8043394 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8043388:	693b      	ldr	r3, [r7, #16]
 804338a:	2b00      	cmp	r3, #0
 804338c:	d002      	beq.n	8043394 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 804338e:	693b      	ldr	r3, [r7, #16]
 8043390:	3b01      	subs	r3, #1
 8043392:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8043394:	693b      	ldr	r3, [r7, #16]
 8043396:	1c5a      	adds	r2, r3, #1
 8043398:	68fb      	ldr	r3, [r7, #12]
 804339a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 804339c:	697b      	ldr	r3, [r7, #20]
}
 804339e:	4618      	mov	r0, r3
 80433a0:	3718      	adds	r7, #24
 80433a2:	46bd      	mov	sp, r7
 80433a4:	bd80      	pop	{r7, pc}

080433a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80433a6:	b580      	push	{r7, lr}
 80433a8:	b082      	sub	sp, #8
 80433aa:	af00      	add	r7, sp, #0
 80433ac:	6078      	str	r0, [r7, #4]
 80433ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80433b0:	687b      	ldr	r3, [r7, #4]
 80433b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80433b4:	2b00      	cmp	r3, #0
 80433b6:	d018      	beq.n	80433ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80433b8:	687b      	ldr	r3, [r7, #4]
 80433ba:	68da      	ldr	r2, [r3, #12]
 80433bc:	687b      	ldr	r3, [r7, #4]
 80433be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80433c0:	441a      	add	r2, r3
 80433c2:	687b      	ldr	r3, [r7, #4]
 80433c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80433c6:	687b      	ldr	r3, [r7, #4]
 80433c8:	68da      	ldr	r2, [r3, #12]
 80433ca:	687b      	ldr	r3, [r7, #4]
 80433cc:	689b      	ldr	r3, [r3, #8]
 80433ce:	429a      	cmp	r2, r3
 80433d0:	d303      	bcc.n	80433da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80433d2:	687b      	ldr	r3, [r7, #4]
 80433d4:	681a      	ldr	r2, [r3, #0]
 80433d6:	687b      	ldr	r3, [r7, #4]
 80433d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80433da:	687b      	ldr	r3, [r7, #4]
 80433dc:	68d9      	ldr	r1, [r3, #12]
 80433de:	687b      	ldr	r3, [r7, #4]
 80433e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80433e2:	461a      	mov	r2, r3
 80433e4:	6838      	ldr	r0, [r7, #0]
 80433e6:	f001 fac5 	bl	8044974 <memcpy>
	}
}
 80433ea:	bf00      	nop
 80433ec:	3708      	adds	r7, #8
 80433ee:	46bd      	mov	sp, r7
 80433f0:	bd80      	pop	{r7, pc}

080433f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80433f2:	b580      	push	{r7, lr}
 80433f4:	b084      	sub	sp, #16
 80433f6:	af00      	add	r7, sp, #0
 80433f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80433fa:	f7ff fae3 	bl	80429c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80433fe:	687b      	ldr	r3, [r7, #4]
 8043400:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8043404:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8043406:	e011      	b.n	804342c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8043408:	687b      	ldr	r3, [r7, #4]
 804340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804340c:	2b00      	cmp	r3, #0
 804340e:	d012      	beq.n	8043436 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8043410:	687b      	ldr	r3, [r7, #4]
 8043412:	3324      	adds	r3, #36	; 0x24
 8043414:	4618      	mov	r0, r3
 8043416:	f000 fd03 	bl	8043e20 <xTaskRemoveFromEventList>
 804341a:	4603      	mov	r3, r0
 804341c:	2b00      	cmp	r3, #0
 804341e:	d001      	beq.n	8043424 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8043420:	f000 fdc0 	bl	8043fa4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8043424:	7bfb      	ldrb	r3, [r7, #15]
 8043426:	3b01      	subs	r3, #1
 8043428:	b2db      	uxtb	r3, r3
 804342a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 804342c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8043430:	2b00      	cmp	r3, #0
 8043432:	dce9      	bgt.n	8043408 <prvUnlockQueue+0x16>
 8043434:	e000      	b.n	8043438 <prvUnlockQueue+0x46>
					break;
 8043436:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8043438:	687b      	ldr	r3, [r7, #4]
 804343a:	22ff      	movs	r2, #255	; 0xff
 804343c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8043440:	f7ff fad4 	bl	80429ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8043444:	f7ff fabe 	bl	80429c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8043448:	687b      	ldr	r3, [r7, #4]
 804344a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 804344e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8043450:	e011      	b.n	8043476 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8043452:	687b      	ldr	r3, [r7, #4]
 8043454:	691b      	ldr	r3, [r3, #16]
 8043456:	2b00      	cmp	r3, #0
 8043458:	d012      	beq.n	8043480 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 804345a:	687b      	ldr	r3, [r7, #4]
 804345c:	3310      	adds	r3, #16
 804345e:	4618      	mov	r0, r3
 8043460:	f000 fcde 	bl	8043e20 <xTaskRemoveFromEventList>
 8043464:	4603      	mov	r3, r0
 8043466:	2b00      	cmp	r3, #0
 8043468:	d001      	beq.n	804346e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 804346a:	f000 fd9b 	bl	8043fa4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 804346e:	7bbb      	ldrb	r3, [r7, #14]
 8043470:	3b01      	subs	r3, #1
 8043472:	b2db      	uxtb	r3, r3
 8043474:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8043476:	f997 300e 	ldrsb.w	r3, [r7, #14]
 804347a:	2b00      	cmp	r3, #0
 804347c:	dce9      	bgt.n	8043452 <prvUnlockQueue+0x60>
 804347e:	e000      	b.n	8043482 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8043480:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8043482:	687b      	ldr	r3, [r7, #4]
 8043484:	22ff      	movs	r2, #255	; 0xff
 8043486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 804348a:	f7ff faaf 	bl	80429ec <vPortExitCritical>
}
 804348e:	bf00      	nop
 8043490:	3710      	adds	r7, #16
 8043492:	46bd      	mov	sp, r7
 8043494:	bd80      	pop	{r7, pc}

08043496 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8043496:	b580      	push	{r7, lr}
 8043498:	b084      	sub	sp, #16
 804349a:	af00      	add	r7, sp, #0
 804349c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 804349e:	f7ff fa91 	bl	80429c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80434a2:	687b      	ldr	r3, [r7, #4]
 80434a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80434a6:	2b00      	cmp	r3, #0
 80434a8:	d102      	bne.n	80434b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80434aa:	2301      	movs	r3, #1
 80434ac:	60fb      	str	r3, [r7, #12]
 80434ae:	e001      	b.n	80434b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80434b0:	2300      	movs	r3, #0
 80434b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80434b4:	f7ff fa9a 	bl	80429ec <vPortExitCritical>

	return xReturn;
 80434b8:	68fb      	ldr	r3, [r7, #12]
}
 80434ba:	4618      	mov	r0, r3
 80434bc:	3710      	adds	r7, #16
 80434be:	46bd      	mov	sp, r7
 80434c0:	bd80      	pop	{r7, pc}

080434c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80434c2:	b580      	push	{r7, lr}
 80434c4:	b084      	sub	sp, #16
 80434c6:	af00      	add	r7, sp, #0
 80434c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80434ca:	f7ff fa7b 	bl	80429c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80434ce:	687b      	ldr	r3, [r7, #4]
 80434d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80434d2:	687b      	ldr	r3, [r7, #4]
 80434d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80434d6:	429a      	cmp	r2, r3
 80434d8:	d102      	bne.n	80434e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80434da:	2301      	movs	r3, #1
 80434dc:	60fb      	str	r3, [r7, #12]
 80434de:	e001      	b.n	80434e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80434e0:	2300      	movs	r3, #0
 80434e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80434e4:	f7ff fa82 	bl	80429ec <vPortExitCritical>

	return xReturn;
 80434e8:	68fb      	ldr	r3, [r7, #12]
}
 80434ea:	4618      	mov	r0, r3
 80434ec:	3710      	adds	r7, #16
 80434ee:	46bd      	mov	sp, r7
 80434f0:	bd80      	pop	{r7, pc}
	...

080434f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80434f4:	b480      	push	{r7}
 80434f6:	b085      	sub	sp, #20
 80434f8:	af00      	add	r7, sp, #0
 80434fa:	6078      	str	r0, [r7, #4]
 80434fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80434fe:	2300      	movs	r3, #0
 8043500:	60fb      	str	r3, [r7, #12]
 8043502:	e014      	b.n	804352e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8043504:	4a0e      	ldr	r2, [pc, #56]	; (8043540 <vQueueAddToRegistry+0x4c>)
 8043506:	68fb      	ldr	r3, [r7, #12]
 8043508:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 804350c:	2b00      	cmp	r3, #0
 804350e:	d10b      	bne.n	8043528 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8043510:	490b      	ldr	r1, [pc, #44]	; (8043540 <vQueueAddToRegistry+0x4c>)
 8043512:	68fb      	ldr	r3, [r7, #12]
 8043514:	683a      	ldr	r2, [r7, #0]
 8043516:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 804351a:	4a09      	ldr	r2, [pc, #36]	; (8043540 <vQueueAddToRegistry+0x4c>)
 804351c:	68fb      	ldr	r3, [r7, #12]
 804351e:	00db      	lsls	r3, r3, #3
 8043520:	4413      	add	r3, r2
 8043522:	687a      	ldr	r2, [r7, #4]
 8043524:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8043526:	e005      	b.n	8043534 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8043528:	68fb      	ldr	r3, [r7, #12]
 804352a:	3301      	adds	r3, #1
 804352c:	60fb      	str	r3, [r7, #12]
 804352e:	68fb      	ldr	r3, [r7, #12]
 8043530:	2b07      	cmp	r3, #7
 8043532:	d9e7      	bls.n	8043504 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8043534:	bf00      	nop
 8043536:	3714      	adds	r7, #20
 8043538:	46bd      	mov	sp, r7
 804353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804353e:	4770      	bx	lr
 8043540:	2001b750 	.word	0x2001b750

08043544 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8043544:	b580      	push	{r7, lr}
 8043546:	b086      	sub	sp, #24
 8043548:	af00      	add	r7, sp, #0
 804354a:	60f8      	str	r0, [r7, #12]
 804354c:	60b9      	str	r1, [r7, #8]
 804354e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8043550:	68fb      	ldr	r3, [r7, #12]
 8043552:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8043554:	f7ff fa36 	bl	80429c4 <vPortEnterCritical>
 8043558:	697b      	ldr	r3, [r7, #20]
 804355a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 804355e:	b25b      	sxtb	r3, r3
 8043560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043564:	d103      	bne.n	804356e <vQueueWaitForMessageRestricted+0x2a>
 8043566:	697b      	ldr	r3, [r7, #20]
 8043568:	2200      	movs	r2, #0
 804356a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 804356e:	697b      	ldr	r3, [r7, #20]
 8043570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8043574:	b25b      	sxtb	r3, r3
 8043576:	f1b3 3fff 	cmp.w	r3, #4294967295
 804357a:	d103      	bne.n	8043584 <vQueueWaitForMessageRestricted+0x40>
 804357c:	697b      	ldr	r3, [r7, #20]
 804357e:	2200      	movs	r2, #0
 8043580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8043584:	f7ff fa32 	bl	80429ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8043588:	697b      	ldr	r3, [r7, #20]
 804358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804358c:	2b00      	cmp	r3, #0
 804358e:	d106      	bne.n	804359e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8043590:	697b      	ldr	r3, [r7, #20]
 8043592:	3324      	adds	r3, #36	; 0x24
 8043594:	687a      	ldr	r2, [r7, #4]
 8043596:	68b9      	ldr	r1, [r7, #8]
 8043598:	4618      	mov	r0, r3
 804359a:	f000 fc1f 	bl	8043ddc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 804359e:	6978      	ldr	r0, [r7, #20]
 80435a0:	f7ff ff27 	bl	80433f2 <prvUnlockQueue>
	}
 80435a4:	bf00      	nop
 80435a6:	3718      	adds	r7, #24
 80435a8:	46bd      	mov	sp, r7
 80435aa:	bd80      	pop	{r7, pc}

080435ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80435ac:	b580      	push	{r7, lr}
 80435ae:	b08c      	sub	sp, #48	; 0x30
 80435b0:	af04      	add	r7, sp, #16
 80435b2:	60f8      	str	r0, [r7, #12]
 80435b4:	60b9      	str	r1, [r7, #8]
 80435b6:	607a      	str	r2, [r7, #4]
 80435b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80435ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80435bc:	2b00      	cmp	r3, #0
 80435be:	d101      	bne.n	80435c4 <xTaskCreateStatic+0x18>
 80435c0:	b672      	cpsid	i
 80435c2:	e7fe      	b.n	80435c2 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80435c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80435c6:	2b00      	cmp	r3, #0
 80435c8:	d101      	bne.n	80435ce <xTaskCreateStatic+0x22>
 80435ca:	b672      	cpsid	i
 80435cc:	e7fe      	b.n	80435cc <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80435ce:	235c      	movs	r3, #92	; 0x5c
 80435d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80435d2:	697b      	ldr	r3, [r7, #20]
 80435d4:	2b5c      	cmp	r3, #92	; 0x5c
 80435d6:	d001      	beq.n	80435dc <xTaskCreateStatic+0x30>
 80435d8:	b672      	cpsid	i
 80435da:	e7fe      	b.n	80435da <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80435dc:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80435de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80435e0:	2b00      	cmp	r3, #0
 80435e2:	d01e      	beq.n	8043622 <xTaskCreateStatic+0x76>
 80435e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80435e6:	2b00      	cmp	r3, #0
 80435e8:	d01b      	beq.n	8043622 <xTaskCreateStatic+0x76>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80435ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80435ec:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80435ee:	69fb      	ldr	r3, [r7, #28]
 80435f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80435f2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80435f4:	69fb      	ldr	r3, [r7, #28]
 80435f6:	2202      	movs	r2, #2
 80435f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80435fc:	2300      	movs	r3, #0
 80435fe:	9303      	str	r3, [sp, #12]
 8043600:	69fb      	ldr	r3, [r7, #28]
 8043602:	9302      	str	r3, [sp, #8]
 8043604:	f107 0318 	add.w	r3, r7, #24
 8043608:	9301      	str	r3, [sp, #4]
 804360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804360c:	9300      	str	r3, [sp, #0]
 804360e:	683b      	ldr	r3, [r7, #0]
 8043610:	687a      	ldr	r2, [r7, #4]
 8043612:	68b9      	ldr	r1, [r7, #8]
 8043614:	68f8      	ldr	r0, [r7, #12]
 8043616:	f000 f850 	bl	80436ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 804361a:	69f8      	ldr	r0, [r7, #28]
 804361c:	f000 f8d6 	bl	80437cc <prvAddNewTaskToReadyList>
 8043620:	e001      	b.n	8043626 <xTaskCreateStatic+0x7a>
		}
		else
		{
			xReturn = NULL;
 8043622:	2300      	movs	r3, #0
 8043624:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8043626:	69bb      	ldr	r3, [r7, #24]
	}
 8043628:	4618      	mov	r0, r3
 804362a:	3720      	adds	r7, #32
 804362c:	46bd      	mov	sp, r7
 804362e:	bd80      	pop	{r7, pc}

08043630 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8043630:	b580      	push	{r7, lr}
 8043632:	b08c      	sub	sp, #48	; 0x30
 8043634:	af04      	add	r7, sp, #16
 8043636:	60f8      	str	r0, [r7, #12]
 8043638:	60b9      	str	r1, [r7, #8]
 804363a:	603b      	str	r3, [r7, #0]
 804363c:	4613      	mov	r3, r2
 804363e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8043640:	88fb      	ldrh	r3, [r7, #6]
 8043642:	009b      	lsls	r3, r3, #2
 8043644:	4618      	mov	r0, r3
 8043646:	f7fe ff0d 	bl	8042464 <pvPortMalloc>
 804364a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 804364c:	697b      	ldr	r3, [r7, #20]
 804364e:	2b00      	cmp	r3, #0
 8043650:	d00e      	beq.n	8043670 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8043652:	205c      	movs	r0, #92	; 0x5c
 8043654:	f7fe ff06 	bl	8042464 <pvPortMalloc>
 8043658:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 804365a:	69fb      	ldr	r3, [r7, #28]
 804365c:	2b00      	cmp	r3, #0
 804365e:	d003      	beq.n	8043668 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8043660:	69fb      	ldr	r3, [r7, #28]
 8043662:	697a      	ldr	r2, [r7, #20]
 8043664:	631a      	str	r2, [r3, #48]	; 0x30
 8043666:	e005      	b.n	8043674 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8043668:	6978      	ldr	r0, [r7, #20]
 804366a:	f7fe ffa3 	bl	80425b4 <vPortFree>
 804366e:	e001      	b.n	8043674 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8043670:	2300      	movs	r3, #0
 8043672:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8043674:	69fb      	ldr	r3, [r7, #28]
 8043676:	2b00      	cmp	r3, #0
 8043678:	d017      	beq.n	80436aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 804367a:	69fb      	ldr	r3, [r7, #28]
 804367c:	2200      	movs	r2, #0
 804367e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8043682:	88fa      	ldrh	r2, [r7, #6]
 8043684:	2300      	movs	r3, #0
 8043686:	9303      	str	r3, [sp, #12]
 8043688:	69fb      	ldr	r3, [r7, #28]
 804368a:	9302      	str	r3, [sp, #8]
 804368c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804368e:	9301      	str	r3, [sp, #4]
 8043690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043692:	9300      	str	r3, [sp, #0]
 8043694:	683b      	ldr	r3, [r7, #0]
 8043696:	68b9      	ldr	r1, [r7, #8]
 8043698:	68f8      	ldr	r0, [r7, #12]
 804369a:	f000 f80e 	bl	80436ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 804369e:	69f8      	ldr	r0, [r7, #28]
 80436a0:	f000 f894 	bl	80437cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80436a4:	2301      	movs	r3, #1
 80436a6:	61bb      	str	r3, [r7, #24]
 80436a8:	e002      	b.n	80436b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80436aa:	f04f 33ff 	mov.w	r3, #4294967295
 80436ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80436b0:	69bb      	ldr	r3, [r7, #24]
	}
 80436b2:	4618      	mov	r0, r3
 80436b4:	3720      	adds	r7, #32
 80436b6:	46bd      	mov	sp, r7
 80436b8:	bd80      	pop	{r7, pc}

080436ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80436ba:	b580      	push	{r7, lr}
 80436bc:	b086      	sub	sp, #24
 80436be:	af00      	add	r7, sp, #0
 80436c0:	60f8      	str	r0, [r7, #12]
 80436c2:	60b9      	str	r1, [r7, #8]
 80436c4:	607a      	str	r2, [r7, #4]
 80436c6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80436c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80436ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80436cc:	687b      	ldr	r3, [r7, #4]
 80436ce:	009b      	lsls	r3, r3, #2
 80436d0:	461a      	mov	r2, r3
 80436d2:	21a5      	movs	r1, #165	; 0xa5
 80436d4:	f001 f959 	bl	804498a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80436d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80436da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80436dc:	687b      	ldr	r3, [r7, #4]
 80436de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80436e2:	3b01      	subs	r3, #1
 80436e4:	009b      	lsls	r3, r3, #2
 80436e6:	4413      	add	r3, r2
 80436e8:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80436ea:	693b      	ldr	r3, [r7, #16]
 80436ec:	f023 0307 	bic.w	r3, r3, #7
 80436f0:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80436f2:	693b      	ldr	r3, [r7, #16]
 80436f4:	f003 0307 	and.w	r3, r3, #7
 80436f8:	2b00      	cmp	r3, #0
 80436fa:	d001      	beq.n	8043700 <prvInitialiseNewTask+0x46>
 80436fc:	b672      	cpsid	i
 80436fe:	e7fe      	b.n	80436fe <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8043700:	68bb      	ldr	r3, [r7, #8]
 8043702:	2b00      	cmp	r3, #0
 8043704:	d01f      	beq.n	8043746 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8043706:	2300      	movs	r3, #0
 8043708:	617b      	str	r3, [r7, #20]
 804370a:	e012      	b.n	8043732 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 804370c:	68ba      	ldr	r2, [r7, #8]
 804370e:	697b      	ldr	r3, [r7, #20]
 8043710:	4413      	add	r3, r2
 8043712:	7819      	ldrb	r1, [r3, #0]
 8043714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8043716:	697b      	ldr	r3, [r7, #20]
 8043718:	4413      	add	r3, r2
 804371a:	3334      	adds	r3, #52	; 0x34
 804371c:	460a      	mov	r2, r1
 804371e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8043720:	68ba      	ldr	r2, [r7, #8]
 8043722:	697b      	ldr	r3, [r7, #20]
 8043724:	4413      	add	r3, r2
 8043726:	781b      	ldrb	r3, [r3, #0]
 8043728:	2b00      	cmp	r3, #0
 804372a:	d006      	beq.n	804373a <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 804372c:	697b      	ldr	r3, [r7, #20]
 804372e:	3301      	adds	r3, #1
 8043730:	617b      	str	r3, [r7, #20]
 8043732:	697b      	ldr	r3, [r7, #20]
 8043734:	2b0f      	cmp	r3, #15
 8043736:	d9e9      	bls.n	804370c <prvInitialiseNewTask+0x52>
 8043738:	e000      	b.n	804373c <prvInitialiseNewTask+0x82>
			{
				break;
 804373a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 804373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804373e:	2200      	movs	r2, #0
 8043740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8043744:	e003      	b.n	804374e <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8043746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043748:	2200      	movs	r2, #0
 804374a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 804374e:	6a3b      	ldr	r3, [r7, #32]
 8043750:	2b37      	cmp	r3, #55	; 0x37
 8043752:	d901      	bls.n	8043758 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8043754:	2337      	movs	r3, #55	; 0x37
 8043756:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8043758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804375a:	6a3a      	ldr	r2, [r7, #32]
 804375c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 804375e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043760:	6a3a      	ldr	r2, [r7, #32]
 8043762:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8043764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043766:	2200      	movs	r2, #0
 8043768:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 804376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804376c:	3304      	adds	r3, #4
 804376e:	4618      	mov	r0, r3
 8043770:	f7ff f844 	bl	80427fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8043774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043776:	3318      	adds	r3, #24
 8043778:	4618      	mov	r0, r3
 804377a:	f7ff f83f 	bl	80427fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 804377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8043782:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8043784:	6a3b      	ldr	r3, [r7, #32]
 8043786:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 804378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804378c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 804378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8043792:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8043794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043796:	2200      	movs	r2, #0
 8043798:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 804379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804379c:	2200      	movs	r2, #0
 804379e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 80437a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80437a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80437a6:	683b      	ldr	r3, [r7, #0]
 80437a8:	68fa      	ldr	r2, [r7, #12]
 80437aa:	6938      	ldr	r0, [r7, #16]
 80437ac:	f7ff f98e 	bl	8042acc <pxPortInitialiseStack>
 80437b0:	4602      	mov	r2, r0
 80437b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80437b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80437b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80437b8:	2b00      	cmp	r3, #0
 80437ba:	d002      	beq.n	80437c2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80437bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80437be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80437c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80437c2:	bf00      	nop
 80437c4:	3718      	adds	r7, #24
 80437c6:	46bd      	mov	sp, r7
 80437c8:	bd80      	pop	{r7, pc}
	...

080437cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80437cc:	b580      	push	{r7, lr}
 80437ce:	b082      	sub	sp, #8
 80437d0:	af00      	add	r7, sp, #0
 80437d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80437d4:	f7ff f8f6 	bl	80429c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80437d8:	4b2a      	ldr	r3, [pc, #168]	; (8043884 <prvAddNewTaskToReadyList+0xb8>)
 80437da:	681b      	ldr	r3, [r3, #0]
 80437dc:	3301      	adds	r3, #1
 80437de:	4a29      	ldr	r2, [pc, #164]	; (8043884 <prvAddNewTaskToReadyList+0xb8>)
 80437e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80437e2:	4b29      	ldr	r3, [pc, #164]	; (8043888 <prvAddNewTaskToReadyList+0xbc>)
 80437e4:	681b      	ldr	r3, [r3, #0]
 80437e6:	2b00      	cmp	r3, #0
 80437e8:	d109      	bne.n	80437fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80437ea:	4a27      	ldr	r2, [pc, #156]	; (8043888 <prvAddNewTaskToReadyList+0xbc>)
 80437ec:	687b      	ldr	r3, [r7, #4]
 80437ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80437f0:	4b24      	ldr	r3, [pc, #144]	; (8043884 <prvAddNewTaskToReadyList+0xb8>)
 80437f2:	681b      	ldr	r3, [r3, #0]
 80437f4:	2b01      	cmp	r3, #1
 80437f6:	d110      	bne.n	804381a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80437f8:	f000 fc0c 	bl	8044014 <prvInitialiseTaskLists>
 80437fc:	e00d      	b.n	804381a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80437fe:	4b23      	ldr	r3, [pc, #140]	; (804388c <prvAddNewTaskToReadyList+0xc0>)
 8043800:	681b      	ldr	r3, [r3, #0]
 8043802:	2b00      	cmp	r3, #0
 8043804:	d109      	bne.n	804381a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8043806:	4b20      	ldr	r3, [pc, #128]	; (8043888 <prvAddNewTaskToReadyList+0xbc>)
 8043808:	681b      	ldr	r3, [r3, #0]
 804380a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804380c:	687b      	ldr	r3, [r7, #4]
 804380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043810:	429a      	cmp	r2, r3
 8043812:	d802      	bhi.n	804381a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8043814:	4a1c      	ldr	r2, [pc, #112]	; (8043888 <prvAddNewTaskToReadyList+0xbc>)
 8043816:	687b      	ldr	r3, [r7, #4]
 8043818:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 804381a:	4b1d      	ldr	r3, [pc, #116]	; (8043890 <prvAddNewTaskToReadyList+0xc4>)
 804381c:	681b      	ldr	r3, [r3, #0]
 804381e:	3301      	adds	r3, #1
 8043820:	4a1b      	ldr	r2, [pc, #108]	; (8043890 <prvAddNewTaskToReadyList+0xc4>)
 8043822:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8043824:	4b1a      	ldr	r3, [pc, #104]	; (8043890 <prvAddNewTaskToReadyList+0xc4>)
 8043826:	681a      	ldr	r2, [r3, #0]
 8043828:	687b      	ldr	r3, [r7, #4]
 804382a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 804382c:	687b      	ldr	r3, [r7, #4]
 804382e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043830:	4b18      	ldr	r3, [pc, #96]	; (8043894 <prvAddNewTaskToReadyList+0xc8>)
 8043832:	681b      	ldr	r3, [r3, #0]
 8043834:	429a      	cmp	r2, r3
 8043836:	d903      	bls.n	8043840 <prvAddNewTaskToReadyList+0x74>
 8043838:	687b      	ldr	r3, [r7, #4]
 804383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804383c:	4a15      	ldr	r2, [pc, #84]	; (8043894 <prvAddNewTaskToReadyList+0xc8>)
 804383e:	6013      	str	r3, [r2, #0]
 8043840:	687b      	ldr	r3, [r7, #4]
 8043842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043844:	4613      	mov	r3, r2
 8043846:	009b      	lsls	r3, r3, #2
 8043848:	4413      	add	r3, r2
 804384a:	009b      	lsls	r3, r3, #2
 804384c:	4a12      	ldr	r2, [pc, #72]	; (8043898 <prvAddNewTaskToReadyList+0xcc>)
 804384e:	441a      	add	r2, r3
 8043850:	687b      	ldr	r3, [r7, #4]
 8043852:	3304      	adds	r3, #4
 8043854:	4619      	mov	r1, r3
 8043856:	4610      	mov	r0, r2
 8043858:	f7fe ffdd 	bl	8042816 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 804385c:	f7ff f8c6 	bl	80429ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8043860:	4b0a      	ldr	r3, [pc, #40]	; (804388c <prvAddNewTaskToReadyList+0xc0>)
 8043862:	681b      	ldr	r3, [r3, #0]
 8043864:	2b00      	cmp	r3, #0
 8043866:	d008      	beq.n	804387a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8043868:	4b07      	ldr	r3, [pc, #28]	; (8043888 <prvAddNewTaskToReadyList+0xbc>)
 804386a:	681b      	ldr	r3, [r3, #0]
 804386c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804386e:	687b      	ldr	r3, [r7, #4]
 8043870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043872:	429a      	cmp	r2, r3
 8043874:	d201      	bcs.n	804387a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8043876:	f7ff f893 	bl	80429a0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 804387a:	bf00      	nop
 804387c:	3708      	adds	r7, #8
 804387e:	46bd      	mov	sp, r7
 8043880:	bd80      	pop	{r7, pc}
 8043882:	bf00      	nop
 8043884:	2001b5f0 	.word	0x2001b5f0
 8043888:	2001b11c 	.word	0x2001b11c
 804388c:	2001b5fc 	.word	0x2001b5fc
 8043890:	2001b60c 	.word	0x2001b60c
 8043894:	2001b5f8 	.word	0x2001b5f8
 8043898:	2001b120 	.word	0x2001b120

0804389c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 804389c:	b580      	push	{r7, lr}
 804389e:	b084      	sub	sp, #16
 80438a0:	af00      	add	r7, sp, #0
 80438a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80438a4:	2300      	movs	r3, #0
 80438a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80438a8:	687b      	ldr	r3, [r7, #4]
 80438aa:	2b00      	cmp	r3, #0
 80438ac:	d00e      	beq.n	80438cc <vTaskDelay+0x30>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80438ae:	4b0c      	ldr	r3, [pc, #48]	; (80438e0 <vTaskDelay+0x44>)
 80438b0:	681b      	ldr	r3, [r3, #0]
 80438b2:	2b00      	cmp	r3, #0
 80438b4:	d001      	beq.n	80438ba <vTaskDelay+0x1e>
 80438b6:	b672      	cpsid	i
 80438b8:	e7fe      	b.n	80438b8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80438ba:	f000 f867 	bl	804398c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80438be:	2100      	movs	r1, #0
 80438c0:	6878      	ldr	r0, [r7, #4]
 80438c2:	f000 fcd7 	bl	8044274 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80438c6:	f000 f8a7 	bl	8043a18 <xTaskResumeAll>
 80438ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80438cc:	68fb      	ldr	r3, [r7, #12]
 80438ce:	2b00      	cmp	r3, #0
 80438d0:	d101      	bne.n	80438d6 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 80438d2:	f7ff f865 	bl	80429a0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80438d6:	bf00      	nop
 80438d8:	3710      	adds	r7, #16
 80438da:	46bd      	mov	sp, r7
 80438dc:	bd80      	pop	{r7, pc}
 80438de:	bf00      	nop
 80438e0:	2001b618 	.word	0x2001b618

080438e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80438e4:	b580      	push	{r7, lr}
 80438e6:	b088      	sub	sp, #32
 80438e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80438ea:	2300      	movs	r3, #0
 80438ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80438ee:	2300      	movs	r3, #0
 80438f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80438f2:	463a      	mov	r2, r7
 80438f4:	1d39      	adds	r1, r7, #4
 80438f6:	f107 0308 	add.w	r3, r7, #8
 80438fa:	4618      	mov	r0, r3
 80438fc:	f7fe fd7e 	bl	80423fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8043900:	6839      	ldr	r1, [r7, #0]
 8043902:	687b      	ldr	r3, [r7, #4]
 8043904:	68ba      	ldr	r2, [r7, #8]
 8043906:	9202      	str	r2, [sp, #8]
 8043908:	9301      	str	r3, [sp, #4]
 804390a:	2300      	movs	r3, #0
 804390c:	9300      	str	r3, [sp, #0]
 804390e:	2300      	movs	r3, #0
 8043910:	460a      	mov	r2, r1
 8043912:	4918      	ldr	r1, [pc, #96]	; (8043974 <vTaskStartScheduler+0x90>)
 8043914:	4818      	ldr	r0, [pc, #96]	; (8043978 <vTaskStartScheduler+0x94>)
 8043916:	f7ff fe49 	bl	80435ac <xTaskCreateStatic>
 804391a:	4602      	mov	r2, r0
 804391c:	4b17      	ldr	r3, [pc, #92]	; (804397c <vTaskStartScheduler+0x98>)
 804391e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8043920:	4b16      	ldr	r3, [pc, #88]	; (804397c <vTaskStartScheduler+0x98>)
 8043922:	681b      	ldr	r3, [r3, #0]
 8043924:	2b00      	cmp	r3, #0
 8043926:	d002      	beq.n	804392e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8043928:	2301      	movs	r3, #1
 804392a:	60fb      	str	r3, [r7, #12]
 804392c:	e001      	b.n	8043932 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 804392e:	2300      	movs	r3, #0
 8043930:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8043932:	68fb      	ldr	r3, [r7, #12]
 8043934:	2b01      	cmp	r3, #1
 8043936:	d102      	bne.n	804393e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8043938:	f000 fcf0 	bl	804431c <xTimerCreateTimerTask>
 804393c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 804393e:	68fb      	ldr	r3, [r7, #12]
 8043940:	2b01      	cmp	r3, #1
 8043942:	d10d      	bne.n	8043960 <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8043944:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8043946:	4b0e      	ldr	r3, [pc, #56]	; (8043980 <vTaskStartScheduler+0x9c>)
 8043948:	f04f 32ff 	mov.w	r2, #4294967295
 804394c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 804394e:	4b0d      	ldr	r3, [pc, #52]	; (8043984 <vTaskStartScheduler+0xa0>)
 8043950:	2201      	movs	r2, #1
 8043952:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8043954:	4b0c      	ldr	r3, [pc, #48]	; (8043988 <vTaskStartScheduler+0xa4>)
 8043956:	2200      	movs	r2, #0
 8043958:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 804395a:	f7ff f947 	bl	8042bec <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 804395e:	e005      	b.n	804396c <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8043960:	68fb      	ldr	r3, [r7, #12]
 8043962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043966:	d101      	bne.n	804396c <vTaskStartScheduler+0x88>
 8043968:	b672      	cpsid	i
 804396a:	e7fe      	b.n	804396a <vTaskStartScheduler+0x86>
}
 804396c:	bf00      	nop
 804396e:	3710      	adds	r7, #16
 8043970:	46bd      	mov	sp, r7
 8043972:	bd80      	pop	{r7, pc}
 8043974:	08044a64 	.word	0x08044a64
 8043978:	08043fbd 	.word	0x08043fbd
 804397c:	2001b614 	.word	0x2001b614
 8043980:	2001b610 	.word	0x2001b610
 8043984:	2001b5fc 	.word	0x2001b5fc
 8043988:	2001b5f4 	.word	0x2001b5f4

0804398c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 804398c:	b480      	push	{r7}
 804398e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8043990:	4b04      	ldr	r3, [pc, #16]	; (80439a4 <vTaskSuspendAll+0x18>)
 8043992:	681b      	ldr	r3, [r3, #0]
 8043994:	3301      	adds	r3, #1
 8043996:	4a03      	ldr	r2, [pc, #12]	; (80439a4 <vTaskSuspendAll+0x18>)
 8043998:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 804399a:	bf00      	nop
 804399c:	46bd      	mov	sp, r7
 804399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80439a2:	4770      	bx	lr
 80439a4:	2001b618 	.word	0x2001b618

080439a8 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 80439a8:	b480      	push	{r7}
 80439aa:	b083      	sub	sp, #12
 80439ac:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 80439ae:	2300      	movs	r3, #0
 80439b0:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 80439b2:	4b14      	ldr	r3, [pc, #80]	; (8043a04 <prvGetExpectedIdleTime+0x5c>)
 80439b4:	681b      	ldr	r3, [r3, #0]
 80439b6:	2b00      	cmp	r3, #0
 80439b8:	d001      	beq.n	80439be <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 80439ba:	2301      	movs	r3, #1
 80439bc:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 80439be:	4b12      	ldr	r3, [pc, #72]	; (8043a08 <prvGetExpectedIdleTime+0x60>)
 80439c0:	681b      	ldr	r3, [r3, #0]
 80439c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80439c4:	2b00      	cmp	r3, #0
 80439c6:	d002      	beq.n	80439ce <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 80439c8:	2300      	movs	r3, #0
 80439ca:	607b      	str	r3, [r7, #4]
 80439cc:	e012      	b.n	80439f4 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 80439ce:	4b0f      	ldr	r3, [pc, #60]	; (8043a0c <prvGetExpectedIdleTime+0x64>)
 80439d0:	681b      	ldr	r3, [r3, #0]
 80439d2:	2b01      	cmp	r3, #1
 80439d4:	d902      	bls.n	80439dc <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 80439d6:	2300      	movs	r3, #0
 80439d8:	607b      	str	r3, [r7, #4]
 80439da:	e00b      	b.n	80439f4 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 80439dc:	683b      	ldr	r3, [r7, #0]
 80439de:	2b00      	cmp	r3, #0
 80439e0:	d002      	beq.n	80439e8 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 80439e2:	2300      	movs	r3, #0
 80439e4:	607b      	str	r3, [r7, #4]
 80439e6:	e005      	b.n	80439f4 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 80439e8:	4b09      	ldr	r3, [pc, #36]	; (8043a10 <prvGetExpectedIdleTime+0x68>)
 80439ea:	681a      	ldr	r2, [r3, #0]
 80439ec:	4b09      	ldr	r3, [pc, #36]	; (8043a14 <prvGetExpectedIdleTime+0x6c>)
 80439ee:	681b      	ldr	r3, [r3, #0]
 80439f0:	1ad3      	subs	r3, r2, r3
 80439f2:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 80439f4:	687b      	ldr	r3, [r7, #4]
	}
 80439f6:	4618      	mov	r0, r3
 80439f8:	370c      	adds	r7, #12
 80439fa:	46bd      	mov	sp, r7
 80439fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043a00:	4770      	bx	lr
 8043a02:	bf00      	nop
 8043a04:	2001b5f8 	.word	0x2001b5f8
 8043a08:	2001b11c 	.word	0x2001b11c
 8043a0c:	2001b120 	.word	0x2001b120
 8043a10:	2001b610 	.word	0x2001b610
 8043a14:	2001b5f4 	.word	0x2001b5f4

08043a18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8043a18:	b580      	push	{r7, lr}
 8043a1a:	b084      	sub	sp, #16
 8043a1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8043a1e:	2300      	movs	r3, #0
 8043a20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8043a22:	2300      	movs	r3, #0
 8043a24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8043a26:	4b3a      	ldr	r3, [pc, #232]	; (8043b10 <xTaskResumeAll+0xf8>)
 8043a28:	681b      	ldr	r3, [r3, #0]
 8043a2a:	2b00      	cmp	r3, #0
 8043a2c:	d101      	bne.n	8043a32 <xTaskResumeAll+0x1a>
 8043a2e:	b672      	cpsid	i
 8043a30:	e7fe      	b.n	8043a30 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8043a32:	f7fe ffc7 	bl	80429c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8043a36:	4b36      	ldr	r3, [pc, #216]	; (8043b10 <xTaskResumeAll+0xf8>)
 8043a38:	681b      	ldr	r3, [r3, #0]
 8043a3a:	3b01      	subs	r3, #1
 8043a3c:	4a34      	ldr	r2, [pc, #208]	; (8043b10 <xTaskResumeAll+0xf8>)
 8043a3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8043a40:	4b33      	ldr	r3, [pc, #204]	; (8043b10 <xTaskResumeAll+0xf8>)
 8043a42:	681b      	ldr	r3, [r3, #0]
 8043a44:	2b00      	cmp	r3, #0
 8043a46:	d15c      	bne.n	8043b02 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8043a48:	4b32      	ldr	r3, [pc, #200]	; (8043b14 <xTaskResumeAll+0xfc>)
 8043a4a:	681b      	ldr	r3, [r3, #0]
 8043a4c:	2b00      	cmp	r3, #0
 8043a4e:	d058      	beq.n	8043b02 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8043a50:	e02f      	b.n	8043ab2 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8043a52:	4b31      	ldr	r3, [pc, #196]	; (8043b18 <xTaskResumeAll+0x100>)
 8043a54:	68db      	ldr	r3, [r3, #12]
 8043a56:	68db      	ldr	r3, [r3, #12]
 8043a58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8043a5a:	68fb      	ldr	r3, [r7, #12]
 8043a5c:	3318      	adds	r3, #24
 8043a5e:	4618      	mov	r0, r3
 8043a60:	f7fe ff36 	bl	80428d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8043a64:	68fb      	ldr	r3, [r7, #12]
 8043a66:	3304      	adds	r3, #4
 8043a68:	4618      	mov	r0, r3
 8043a6a:	f7fe ff31 	bl	80428d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8043a6e:	68fb      	ldr	r3, [r7, #12]
 8043a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043a72:	4b2a      	ldr	r3, [pc, #168]	; (8043b1c <xTaskResumeAll+0x104>)
 8043a74:	681b      	ldr	r3, [r3, #0]
 8043a76:	429a      	cmp	r2, r3
 8043a78:	d903      	bls.n	8043a82 <xTaskResumeAll+0x6a>
 8043a7a:	68fb      	ldr	r3, [r7, #12]
 8043a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043a7e:	4a27      	ldr	r2, [pc, #156]	; (8043b1c <xTaskResumeAll+0x104>)
 8043a80:	6013      	str	r3, [r2, #0]
 8043a82:	68fb      	ldr	r3, [r7, #12]
 8043a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043a86:	4613      	mov	r3, r2
 8043a88:	009b      	lsls	r3, r3, #2
 8043a8a:	4413      	add	r3, r2
 8043a8c:	009b      	lsls	r3, r3, #2
 8043a8e:	4a24      	ldr	r2, [pc, #144]	; (8043b20 <xTaskResumeAll+0x108>)
 8043a90:	441a      	add	r2, r3
 8043a92:	68fb      	ldr	r3, [r7, #12]
 8043a94:	3304      	adds	r3, #4
 8043a96:	4619      	mov	r1, r3
 8043a98:	4610      	mov	r0, r2
 8043a9a:	f7fe febc 	bl	8042816 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8043a9e:	68fb      	ldr	r3, [r7, #12]
 8043aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043aa2:	4b20      	ldr	r3, [pc, #128]	; (8043b24 <xTaskResumeAll+0x10c>)
 8043aa4:	681b      	ldr	r3, [r3, #0]
 8043aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043aa8:	429a      	cmp	r2, r3
 8043aaa:	d302      	bcc.n	8043ab2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8043aac:	4b1e      	ldr	r3, [pc, #120]	; (8043b28 <xTaskResumeAll+0x110>)
 8043aae:	2201      	movs	r2, #1
 8043ab0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8043ab2:	4b19      	ldr	r3, [pc, #100]	; (8043b18 <xTaskResumeAll+0x100>)
 8043ab4:	681b      	ldr	r3, [r3, #0]
 8043ab6:	2b00      	cmp	r3, #0
 8043ab8:	d1cb      	bne.n	8043a52 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8043aba:	68fb      	ldr	r3, [r7, #12]
 8043abc:	2b00      	cmp	r3, #0
 8043abe:	d001      	beq.n	8043ac4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8043ac0:	f000 fb3e 	bl	8044140 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8043ac4:	4b19      	ldr	r3, [pc, #100]	; (8043b2c <xTaskResumeAll+0x114>)
 8043ac6:	681b      	ldr	r3, [r3, #0]
 8043ac8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8043aca:	687b      	ldr	r3, [r7, #4]
 8043acc:	2b00      	cmp	r3, #0
 8043ace:	d010      	beq.n	8043af2 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8043ad0:	f000 f83e 	bl	8043b50 <xTaskIncrementTick>
 8043ad4:	4603      	mov	r3, r0
 8043ad6:	2b00      	cmp	r3, #0
 8043ad8:	d002      	beq.n	8043ae0 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8043ada:	4b13      	ldr	r3, [pc, #76]	; (8043b28 <xTaskResumeAll+0x110>)
 8043adc:	2201      	movs	r2, #1
 8043ade:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8043ae0:	687b      	ldr	r3, [r7, #4]
 8043ae2:	3b01      	subs	r3, #1
 8043ae4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8043ae6:	687b      	ldr	r3, [r7, #4]
 8043ae8:	2b00      	cmp	r3, #0
 8043aea:	d1f1      	bne.n	8043ad0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8043aec:	4b0f      	ldr	r3, [pc, #60]	; (8043b2c <xTaskResumeAll+0x114>)
 8043aee:	2200      	movs	r2, #0
 8043af0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8043af2:	4b0d      	ldr	r3, [pc, #52]	; (8043b28 <xTaskResumeAll+0x110>)
 8043af4:	681b      	ldr	r3, [r3, #0]
 8043af6:	2b00      	cmp	r3, #0
 8043af8:	d003      	beq.n	8043b02 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8043afa:	2301      	movs	r3, #1
 8043afc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8043afe:	f7fe ff4f 	bl	80429a0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8043b02:	f7fe ff73 	bl	80429ec <vPortExitCritical>

	return xAlreadyYielded;
 8043b06:	68bb      	ldr	r3, [r7, #8]
}
 8043b08:	4618      	mov	r0, r3
 8043b0a:	3710      	adds	r7, #16
 8043b0c:	46bd      	mov	sp, r7
 8043b0e:	bd80      	pop	{r7, pc}
 8043b10:	2001b618 	.word	0x2001b618
 8043b14:	2001b5f0 	.word	0x2001b5f0
 8043b18:	2001b5b0 	.word	0x2001b5b0
 8043b1c:	2001b5f8 	.word	0x2001b5f8
 8043b20:	2001b120 	.word	0x2001b120
 8043b24:	2001b11c 	.word	0x2001b11c
 8043b28:	2001b604 	.word	0x2001b604
 8043b2c:	2001b600 	.word	0x2001b600

08043b30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8043b30:	b480      	push	{r7}
 8043b32:	b083      	sub	sp, #12
 8043b34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8043b36:	4b05      	ldr	r3, [pc, #20]	; (8043b4c <xTaskGetTickCount+0x1c>)
 8043b38:	681b      	ldr	r3, [r3, #0]
 8043b3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8043b3c:	687b      	ldr	r3, [r7, #4]
}
 8043b3e:	4618      	mov	r0, r3
 8043b40:	370c      	adds	r7, #12
 8043b42:	46bd      	mov	sp, r7
 8043b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043b48:	4770      	bx	lr
 8043b4a:	bf00      	nop
 8043b4c:	2001b5f4 	.word	0x2001b5f4

08043b50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8043b50:	b580      	push	{r7, lr}
 8043b52:	b086      	sub	sp, #24
 8043b54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8043b56:	2300      	movs	r3, #0
 8043b58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8043b5a:	4b4a      	ldr	r3, [pc, #296]	; (8043c84 <xTaskIncrementTick+0x134>)
 8043b5c:	681b      	ldr	r3, [r3, #0]
 8043b5e:	2b00      	cmp	r3, #0
 8043b60:	d17f      	bne.n	8043c62 <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8043b62:	4b49      	ldr	r3, [pc, #292]	; (8043c88 <xTaskIncrementTick+0x138>)
 8043b64:	681b      	ldr	r3, [r3, #0]
 8043b66:	3301      	adds	r3, #1
 8043b68:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8043b6a:	4a47      	ldr	r2, [pc, #284]	; (8043c88 <xTaskIncrementTick+0x138>)
 8043b6c:	693b      	ldr	r3, [r7, #16]
 8043b6e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8043b70:	693b      	ldr	r3, [r7, #16]
 8043b72:	2b00      	cmp	r3, #0
 8043b74:	d117      	bne.n	8043ba6 <xTaskIncrementTick+0x56>
		{
			taskSWITCH_DELAYED_LISTS();
 8043b76:	4b45      	ldr	r3, [pc, #276]	; (8043c8c <xTaskIncrementTick+0x13c>)
 8043b78:	681b      	ldr	r3, [r3, #0]
 8043b7a:	681b      	ldr	r3, [r3, #0]
 8043b7c:	2b00      	cmp	r3, #0
 8043b7e:	d001      	beq.n	8043b84 <xTaskIncrementTick+0x34>
 8043b80:	b672      	cpsid	i
 8043b82:	e7fe      	b.n	8043b82 <xTaskIncrementTick+0x32>
 8043b84:	4b41      	ldr	r3, [pc, #260]	; (8043c8c <xTaskIncrementTick+0x13c>)
 8043b86:	681b      	ldr	r3, [r3, #0]
 8043b88:	60fb      	str	r3, [r7, #12]
 8043b8a:	4b41      	ldr	r3, [pc, #260]	; (8043c90 <xTaskIncrementTick+0x140>)
 8043b8c:	681b      	ldr	r3, [r3, #0]
 8043b8e:	4a3f      	ldr	r2, [pc, #252]	; (8043c8c <xTaskIncrementTick+0x13c>)
 8043b90:	6013      	str	r3, [r2, #0]
 8043b92:	4a3f      	ldr	r2, [pc, #252]	; (8043c90 <xTaskIncrementTick+0x140>)
 8043b94:	68fb      	ldr	r3, [r7, #12]
 8043b96:	6013      	str	r3, [r2, #0]
 8043b98:	4b3e      	ldr	r3, [pc, #248]	; (8043c94 <xTaskIncrementTick+0x144>)
 8043b9a:	681b      	ldr	r3, [r3, #0]
 8043b9c:	3301      	adds	r3, #1
 8043b9e:	4a3d      	ldr	r2, [pc, #244]	; (8043c94 <xTaskIncrementTick+0x144>)
 8043ba0:	6013      	str	r3, [r2, #0]
 8043ba2:	f000 facd 	bl	8044140 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8043ba6:	4b3c      	ldr	r3, [pc, #240]	; (8043c98 <xTaskIncrementTick+0x148>)
 8043ba8:	681b      	ldr	r3, [r3, #0]
 8043baa:	693a      	ldr	r2, [r7, #16]
 8043bac:	429a      	cmp	r2, r3
 8043bae:	d349      	bcc.n	8043c44 <xTaskIncrementTick+0xf4>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8043bb0:	4b36      	ldr	r3, [pc, #216]	; (8043c8c <xTaskIncrementTick+0x13c>)
 8043bb2:	681b      	ldr	r3, [r3, #0]
 8043bb4:	681b      	ldr	r3, [r3, #0]
 8043bb6:	2b00      	cmp	r3, #0
 8043bb8:	d104      	bne.n	8043bc4 <xTaskIncrementTick+0x74>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8043bba:	4b37      	ldr	r3, [pc, #220]	; (8043c98 <xTaskIncrementTick+0x148>)
 8043bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8043bc0:	601a      	str	r2, [r3, #0]
					break;
 8043bc2:	e03f      	b.n	8043c44 <xTaskIncrementTick+0xf4>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8043bc4:	4b31      	ldr	r3, [pc, #196]	; (8043c8c <xTaskIncrementTick+0x13c>)
 8043bc6:	681b      	ldr	r3, [r3, #0]
 8043bc8:	68db      	ldr	r3, [r3, #12]
 8043bca:	68db      	ldr	r3, [r3, #12]
 8043bcc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8043bce:	68bb      	ldr	r3, [r7, #8]
 8043bd0:	685b      	ldr	r3, [r3, #4]
 8043bd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8043bd4:	693a      	ldr	r2, [r7, #16]
 8043bd6:	687b      	ldr	r3, [r7, #4]
 8043bd8:	429a      	cmp	r2, r3
 8043bda:	d203      	bcs.n	8043be4 <xTaskIncrementTick+0x94>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8043bdc:	4a2e      	ldr	r2, [pc, #184]	; (8043c98 <xTaskIncrementTick+0x148>)
 8043bde:	687b      	ldr	r3, [r7, #4]
 8043be0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8043be2:	e02f      	b.n	8043c44 <xTaskIncrementTick+0xf4>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8043be4:	68bb      	ldr	r3, [r7, #8]
 8043be6:	3304      	adds	r3, #4
 8043be8:	4618      	mov	r0, r3
 8043bea:	f7fe fe71 	bl	80428d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8043bee:	68bb      	ldr	r3, [r7, #8]
 8043bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043bf2:	2b00      	cmp	r3, #0
 8043bf4:	d004      	beq.n	8043c00 <xTaskIncrementTick+0xb0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8043bf6:	68bb      	ldr	r3, [r7, #8]
 8043bf8:	3318      	adds	r3, #24
 8043bfa:	4618      	mov	r0, r3
 8043bfc:	f7fe fe68 	bl	80428d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8043c00:	68bb      	ldr	r3, [r7, #8]
 8043c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043c04:	4b25      	ldr	r3, [pc, #148]	; (8043c9c <xTaskIncrementTick+0x14c>)
 8043c06:	681b      	ldr	r3, [r3, #0]
 8043c08:	429a      	cmp	r2, r3
 8043c0a:	d903      	bls.n	8043c14 <xTaskIncrementTick+0xc4>
 8043c0c:	68bb      	ldr	r3, [r7, #8]
 8043c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043c10:	4a22      	ldr	r2, [pc, #136]	; (8043c9c <xTaskIncrementTick+0x14c>)
 8043c12:	6013      	str	r3, [r2, #0]
 8043c14:	68bb      	ldr	r3, [r7, #8]
 8043c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043c18:	4613      	mov	r3, r2
 8043c1a:	009b      	lsls	r3, r3, #2
 8043c1c:	4413      	add	r3, r2
 8043c1e:	009b      	lsls	r3, r3, #2
 8043c20:	4a1f      	ldr	r2, [pc, #124]	; (8043ca0 <xTaskIncrementTick+0x150>)
 8043c22:	441a      	add	r2, r3
 8043c24:	68bb      	ldr	r3, [r7, #8]
 8043c26:	3304      	adds	r3, #4
 8043c28:	4619      	mov	r1, r3
 8043c2a:	4610      	mov	r0, r2
 8043c2c:	f7fe fdf3 	bl	8042816 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8043c30:	68bb      	ldr	r3, [r7, #8]
 8043c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043c34:	4b1b      	ldr	r3, [pc, #108]	; (8043ca4 <xTaskIncrementTick+0x154>)
 8043c36:	681b      	ldr	r3, [r3, #0]
 8043c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043c3a:	429a      	cmp	r2, r3
 8043c3c:	d3b8      	bcc.n	8043bb0 <xTaskIncrementTick+0x60>
						{
							xSwitchRequired = pdTRUE;
 8043c3e:	2301      	movs	r3, #1
 8043c40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8043c42:	e7b5      	b.n	8043bb0 <xTaskIncrementTick+0x60>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8043c44:	4b17      	ldr	r3, [pc, #92]	; (8043ca4 <xTaskIncrementTick+0x154>)
 8043c46:	681b      	ldr	r3, [r3, #0]
 8043c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043c4a:	4915      	ldr	r1, [pc, #84]	; (8043ca0 <xTaskIncrementTick+0x150>)
 8043c4c:	4613      	mov	r3, r2
 8043c4e:	009b      	lsls	r3, r3, #2
 8043c50:	4413      	add	r3, r2
 8043c52:	009b      	lsls	r3, r3, #2
 8043c54:	440b      	add	r3, r1
 8043c56:	681b      	ldr	r3, [r3, #0]
 8043c58:	2b01      	cmp	r3, #1
 8043c5a:	d907      	bls.n	8043c6c <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 8043c5c:	2301      	movs	r3, #1
 8043c5e:	617b      	str	r3, [r7, #20]
 8043c60:	e004      	b.n	8043c6c <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8043c62:	4b11      	ldr	r3, [pc, #68]	; (8043ca8 <xTaskIncrementTick+0x158>)
 8043c64:	681b      	ldr	r3, [r3, #0]
 8043c66:	3301      	adds	r3, #1
 8043c68:	4a0f      	ldr	r2, [pc, #60]	; (8043ca8 <xTaskIncrementTick+0x158>)
 8043c6a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8043c6c:	4b0f      	ldr	r3, [pc, #60]	; (8043cac <xTaskIncrementTick+0x15c>)
 8043c6e:	681b      	ldr	r3, [r3, #0]
 8043c70:	2b00      	cmp	r3, #0
 8043c72:	d001      	beq.n	8043c78 <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 8043c74:	2301      	movs	r3, #1
 8043c76:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8043c78:	697b      	ldr	r3, [r7, #20]
}
 8043c7a:	4618      	mov	r0, r3
 8043c7c:	3718      	adds	r7, #24
 8043c7e:	46bd      	mov	sp, r7
 8043c80:	bd80      	pop	{r7, pc}
 8043c82:	bf00      	nop
 8043c84:	2001b618 	.word	0x2001b618
 8043c88:	2001b5f4 	.word	0x2001b5f4
 8043c8c:	2001b5a8 	.word	0x2001b5a8
 8043c90:	2001b5ac 	.word	0x2001b5ac
 8043c94:	2001b608 	.word	0x2001b608
 8043c98:	2001b610 	.word	0x2001b610
 8043c9c:	2001b5f8 	.word	0x2001b5f8
 8043ca0:	2001b120 	.word	0x2001b120
 8043ca4:	2001b11c 	.word	0x2001b11c
 8043ca8:	2001b600 	.word	0x2001b600
 8043cac:	2001b604 	.word	0x2001b604

08043cb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8043cb0:	b580      	push	{r7, lr}
 8043cb2:	b084      	sub	sp, #16
 8043cb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8043cb6:	4b36      	ldr	r3, [pc, #216]	; (8043d90 <vTaskSwitchContext+0xe0>)
 8043cb8:	681b      	ldr	r3, [r3, #0]
 8043cba:	2b00      	cmp	r3, #0
 8043cbc:	d003      	beq.n	8043cc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8043cbe:	4b35      	ldr	r3, [pc, #212]	; (8043d94 <vTaskSwitchContext+0xe4>)
 8043cc0:	2201      	movs	r2, #1
 8043cc2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8043cc4:	e05f      	b.n	8043d86 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8043cc6:	4b33      	ldr	r3, [pc, #204]	; (8043d94 <vTaskSwitchContext+0xe4>)
 8043cc8:	2200      	movs	r2, #0
 8043cca:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8043ccc:	4b32      	ldr	r3, [pc, #200]	; (8043d98 <vTaskSwitchContext+0xe8>)
 8043cce:	681b      	ldr	r3, [r3, #0]
 8043cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043cd2:	60bb      	str	r3, [r7, #8]
 8043cd4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8043cd8:	607b      	str	r3, [r7, #4]
 8043cda:	68bb      	ldr	r3, [r7, #8]
 8043cdc:	681b      	ldr	r3, [r3, #0]
 8043cde:	687a      	ldr	r2, [r7, #4]
 8043ce0:	429a      	cmp	r2, r3
 8043ce2:	d111      	bne.n	8043d08 <vTaskSwitchContext+0x58>
 8043ce4:	68bb      	ldr	r3, [r7, #8]
 8043ce6:	3304      	adds	r3, #4
 8043ce8:	681b      	ldr	r3, [r3, #0]
 8043cea:	687a      	ldr	r2, [r7, #4]
 8043cec:	429a      	cmp	r2, r3
 8043cee:	d10b      	bne.n	8043d08 <vTaskSwitchContext+0x58>
 8043cf0:	68bb      	ldr	r3, [r7, #8]
 8043cf2:	3308      	adds	r3, #8
 8043cf4:	681b      	ldr	r3, [r3, #0]
 8043cf6:	687a      	ldr	r2, [r7, #4]
 8043cf8:	429a      	cmp	r2, r3
 8043cfa:	d105      	bne.n	8043d08 <vTaskSwitchContext+0x58>
 8043cfc:	68bb      	ldr	r3, [r7, #8]
 8043cfe:	330c      	adds	r3, #12
 8043d00:	681b      	ldr	r3, [r3, #0]
 8043d02:	687a      	ldr	r2, [r7, #4]
 8043d04:	429a      	cmp	r2, r3
 8043d06:	d008      	beq.n	8043d1a <vTaskSwitchContext+0x6a>
 8043d08:	4b23      	ldr	r3, [pc, #140]	; (8043d98 <vTaskSwitchContext+0xe8>)
 8043d0a:	681a      	ldr	r2, [r3, #0]
 8043d0c:	4b22      	ldr	r3, [pc, #136]	; (8043d98 <vTaskSwitchContext+0xe8>)
 8043d0e:	681b      	ldr	r3, [r3, #0]
 8043d10:	3334      	adds	r3, #52	; 0x34
 8043d12:	4619      	mov	r1, r3
 8043d14:	4610      	mov	r0, r2
 8043d16:	f7fe fb65 	bl	80423e4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8043d1a:	4b20      	ldr	r3, [pc, #128]	; (8043d9c <vTaskSwitchContext+0xec>)
 8043d1c:	681b      	ldr	r3, [r3, #0]
 8043d1e:	60fb      	str	r3, [r7, #12]
 8043d20:	e007      	b.n	8043d32 <vTaskSwitchContext+0x82>
 8043d22:	68fb      	ldr	r3, [r7, #12]
 8043d24:	2b00      	cmp	r3, #0
 8043d26:	d101      	bne.n	8043d2c <vTaskSwitchContext+0x7c>
 8043d28:	b672      	cpsid	i
 8043d2a:	e7fe      	b.n	8043d2a <vTaskSwitchContext+0x7a>
 8043d2c:	68fb      	ldr	r3, [r7, #12]
 8043d2e:	3b01      	subs	r3, #1
 8043d30:	60fb      	str	r3, [r7, #12]
 8043d32:	491b      	ldr	r1, [pc, #108]	; (8043da0 <vTaskSwitchContext+0xf0>)
 8043d34:	68fa      	ldr	r2, [r7, #12]
 8043d36:	4613      	mov	r3, r2
 8043d38:	009b      	lsls	r3, r3, #2
 8043d3a:	4413      	add	r3, r2
 8043d3c:	009b      	lsls	r3, r3, #2
 8043d3e:	440b      	add	r3, r1
 8043d40:	681b      	ldr	r3, [r3, #0]
 8043d42:	2b00      	cmp	r3, #0
 8043d44:	d0ed      	beq.n	8043d22 <vTaskSwitchContext+0x72>
 8043d46:	68fa      	ldr	r2, [r7, #12]
 8043d48:	4613      	mov	r3, r2
 8043d4a:	009b      	lsls	r3, r3, #2
 8043d4c:	4413      	add	r3, r2
 8043d4e:	009b      	lsls	r3, r3, #2
 8043d50:	4a13      	ldr	r2, [pc, #76]	; (8043da0 <vTaskSwitchContext+0xf0>)
 8043d52:	4413      	add	r3, r2
 8043d54:	603b      	str	r3, [r7, #0]
 8043d56:	683b      	ldr	r3, [r7, #0]
 8043d58:	685b      	ldr	r3, [r3, #4]
 8043d5a:	685a      	ldr	r2, [r3, #4]
 8043d5c:	683b      	ldr	r3, [r7, #0]
 8043d5e:	605a      	str	r2, [r3, #4]
 8043d60:	683b      	ldr	r3, [r7, #0]
 8043d62:	685a      	ldr	r2, [r3, #4]
 8043d64:	683b      	ldr	r3, [r7, #0]
 8043d66:	3308      	adds	r3, #8
 8043d68:	429a      	cmp	r2, r3
 8043d6a:	d104      	bne.n	8043d76 <vTaskSwitchContext+0xc6>
 8043d6c:	683b      	ldr	r3, [r7, #0]
 8043d6e:	685b      	ldr	r3, [r3, #4]
 8043d70:	685a      	ldr	r2, [r3, #4]
 8043d72:	683b      	ldr	r3, [r7, #0]
 8043d74:	605a      	str	r2, [r3, #4]
 8043d76:	683b      	ldr	r3, [r7, #0]
 8043d78:	685b      	ldr	r3, [r3, #4]
 8043d7a:	68db      	ldr	r3, [r3, #12]
 8043d7c:	4a06      	ldr	r2, [pc, #24]	; (8043d98 <vTaskSwitchContext+0xe8>)
 8043d7e:	6013      	str	r3, [r2, #0]
 8043d80:	4a06      	ldr	r2, [pc, #24]	; (8043d9c <vTaskSwitchContext+0xec>)
 8043d82:	68fb      	ldr	r3, [r7, #12]
 8043d84:	6013      	str	r3, [r2, #0]
}
 8043d86:	bf00      	nop
 8043d88:	3710      	adds	r7, #16
 8043d8a:	46bd      	mov	sp, r7
 8043d8c:	bd80      	pop	{r7, pc}
 8043d8e:	bf00      	nop
 8043d90:	2001b618 	.word	0x2001b618
 8043d94:	2001b604 	.word	0x2001b604
 8043d98:	2001b11c 	.word	0x2001b11c
 8043d9c:	2001b5f8 	.word	0x2001b5f8
 8043da0:	2001b120 	.word	0x2001b120

08043da4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8043da4:	b580      	push	{r7, lr}
 8043da6:	b082      	sub	sp, #8
 8043da8:	af00      	add	r7, sp, #0
 8043daa:	6078      	str	r0, [r7, #4]
 8043dac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8043dae:	687b      	ldr	r3, [r7, #4]
 8043db0:	2b00      	cmp	r3, #0
 8043db2:	d101      	bne.n	8043db8 <vTaskPlaceOnEventList+0x14>
 8043db4:	b672      	cpsid	i
 8043db6:	e7fe      	b.n	8043db6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8043db8:	4b07      	ldr	r3, [pc, #28]	; (8043dd8 <vTaskPlaceOnEventList+0x34>)
 8043dba:	681b      	ldr	r3, [r3, #0]
 8043dbc:	3318      	adds	r3, #24
 8043dbe:	4619      	mov	r1, r3
 8043dc0:	6878      	ldr	r0, [r7, #4]
 8043dc2:	f7fe fd4c 	bl	804285e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8043dc6:	2101      	movs	r1, #1
 8043dc8:	6838      	ldr	r0, [r7, #0]
 8043dca:	f000 fa53 	bl	8044274 <prvAddCurrentTaskToDelayedList>
}
 8043dce:	bf00      	nop
 8043dd0:	3708      	adds	r7, #8
 8043dd2:	46bd      	mov	sp, r7
 8043dd4:	bd80      	pop	{r7, pc}
 8043dd6:	bf00      	nop
 8043dd8:	2001b11c 	.word	0x2001b11c

08043ddc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8043ddc:	b580      	push	{r7, lr}
 8043dde:	b084      	sub	sp, #16
 8043de0:	af00      	add	r7, sp, #0
 8043de2:	60f8      	str	r0, [r7, #12]
 8043de4:	60b9      	str	r1, [r7, #8]
 8043de6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8043de8:	68fb      	ldr	r3, [r7, #12]
 8043dea:	2b00      	cmp	r3, #0
 8043dec:	d101      	bne.n	8043df2 <vTaskPlaceOnEventListRestricted+0x16>
 8043dee:	b672      	cpsid	i
 8043df0:	e7fe      	b.n	8043df0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8043df2:	4b0a      	ldr	r3, [pc, #40]	; (8043e1c <vTaskPlaceOnEventListRestricted+0x40>)
 8043df4:	681b      	ldr	r3, [r3, #0]
 8043df6:	3318      	adds	r3, #24
 8043df8:	4619      	mov	r1, r3
 8043dfa:	68f8      	ldr	r0, [r7, #12]
 8043dfc:	f7fe fd0b 	bl	8042816 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8043e00:	687b      	ldr	r3, [r7, #4]
 8043e02:	2b00      	cmp	r3, #0
 8043e04:	d002      	beq.n	8043e0c <vTaskPlaceOnEventListRestricted+0x30>
		{
			xTicksToWait = portMAX_DELAY;
 8043e06:	f04f 33ff 	mov.w	r3, #4294967295
 8043e0a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8043e0c:	6879      	ldr	r1, [r7, #4]
 8043e0e:	68b8      	ldr	r0, [r7, #8]
 8043e10:	f000 fa30 	bl	8044274 <prvAddCurrentTaskToDelayedList>
	}
 8043e14:	bf00      	nop
 8043e16:	3710      	adds	r7, #16
 8043e18:	46bd      	mov	sp, r7
 8043e1a:	bd80      	pop	{r7, pc}
 8043e1c:	2001b11c 	.word	0x2001b11c

08043e20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8043e20:	b580      	push	{r7, lr}
 8043e22:	b084      	sub	sp, #16
 8043e24:	af00      	add	r7, sp, #0
 8043e26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8043e28:	687b      	ldr	r3, [r7, #4]
 8043e2a:	68db      	ldr	r3, [r3, #12]
 8043e2c:	68db      	ldr	r3, [r3, #12]
 8043e2e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8043e30:	68bb      	ldr	r3, [r7, #8]
 8043e32:	2b00      	cmp	r3, #0
 8043e34:	d101      	bne.n	8043e3a <xTaskRemoveFromEventList+0x1a>
 8043e36:	b672      	cpsid	i
 8043e38:	e7fe      	b.n	8043e38 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8043e3a:	68bb      	ldr	r3, [r7, #8]
 8043e3c:	3318      	adds	r3, #24
 8043e3e:	4618      	mov	r0, r3
 8043e40:	f7fe fd46 	bl	80428d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8043e44:	4b1e      	ldr	r3, [pc, #120]	; (8043ec0 <xTaskRemoveFromEventList+0xa0>)
 8043e46:	681b      	ldr	r3, [r3, #0]
 8043e48:	2b00      	cmp	r3, #0
 8043e4a:	d11f      	bne.n	8043e8c <xTaskRemoveFromEventList+0x6c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8043e4c:	68bb      	ldr	r3, [r7, #8]
 8043e4e:	3304      	adds	r3, #4
 8043e50:	4618      	mov	r0, r3
 8043e52:	f7fe fd3d 	bl	80428d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8043e56:	68bb      	ldr	r3, [r7, #8]
 8043e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043e5a:	4b1a      	ldr	r3, [pc, #104]	; (8043ec4 <xTaskRemoveFromEventList+0xa4>)
 8043e5c:	681b      	ldr	r3, [r3, #0]
 8043e5e:	429a      	cmp	r2, r3
 8043e60:	d903      	bls.n	8043e6a <xTaskRemoveFromEventList+0x4a>
 8043e62:	68bb      	ldr	r3, [r7, #8]
 8043e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043e66:	4a17      	ldr	r2, [pc, #92]	; (8043ec4 <xTaskRemoveFromEventList+0xa4>)
 8043e68:	6013      	str	r3, [r2, #0]
 8043e6a:	68bb      	ldr	r3, [r7, #8]
 8043e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043e6e:	4613      	mov	r3, r2
 8043e70:	009b      	lsls	r3, r3, #2
 8043e72:	4413      	add	r3, r2
 8043e74:	009b      	lsls	r3, r3, #2
 8043e76:	4a14      	ldr	r2, [pc, #80]	; (8043ec8 <xTaskRemoveFromEventList+0xa8>)
 8043e78:	441a      	add	r2, r3
 8043e7a:	68bb      	ldr	r3, [r7, #8]
 8043e7c:	3304      	adds	r3, #4
 8043e7e:	4619      	mov	r1, r3
 8043e80:	4610      	mov	r0, r2
 8043e82:	f7fe fcc8 	bl	8042816 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8043e86:	f000 f95b 	bl	8044140 <prvResetNextTaskUnblockTime>
 8043e8a:	e005      	b.n	8043e98 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8043e8c:	68bb      	ldr	r3, [r7, #8]
 8043e8e:	3318      	adds	r3, #24
 8043e90:	4619      	mov	r1, r3
 8043e92:	480e      	ldr	r0, [pc, #56]	; (8043ecc <xTaskRemoveFromEventList+0xac>)
 8043e94:	f7fe fcbf 	bl	8042816 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8043e98:	68bb      	ldr	r3, [r7, #8]
 8043e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043e9c:	4b0c      	ldr	r3, [pc, #48]	; (8043ed0 <xTaskRemoveFromEventList+0xb0>)
 8043e9e:	681b      	ldr	r3, [r3, #0]
 8043ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043ea2:	429a      	cmp	r2, r3
 8043ea4:	d905      	bls.n	8043eb2 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8043ea6:	2301      	movs	r3, #1
 8043ea8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8043eaa:	4b0a      	ldr	r3, [pc, #40]	; (8043ed4 <xTaskRemoveFromEventList+0xb4>)
 8043eac:	2201      	movs	r2, #1
 8043eae:	601a      	str	r2, [r3, #0]
 8043eb0:	e001      	b.n	8043eb6 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8043eb2:	2300      	movs	r3, #0
 8043eb4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8043eb6:	68fb      	ldr	r3, [r7, #12]
}
 8043eb8:	4618      	mov	r0, r3
 8043eba:	3710      	adds	r7, #16
 8043ebc:	46bd      	mov	sp, r7
 8043ebe:	bd80      	pop	{r7, pc}
 8043ec0:	2001b618 	.word	0x2001b618
 8043ec4:	2001b5f8 	.word	0x2001b5f8
 8043ec8:	2001b120 	.word	0x2001b120
 8043ecc:	2001b5b0 	.word	0x2001b5b0
 8043ed0:	2001b11c 	.word	0x2001b11c
 8043ed4:	2001b604 	.word	0x2001b604

08043ed8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8043ed8:	b480      	push	{r7}
 8043eda:	b083      	sub	sp, #12
 8043edc:	af00      	add	r7, sp, #0
 8043ede:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8043ee0:	4b06      	ldr	r3, [pc, #24]	; (8043efc <vTaskInternalSetTimeOutState+0x24>)
 8043ee2:	681a      	ldr	r2, [r3, #0]
 8043ee4:	687b      	ldr	r3, [r7, #4]
 8043ee6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8043ee8:	4b05      	ldr	r3, [pc, #20]	; (8043f00 <vTaskInternalSetTimeOutState+0x28>)
 8043eea:	681a      	ldr	r2, [r3, #0]
 8043eec:	687b      	ldr	r3, [r7, #4]
 8043eee:	605a      	str	r2, [r3, #4]
}
 8043ef0:	bf00      	nop
 8043ef2:	370c      	adds	r7, #12
 8043ef4:	46bd      	mov	sp, r7
 8043ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043efa:	4770      	bx	lr
 8043efc:	2001b608 	.word	0x2001b608
 8043f00:	2001b5f4 	.word	0x2001b5f4

08043f04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8043f04:	b580      	push	{r7, lr}
 8043f06:	b086      	sub	sp, #24
 8043f08:	af00      	add	r7, sp, #0
 8043f0a:	6078      	str	r0, [r7, #4]
 8043f0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8043f0e:	687b      	ldr	r3, [r7, #4]
 8043f10:	2b00      	cmp	r3, #0
 8043f12:	d101      	bne.n	8043f18 <xTaskCheckForTimeOut+0x14>
 8043f14:	b672      	cpsid	i
 8043f16:	e7fe      	b.n	8043f16 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8043f18:	683b      	ldr	r3, [r7, #0]
 8043f1a:	2b00      	cmp	r3, #0
 8043f1c:	d101      	bne.n	8043f22 <xTaskCheckForTimeOut+0x1e>
 8043f1e:	b672      	cpsid	i
 8043f20:	e7fe      	b.n	8043f20 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8043f22:	f7fe fd4f 	bl	80429c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8043f26:	4b1d      	ldr	r3, [pc, #116]	; (8043f9c <xTaskCheckForTimeOut+0x98>)
 8043f28:	681b      	ldr	r3, [r3, #0]
 8043f2a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8043f2c:	687b      	ldr	r3, [r7, #4]
 8043f2e:	685b      	ldr	r3, [r3, #4]
 8043f30:	693a      	ldr	r2, [r7, #16]
 8043f32:	1ad3      	subs	r3, r2, r3
 8043f34:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8043f36:	683b      	ldr	r3, [r7, #0]
 8043f38:	681b      	ldr	r3, [r3, #0]
 8043f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043f3e:	d102      	bne.n	8043f46 <xTaskCheckForTimeOut+0x42>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8043f40:	2300      	movs	r3, #0
 8043f42:	617b      	str	r3, [r7, #20]
 8043f44:	e023      	b.n	8043f8e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8043f46:	687b      	ldr	r3, [r7, #4]
 8043f48:	681a      	ldr	r2, [r3, #0]
 8043f4a:	4b15      	ldr	r3, [pc, #84]	; (8043fa0 <xTaskCheckForTimeOut+0x9c>)
 8043f4c:	681b      	ldr	r3, [r3, #0]
 8043f4e:	429a      	cmp	r2, r3
 8043f50:	d007      	beq.n	8043f62 <xTaskCheckForTimeOut+0x5e>
 8043f52:	687b      	ldr	r3, [r7, #4]
 8043f54:	685b      	ldr	r3, [r3, #4]
 8043f56:	693a      	ldr	r2, [r7, #16]
 8043f58:	429a      	cmp	r2, r3
 8043f5a:	d302      	bcc.n	8043f62 <xTaskCheckForTimeOut+0x5e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8043f5c:	2301      	movs	r3, #1
 8043f5e:	617b      	str	r3, [r7, #20]
 8043f60:	e015      	b.n	8043f8e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8043f62:	683b      	ldr	r3, [r7, #0]
 8043f64:	681b      	ldr	r3, [r3, #0]
 8043f66:	68fa      	ldr	r2, [r7, #12]
 8043f68:	429a      	cmp	r2, r3
 8043f6a:	d20b      	bcs.n	8043f84 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8043f6c:	683b      	ldr	r3, [r7, #0]
 8043f6e:	681a      	ldr	r2, [r3, #0]
 8043f70:	68fb      	ldr	r3, [r7, #12]
 8043f72:	1ad2      	subs	r2, r2, r3
 8043f74:	683b      	ldr	r3, [r7, #0]
 8043f76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8043f78:	6878      	ldr	r0, [r7, #4]
 8043f7a:	f7ff ffad 	bl	8043ed8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8043f7e:	2300      	movs	r3, #0
 8043f80:	617b      	str	r3, [r7, #20]
 8043f82:	e004      	b.n	8043f8e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8043f84:	683b      	ldr	r3, [r7, #0]
 8043f86:	2200      	movs	r2, #0
 8043f88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8043f8a:	2301      	movs	r3, #1
 8043f8c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8043f8e:	f7fe fd2d 	bl	80429ec <vPortExitCritical>

	return xReturn;
 8043f92:	697b      	ldr	r3, [r7, #20]
}
 8043f94:	4618      	mov	r0, r3
 8043f96:	3718      	adds	r7, #24
 8043f98:	46bd      	mov	sp, r7
 8043f9a:	bd80      	pop	{r7, pc}
 8043f9c:	2001b5f4 	.word	0x2001b5f4
 8043fa0:	2001b608 	.word	0x2001b608

08043fa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8043fa4:	b480      	push	{r7}
 8043fa6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8043fa8:	4b03      	ldr	r3, [pc, #12]	; (8043fb8 <vTaskMissedYield+0x14>)
 8043faa:	2201      	movs	r2, #1
 8043fac:	601a      	str	r2, [r3, #0]
}
 8043fae:	bf00      	nop
 8043fb0:	46bd      	mov	sp, r7
 8043fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043fb6:	4770      	bx	lr
 8043fb8:	2001b604 	.word	0x2001b604

08043fbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8043fbc:	b580      	push	{r7, lr}
 8043fbe:	b084      	sub	sp, #16
 8043fc0:	af00      	add	r7, sp, #0
 8043fc2:	6078      	str	r0, [r7, #4]
	SCHEDULER IS STARTED. **/

	/* In case a task that has a secure context deletes itself, in which case
	the idle task is responsible for deleting the task's secure context, if
	any. */
	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
 8043fc4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8043fc8:	f7fe fece 	bl	8042d68 <vPortAllocateSecureContext>

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8043fcc:	f000 f862 	bl	8044094 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8043fd0:	4b0d      	ldr	r3, [pc, #52]	; (8044008 <prvIdleTask+0x4c>)
 8043fd2:	681b      	ldr	r3, [r3, #0]
 8043fd4:	2b01      	cmp	r3, #1
 8043fd6:	d901      	bls.n	8043fdc <prvIdleTask+0x20>
			{
				taskYIELD();
 8043fd8:	f7fe fce2 	bl	80429a0 <vPortYield>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8043fdc:	f7ff fce4 	bl	80439a8 <prvGetExpectedIdleTime>
 8043fe0:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8043fe2:	68fb      	ldr	r3, [r7, #12]
 8043fe4:	2b01      	cmp	r3, #1
 8043fe6:	d9f1      	bls.n	8043fcc <prvIdleTask+0x10>
			{
				vTaskSuspendAll();
 8043fe8:	f7ff fcd0 	bl	804398c <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8043fec:	4b07      	ldr	r3, [pc, #28]	; (804400c <prvIdleTask+0x50>)
 8043fee:	681a      	ldr	r2, [r3, #0]
 8043ff0:	4b07      	ldr	r3, [pc, #28]	; (8044010 <prvIdleTask+0x54>)
 8043ff2:	681b      	ldr	r3, [r3, #0]
 8043ff4:	429a      	cmp	r2, r3
 8043ff6:	d201      	bcs.n	8043ffc <prvIdleTask+0x40>
 8043ff8:	b672      	cpsid	i
 8043ffa:	e7fe      	b.n	8043ffa <prvIdleTask+0x3e>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8043ffc:	f7ff fcd4 	bl	80439a8 <prvGetExpectedIdleTime>
 8044000:	60f8      	str	r0, [r7, #12]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8044002:	f7ff fd09 	bl	8043a18 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8044006:	e7e1      	b.n	8043fcc <prvIdleTask+0x10>
 8044008:	2001b120 	.word	0x2001b120
 804400c:	2001b610 	.word	0x2001b610
 8044010:	2001b5f4 	.word	0x2001b5f4

08044014 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8044014:	b580      	push	{r7, lr}
 8044016:	b082      	sub	sp, #8
 8044018:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 804401a:	2300      	movs	r3, #0
 804401c:	607b      	str	r3, [r7, #4]
 804401e:	e00c      	b.n	804403a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8044020:	687a      	ldr	r2, [r7, #4]
 8044022:	4613      	mov	r3, r2
 8044024:	009b      	lsls	r3, r3, #2
 8044026:	4413      	add	r3, r2
 8044028:	009b      	lsls	r3, r3, #2
 804402a:	4a12      	ldr	r2, [pc, #72]	; (8044074 <prvInitialiseTaskLists+0x60>)
 804402c:	4413      	add	r3, r2
 804402e:	4618      	mov	r0, r3
 8044030:	f7fe fbc4 	bl	80427bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8044034:	687b      	ldr	r3, [r7, #4]
 8044036:	3301      	adds	r3, #1
 8044038:	607b      	str	r3, [r7, #4]
 804403a:	687b      	ldr	r3, [r7, #4]
 804403c:	2b37      	cmp	r3, #55	; 0x37
 804403e:	d9ef      	bls.n	8044020 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8044040:	480d      	ldr	r0, [pc, #52]	; (8044078 <prvInitialiseTaskLists+0x64>)
 8044042:	f7fe fbbb 	bl	80427bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8044046:	480d      	ldr	r0, [pc, #52]	; (804407c <prvInitialiseTaskLists+0x68>)
 8044048:	f7fe fbb8 	bl	80427bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 804404c:	480c      	ldr	r0, [pc, #48]	; (8044080 <prvInitialiseTaskLists+0x6c>)
 804404e:	f7fe fbb5 	bl	80427bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8044052:	480c      	ldr	r0, [pc, #48]	; (8044084 <prvInitialiseTaskLists+0x70>)
 8044054:	f7fe fbb2 	bl	80427bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8044058:	480b      	ldr	r0, [pc, #44]	; (8044088 <prvInitialiseTaskLists+0x74>)
 804405a:	f7fe fbaf 	bl	80427bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 804405e:	4b0b      	ldr	r3, [pc, #44]	; (804408c <prvInitialiseTaskLists+0x78>)
 8044060:	4a05      	ldr	r2, [pc, #20]	; (8044078 <prvInitialiseTaskLists+0x64>)
 8044062:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8044064:	4b0a      	ldr	r3, [pc, #40]	; (8044090 <prvInitialiseTaskLists+0x7c>)
 8044066:	4a05      	ldr	r2, [pc, #20]	; (804407c <prvInitialiseTaskLists+0x68>)
 8044068:	601a      	str	r2, [r3, #0]
}
 804406a:	bf00      	nop
 804406c:	3708      	adds	r7, #8
 804406e:	46bd      	mov	sp, r7
 8044070:	bd80      	pop	{r7, pc}
 8044072:	bf00      	nop
 8044074:	2001b120 	.word	0x2001b120
 8044078:	2001b580 	.word	0x2001b580
 804407c:	2001b594 	.word	0x2001b594
 8044080:	2001b5b0 	.word	0x2001b5b0
 8044084:	2001b5c4 	.word	0x2001b5c4
 8044088:	2001b5dc 	.word	0x2001b5dc
 804408c:	2001b5a8 	.word	0x2001b5a8
 8044090:	2001b5ac 	.word	0x2001b5ac

08044094 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8044094:	b580      	push	{r7, lr}
 8044096:	b082      	sub	sp, #8
 8044098:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 804409a:	e019      	b.n	80440d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 804409c:	f7fe fc92 	bl	80429c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80440a0:	4b0f      	ldr	r3, [pc, #60]	; (80440e0 <prvCheckTasksWaitingTermination+0x4c>)
 80440a2:	68db      	ldr	r3, [r3, #12]
 80440a4:	68db      	ldr	r3, [r3, #12]
 80440a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80440a8:	687b      	ldr	r3, [r7, #4]
 80440aa:	3304      	adds	r3, #4
 80440ac:	4618      	mov	r0, r3
 80440ae:	f7fe fc0f 	bl	80428d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80440b2:	4b0c      	ldr	r3, [pc, #48]	; (80440e4 <prvCheckTasksWaitingTermination+0x50>)
 80440b4:	681b      	ldr	r3, [r3, #0]
 80440b6:	3b01      	subs	r3, #1
 80440b8:	4a0a      	ldr	r2, [pc, #40]	; (80440e4 <prvCheckTasksWaitingTermination+0x50>)
 80440ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80440bc:	4b0a      	ldr	r3, [pc, #40]	; (80440e8 <prvCheckTasksWaitingTermination+0x54>)
 80440be:	681b      	ldr	r3, [r3, #0]
 80440c0:	3b01      	subs	r3, #1
 80440c2:	4a09      	ldr	r2, [pc, #36]	; (80440e8 <prvCheckTasksWaitingTermination+0x54>)
 80440c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80440c6:	f7fe fc91 	bl	80429ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80440ca:	6878      	ldr	r0, [r7, #4]
 80440cc:	f000 f80e 	bl	80440ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80440d0:	4b05      	ldr	r3, [pc, #20]	; (80440e8 <prvCheckTasksWaitingTermination+0x54>)
 80440d2:	681b      	ldr	r3, [r3, #0]
 80440d4:	2b00      	cmp	r3, #0
 80440d6:	d1e1      	bne.n	804409c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80440d8:	bf00      	nop
 80440da:	3708      	adds	r7, #8
 80440dc:	46bd      	mov	sp, r7
 80440de:	bd80      	pop	{r7, pc}
 80440e0:	2001b5c4 	.word	0x2001b5c4
 80440e4:	2001b5f0 	.word	0x2001b5f0
 80440e8:	2001b5d8 	.word	0x2001b5d8

080440ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80440ec:	b580      	push	{r7, lr}
 80440ee:	b082      	sub	sp, #8
 80440f0:	af00      	add	r7, sp, #0
 80440f2:	6078      	str	r0, [r7, #4]
		/* This call is required specifically for the TriCore port.  It must be
		above the vPortFree() calls.  The call is also used by ports/demos that
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );
 80440f4:	6878      	ldr	r0, [r7, #4]
 80440f6:	f7fe fe3a 	bl	8042d6e <vPortFreeSecureContext>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80440fa:	687b      	ldr	r3, [r7, #4]
 80440fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8044100:	2b00      	cmp	r3, #0
 8044102:	d108      	bne.n	8044116 <prvDeleteTCB+0x2a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8044104:	687b      	ldr	r3, [r7, #4]
 8044106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8044108:	4618      	mov	r0, r3
 804410a:	f7fe fa53 	bl	80425b4 <vPortFree>
				vPortFree( pxTCB );
 804410e:	6878      	ldr	r0, [r7, #4]
 8044110:	f7fe fa50 	bl	80425b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8044114:	e00f      	b.n	8044136 <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8044116:	687b      	ldr	r3, [r7, #4]
 8044118:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 804411c:	2b01      	cmp	r3, #1
 804411e:	d103      	bne.n	8044128 <prvDeleteTCB+0x3c>
				vPortFree( pxTCB );
 8044120:	6878      	ldr	r0, [r7, #4]
 8044122:	f7fe fa47 	bl	80425b4 <vPortFree>
	}
 8044126:	e006      	b.n	8044136 <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8044128:	687b      	ldr	r3, [r7, #4]
 804412a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 804412e:	2b02      	cmp	r3, #2
 8044130:	d001      	beq.n	8044136 <prvDeleteTCB+0x4a>
 8044132:	b672      	cpsid	i
 8044134:	e7fe      	b.n	8044134 <prvDeleteTCB+0x48>
	}
 8044136:	bf00      	nop
 8044138:	3708      	adds	r7, #8
 804413a:	46bd      	mov	sp, r7
 804413c:	bd80      	pop	{r7, pc}
	...

08044140 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8044140:	b480      	push	{r7}
 8044142:	b083      	sub	sp, #12
 8044144:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8044146:	4b0c      	ldr	r3, [pc, #48]	; (8044178 <prvResetNextTaskUnblockTime+0x38>)
 8044148:	681b      	ldr	r3, [r3, #0]
 804414a:	681b      	ldr	r3, [r3, #0]
 804414c:	2b00      	cmp	r3, #0
 804414e:	d104      	bne.n	804415a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8044150:	4b0a      	ldr	r3, [pc, #40]	; (804417c <prvResetNextTaskUnblockTime+0x3c>)
 8044152:	f04f 32ff 	mov.w	r2, #4294967295
 8044156:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8044158:	e008      	b.n	804416c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 804415a:	4b07      	ldr	r3, [pc, #28]	; (8044178 <prvResetNextTaskUnblockTime+0x38>)
 804415c:	681b      	ldr	r3, [r3, #0]
 804415e:	68db      	ldr	r3, [r3, #12]
 8044160:	68db      	ldr	r3, [r3, #12]
 8044162:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8044164:	687b      	ldr	r3, [r7, #4]
 8044166:	685b      	ldr	r3, [r3, #4]
 8044168:	4a04      	ldr	r2, [pc, #16]	; (804417c <prvResetNextTaskUnblockTime+0x3c>)
 804416a:	6013      	str	r3, [r2, #0]
}
 804416c:	bf00      	nop
 804416e:	370c      	adds	r7, #12
 8044170:	46bd      	mov	sp, r7
 8044172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044176:	4770      	bx	lr
 8044178:	2001b5a8 	.word	0x2001b5a8
 804417c:	2001b610 	.word	0x2001b610

08044180 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8044180:	b480      	push	{r7}
 8044182:	b083      	sub	sp, #12
 8044184:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8044186:	4b0b      	ldr	r3, [pc, #44]	; (80441b4 <xTaskGetSchedulerState+0x34>)
 8044188:	681b      	ldr	r3, [r3, #0]
 804418a:	2b00      	cmp	r3, #0
 804418c:	d102      	bne.n	8044194 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 804418e:	2301      	movs	r3, #1
 8044190:	607b      	str	r3, [r7, #4]
 8044192:	e008      	b.n	80441a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8044194:	4b08      	ldr	r3, [pc, #32]	; (80441b8 <xTaskGetSchedulerState+0x38>)
 8044196:	681b      	ldr	r3, [r3, #0]
 8044198:	2b00      	cmp	r3, #0
 804419a:	d102      	bne.n	80441a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 804419c:	2302      	movs	r3, #2
 804419e:	607b      	str	r3, [r7, #4]
 80441a0:	e001      	b.n	80441a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80441a2:	2300      	movs	r3, #0
 80441a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80441a6:	687b      	ldr	r3, [r7, #4]
	}
 80441a8:	4618      	mov	r0, r3
 80441aa:	370c      	adds	r7, #12
 80441ac:	46bd      	mov	sp, r7
 80441ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80441b2:	4770      	bx	lr
 80441b4:	2001b5fc 	.word	0x2001b5fc
 80441b8:	2001b618 	.word	0x2001b618

080441bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80441bc:	b580      	push	{r7, lr}
 80441be:	b084      	sub	sp, #16
 80441c0:	af00      	add	r7, sp, #0
 80441c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80441c4:	687b      	ldr	r3, [r7, #4]
 80441c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80441c8:	2300      	movs	r3, #0
 80441ca:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80441cc:	687b      	ldr	r3, [r7, #4]
 80441ce:	2b00      	cmp	r3, #0
 80441d0:	d044      	beq.n	804425c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80441d2:	4b25      	ldr	r3, [pc, #148]	; (8044268 <xTaskPriorityDisinherit+0xac>)
 80441d4:	681b      	ldr	r3, [r3, #0]
 80441d6:	68ba      	ldr	r2, [r7, #8]
 80441d8:	429a      	cmp	r2, r3
 80441da:	d001      	beq.n	80441e0 <xTaskPriorityDisinherit+0x24>
 80441dc:	b672      	cpsid	i
 80441de:	e7fe      	b.n	80441de <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80441e0:	68bb      	ldr	r3, [r7, #8]
 80441e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80441e4:	2b00      	cmp	r3, #0
 80441e6:	d101      	bne.n	80441ec <xTaskPriorityDisinherit+0x30>
 80441e8:	b672      	cpsid	i
 80441ea:	e7fe      	b.n	80441ea <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80441ec:	68bb      	ldr	r3, [r7, #8]
 80441ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80441f0:	1e5a      	subs	r2, r3, #1
 80441f2:	68bb      	ldr	r3, [r7, #8]
 80441f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80441f6:	68bb      	ldr	r3, [r7, #8]
 80441f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80441fa:	68bb      	ldr	r3, [r7, #8]
 80441fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80441fe:	429a      	cmp	r2, r3
 8044200:	d02c      	beq.n	804425c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8044202:	68bb      	ldr	r3, [r7, #8]
 8044204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8044206:	2b00      	cmp	r3, #0
 8044208:	d128      	bne.n	804425c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 804420a:	68bb      	ldr	r3, [r7, #8]
 804420c:	3304      	adds	r3, #4
 804420e:	4618      	mov	r0, r3
 8044210:	f7fe fb5e 	bl	80428d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8044214:	68bb      	ldr	r3, [r7, #8]
 8044216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8044218:	68bb      	ldr	r3, [r7, #8]
 804421a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 804421c:	68bb      	ldr	r3, [r7, #8]
 804421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044220:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8044224:	68bb      	ldr	r3, [r7, #8]
 8044226:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8044228:	68bb      	ldr	r3, [r7, #8]
 804422a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804422c:	4b0f      	ldr	r3, [pc, #60]	; (804426c <xTaskPriorityDisinherit+0xb0>)
 804422e:	681b      	ldr	r3, [r3, #0]
 8044230:	429a      	cmp	r2, r3
 8044232:	d903      	bls.n	804423c <xTaskPriorityDisinherit+0x80>
 8044234:	68bb      	ldr	r3, [r7, #8]
 8044236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044238:	4a0c      	ldr	r2, [pc, #48]	; (804426c <xTaskPriorityDisinherit+0xb0>)
 804423a:	6013      	str	r3, [r2, #0]
 804423c:	68bb      	ldr	r3, [r7, #8]
 804423e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8044240:	4613      	mov	r3, r2
 8044242:	009b      	lsls	r3, r3, #2
 8044244:	4413      	add	r3, r2
 8044246:	009b      	lsls	r3, r3, #2
 8044248:	4a09      	ldr	r2, [pc, #36]	; (8044270 <xTaskPriorityDisinherit+0xb4>)
 804424a:	441a      	add	r2, r3
 804424c:	68bb      	ldr	r3, [r7, #8]
 804424e:	3304      	adds	r3, #4
 8044250:	4619      	mov	r1, r3
 8044252:	4610      	mov	r0, r2
 8044254:	f7fe fadf 	bl	8042816 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8044258:	2301      	movs	r3, #1
 804425a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 804425c:	68fb      	ldr	r3, [r7, #12]
	}
 804425e:	4618      	mov	r0, r3
 8044260:	3710      	adds	r7, #16
 8044262:	46bd      	mov	sp, r7
 8044264:	bd80      	pop	{r7, pc}
 8044266:	bf00      	nop
 8044268:	2001b11c 	.word	0x2001b11c
 804426c:	2001b5f8 	.word	0x2001b5f8
 8044270:	2001b120 	.word	0x2001b120

08044274 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8044274:	b580      	push	{r7, lr}
 8044276:	b084      	sub	sp, #16
 8044278:	af00      	add	r7, sp, #0
 804427a:	6078      	str	r0, [r7, #4]
 804427c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 804427e:	4b21      	ldr	r3, [pc, #132]	; (8044304 <prvAddCurrentTaskToDelayedList+0x90>)
 8044280:	681b      	ldr	r3, [r3, #0]
 8044282:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8044284:	4b20      	ldr	r3, [pc, #128]	; (8044308 <prvAddCurrentTaskToDelayedList+0x94>)
 8044286:	681b      	ldr	r3, [r3, #0]
 8044288:	3304      	adds	r3, #4
 804428a:	4618      	mov	r0, r3
 804428c:	f7fe fb20 	bl	80428d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8044290:	687b      	ldr	r3, [r7, #4]
 8044292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8044296:	d10a      	bne.n	80442ae <prvAddCurrentTaskToDelayedList+0x3a>
 8044298:	683b      	ldr	r3, [r7, #0]
 804429a:	2b00      	cmp	r3, #0
 804429c:	d007      	beq.n	80442ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 804429e:	4b1a      	ldr	r3, [pc, #104]	; (8044308 <prvAddCurrentTaskToDelayedList+0x94>)
 80442a0:	681b      	ldr	r3, [r3, #0]
 80442a2:	3304      	adds	r3, #4
 80442a4:	4619      	mov	r1, r3
 80442a6:	4819      	ldr	r0, [pc, #100]	; (804430c <prvAddCurrentTaskToDelayedList+0x98>)
 80442a8:	f7fe fab5 	bl	8042816 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80442ac:	e026      	b.n	80442fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80442ae:	68fa      	ldr	r2, [r7, #12]
 80442b0:	687b      	ldr	r3, [r7, #4]
 80442b2:	4413      	add	r3, r2
 80442b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80442b6:	4b14      	ldr	r3, [pc, #80]	; (8044308 <prvAddCurrentTaskToDelayedList+0x94>)
 80442b8:	681b      	ldr	r3, [r3, #0]
 80442ba:	68ba      	ldr	r2, [r7, #8]
 80442bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80442be:	68ba      	ldr	r2, [r7, #8]
 80442c0:	68fb      	ldr	r3, [r7, #12]
 80442c2:	429a      	cmp	r2, r3
 80442c4:	d209      	bcs.n	80442da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80442c6:	4b12      	ldr	r3, [pc, #72]	; (8044310 <prvAddCurrentTaskToDelayedList+0x9c>)
 80442c8:	681a      	ldr	r2, [r3, #0]
 80442ca:	4b0f      	ldr	r3, [pc, #60]	; (8044308 <prvAddCurrentTaskToDelayedList+0x94>)
 80442cc:	681b      	ldr	r3, [r3, #0]
 80442ce:	3304      	adds	r3, #4
 80442d0:	4619      	mov	r1, r3
 80442d2:	4610      	mov	r0, r2
 80442d4:	f7fe fac3 	bl	804285e <vListInsert>
}
 80442d8:	e010      	b.n	80442fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80442da:	4b0e      	ldr	r3, [pc, #56]	; (8044314 <prvAddCurrentTaskToDelayedList+0xa0>)
 80442dc:	681a      	ldr	r2, [r3, #0]
 80442de:	4b0a      	ldr	r3, [pc, #40]	; (8044308 <prvAddCurrentTaskToDelayedList+0x94>)
 80442e0:	681b      	ldr	r3, [r3, #0]
 80442e2:	3304      	adds	r3, #4
 80442e4:	4619      	mov	r1, r3
 80442e6:	4610      	mov	r0, r2
 80442e8:	f7fe fab9 	bl	804285e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80442ec:	4b0a      	ldr	r3, [pc, #40]	; (8044318 <prvAddCurrentTaskToDelayedList+0xa4>)
 80442ee:	681b      	ldr	r3, [r3, #0]
 80442f0:	68ba      	ldr	r2, [r7, #8]
 80442f2:	429a      	cmp	r2, r3
 80442f4:	d202      	bcs.n	80442fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80442f6:	4a08      	ldr	r2, [pc, #32]	; (8044318 <prvAddCurrentTaskToDelayedList+0xa4>)
 80442f8:	68bb      	ldr	r3, [r7, #8]
 80442fa:	6013      	str	r3, [r2, #0]
}
 80442fc:	bf00      	nop
 80442fe:	3710      	adds	r7, #16
 8044300:	46bd      	mov	sp, r7
 8044302:	bd80      	pop	{r7, pc}
 8044304:	2001b5f4 	.word	0x2001b5f4
 8044308:	2001b11c 	.word	0x2001b11c
 804430c:	2001b5dc 	.word	0x2001b5dc
 8044310:	2001b5ac 	.word	0x2001b5ac
 8044314:	2001b5a8 	.word	0x2001b5a8
 8044318:	2001b610 	.word	0x2001b610

0804431c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 804431c:	b580      	push	{r7, lr}
 804431e:	b088      	sub	sp, #32
 8044320:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8044322:	2300      	movs	r3, #0
 8044324:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8044326:	f000 fac1 	bl	80448ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 804432a:	4b17      	ldr	r3, [pc, #92]	; (8044388 <xTimerCreateTimerTask+0x6c>)
 804432c:	681b      	ldr	r3, [r3, #0]
 804432e:	2b00      	cmp	r3, #0
 8044330:	d020      	beq.n	8044374 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8044332:	2300      	movs	r3, #0
 8044334:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8044336:	2300      	movs	r3, #0
 8044338:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 804433a:	463a      	mov	r2, r7
 804433c:	1d39      	adds	r1, r7, #4
 804433e:	f107 0308 	add.w	r3, r7, #8
 8044342:	4618      	mov	r0, r3
 8044344:	f7fe f874 	bl	8042430 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8044348:	6839      	ldr	r1, [r7, #0]
 804434a:	687b      	ldr	r3, [r7, #4]
 804434c:	68ba      	ldr	r2, [r7, #8]
 804434e:	9202      	str	r2, [sp, #8]
 8044350:	9301      	str	r3, [sp, #4]
 8044352:	2303      	movs	r3, #3
 8044354:	9300      	str	r3, [sp, #0]
 8044356:	2300      	movs	r3, #0
 8044358:	460a      	mov	r2, r1
 804435a:	490c      	ldr	r1, [pc, #48]	; (804438c <xTimerCreateTimerTask+0x70>)
 804435c:	480c      	ldr	r0, [pc, #48]	; (8044390 <xTimerCreateTimerTask+0x74>)
 804435e:	f7ff f925 	bl	80435ac <xTaskCreateStatic>
 8044362:	4602      	mov	r2, r0
 8044364:	4b0b      	ldr	r3, [pc, #44]	; (8044394 <xTimerCreateTimerTask+0x78>)
 8044366:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8044368:	4b0a      	ldr	r3, [pc, #40]	; (8044394 <xTimerCreateTimerTask+0x78>)
 804436a:	681b      	ldr	r3, [r3, #0]
 804436c:	2b00      	cmp	r3, #0
 804436e:	d001      	beq.n	8044374 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8044370:	2301      	movs	r3, #1
 8044372:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8044374:	68fb      	ldr	r3, [r7, #12]
 8044376:	2b00      	cmp	r3, #0
 8044378:	d101      	bne.n	804437e <xTimerCreateTimerTask+0x62>
 804437a:	b672      	cpsid	i
 804437c:	e7fe      	b.n	804437c <xTimerCreateTimerTask+0x60>
	return xReturn;
 804437e:	68fb      	ldr	r3, [r7, #12]
}
 8044380:	4618      	mov	r0, r3
 8044382:	3710      	adds	r7, #16
 8044384:	46bd      	mov	sp, r7
 8044386:	bd80      	pop	{r7, pc}
 8044388:	2001b64c 	.word	0x2001b64c
 804438c:	08044a7c 	.word	0x08044a7c
 8044390:	080444a9 	.word	0x080444a9
 8044394:	2001b650 	.word	0x2001b650

08044398 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8044398:	b580      	push	{r7, lr}
 804439a:	b08a      	sub	sp, #40	; 0x28
 804439c:	af00      	add	r7, sp, #0
 804439e:	60f8      	str	r0, [r7, #12]
 80443a0:	60b9      	str	r1, [r7, #8]
 80443a2:	607a      	str	r2, [r7, #4]
 80443a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80443a6:	2300      	movs	r3, #0
 80443a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80443aa:	68fb      	ldr	r3, [r7, #12]
 80443ac:	2b00      	cmp	r3, #0
 80443ae:	d101      	bne.n	80443b4 <xTimerGenericCommand+0x1c>
 80443b0:	b672      	cpsid	i
 80443b2:	e7fe      	b.n	80443b2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80443b4:	4b19      	ldr	r3, [pc, #100]	; (804441c <xTimerGenericCommand+0x84>)
 80443b6:	681b      	ldr	r3, [r3, #0]
 80443b8:	2b00      	cmp	r3, #0
 80443ba:	d02a      	beq.n	8044412 <xTimerGenericCommand+0x7a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80443bc:	68bb      	ldr	r3, [r7, #8]
 80443be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80443c0:	687b      	ldr	r3, [r7, #4]
 80443c2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80443c4:	68fb      	ldr	r3, [r7, #12]
 80443c6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80443c8:	68bb      	ldr	r3, [r7, #8]
 80443ca:	2b05      	cmp	r3, #5
 80443cc:	dc18      	bgt.n	8044400 <xTimerGenericCommand+0x68>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80443ce:	f7ff fed7 	bl	8044180 <xTaskGetSchedulerState>
 80443d2:	4603      	mov	r3, r0
 80443d4:	2b02      	cmp	r3, #2
 80443d6:	d109      	bne.n	80443ec <xTimerGenericCommand+0x54>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80443d8:	4b10      	ldr	r3, [pc, #64]	; (804441c <xTimerGenericCommand+0x84>)
 80443da:	6818      	ldr	r0, [r3, #0]
 80443dc:	f107 0114 	add.w	r1, r7, #20
 80443e0:	2300      	movs	r3, #0
 80443e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80443e4:	f7fe fd8f 	bl	8042f06 <xQueueGenericSend>
 80443e8:	6278      	str	r0, [r7, #36]	; 0x24
 80443ea:	e012      	b.n	8044412 <xTimerGenericCommand+0x7a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80443ec:	4b0b      	ldr	r3, [pc, #44]	; (804441c <xTimerGenericCommand+0x84>)
 80443ee:	6818      	ldr	r0, [r3, #0]
 80443f0:	f107 0114 	add.w	r1, r7, #20
 80443f4:	2300      	movs	r3, #0
 80443f6:	2200      	movs	r2, #0
 80443f8:	f7fe fd85 	bl	8042f06 <xQueueGenericSend>
 80443fc:	6278      	str	r0, [r7, #36]	; 0x24
 80443fe:	e008      	b.n	8044412 <xTimerGenericCommand+0x7a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8044400:	4b06      	ldr	r3, [pc, #24]	; (804441c <xTimerGenericCommand+0x84>)
 8044402:	6818      	ldr	r0, [r3, #0]
 8044404:	f107 0114 	add.w	r1, r7, #20
 8044408:	2300      	movs	r3, #0
 804440a:	683a      	ldr	r2, [r7, #0]
 804440c:	f7fe fe40 	bl	8043090 <xQueueGenericSendFromISR>
 8044410:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8044412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8044414:	4618      	mov	r0, r3
 8044416:	3728      	adds	r7, #40	; 0x28
 8044418:	46bd      	mov	sp, r7
 804441a:	bd80      	pop	{r7, pc}
 804441c:	2001b64c 	.word	0x2001b64c

08044420 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8044420:	b580      	push	{r7, lr}
 8044422:	b086      	sub	sp, #24
 8044424:	af02      	add	r7, sp, #8
 8044426:	6078      	str	r0, [r7, #4]
 8044428:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 804442a:	4b1e      	ldr	r3, [pc, #120]	; (80444a4 <prvProcessExpiredTimer+0x84>)
 804442c:	681b      	ldr	r3, [r3, #0]
 804442e:	68db      	ldr	r3, [r3, #12]
 8044430:	68db      	ldr	r3, [r3, #12]
 8044432:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8044434:	68fb      	ldr	r3, [r7, #12]
 8044436:	3304      	adds	r3, #4
 8044438:	4618      	mov	r0, r3
 804443a:	f7fe fa49 	bl	80428d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 804443e:	68fb      	ldr	r3, [r7, #12]
 8044440:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8044444:	f003 0304 	and.w	r3, r3, #4
 8044448:	2b00      	cmp	r3, #0
 804444a:	d019      	beq.n	8044480 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 804444c:	68fb      	ldr	r3, [r7, #12]
 804444e:	699a      	ldr	r2, [r3, #24]
 8044450:	687b      	ldr	r3, [r7, #4]
 8044452:	18d1      	adds	r1, r2, r3
 8044454:	687b      	ldr	r3, [r7, #4]
 8044456:	683a      	ldr	r2, [r7, #0]
 8044458:	68f8      	ldr	r0, [r7, #12]
 804445a:	f000 f8c1 	bl	80445e0 <prvInsertTimerInActiveList>
 804445e:	4603      	mov	r3, r0
 8044460:	2b00      	cmp	r3, #0
 8044462:	d016      	beq.n	8044492 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8044464:	2300      	movs	r3, #0
 8044466:	9300      	str	r3, [sp, #0]
 8044468:	2300      	movs	r3, #0
 804446a:	687a      	ldr	r2, [r7, #4]
 804446c:	2100      	movs	r1, #0
 804446e:	68f8      	ldr	r0, [r7, #12]
 8044470:	f7ff ff92 	bl	8044398 <xTimerGenericCommand>
 8044474:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8044476:	68bb      	ldr	r3, [r7, #8]
 8044478:	2b00      	cmp	r3, #0
 804447a:	d10a      	bne.n	8044492 <prvProcessExpiredTimer+0x72>
 804447c:	b672      	cpsid	i
 804447e:	e7fe      	b.n	804447e <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8044480:	68fb      	ldr	r3, [r7, #12]
 8044482:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8044486:	f023 0301 	bic.w	r3, r3, #1
 804448a:	b2da      	uxtb	r2, r3
 804448c:	68fb      	ldr	r3, [r7, #12]
 804448e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8044492:	68fb      	ldr	r3, [r7, #12]
 8044494:	6a1b      	ldr	r3, [r3, #32]
 8044496:	68f8      	ldr	r0, [r7, #12]
 8044498:	4798      	blx	r3
}
 804449a:	bf00      	nop
 804449c:	3710      	adds	r7, #16
 804449e:	46bd      	mov	sp, r7
 80444a0:	bd80      	pop	{r7, pc}
 80444a2:	bf00      	nop
 80444a4:	2001b644 	.word	0x2001b644

080444a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80444a8:	b580      	push	{r7, lr}
 80444aa:	b084      	sub	sp, #16
 80444ac:	af00      	add	r7, sp, #0
 80444ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80444b0:	f107 0308 	add.w	r3, r7, #8
 80444b4:	4618      	mov	r0, r3
 80444b6:	f000 f84f 	bl	8044558 <prvGetNextExpireTime>
 80444ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80444bc:	68bb      	ldr	r3, [r7, #8]
 80444be:	4619      	mov	r1, r3
 80444c0:	68f8      	ldr	r0, [r7, #12]
 80444c2:	f000 f803 	bl	80444cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80444c6:	f000 f8cd 	bl	8044664 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80444ca:	e7f1      	b.n	80444b0 <prvTimerTask+0x8>

080444cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80444cc:	b580      	push	{r7, lr}
 80444ce:	b084      	sub	sp, #16
 80444d0:	af00      	add	r7, sp, #0
 80444d2:	6078      	str	r0, [r7, #4]
 80444d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80444d6:	f7ff fa59 	bl	804398c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80444da:	f107 0308 	add.w	r3, r7, #8
 80444de:	4618      	mov	r0, r3
 80444e0:	f000 f85e 	bl	80445a0 <prvSampleTimeNow>
 80444e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80444e6:	68bb      	ldr	r3, [r7, #8]
 80444e8:	2b00      	cmp	r3, #0
 80444ea:	d12a      	bne.n	8044542 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80444ec:	683b      	ldr	r3, [r7, #0]
 80444ee:	2b00      	cmp	r3, #0
 80444f0:	d10a      	bne.n	8044508 <prvProcessTimerOrBlockTask+0x3c>
 80444f2:	687a      	ldr	r2, [r7, #4]
 80444f4:	68fb      	ldr	r3, [r7, #12]
 80444f6:	429a      	cmp	r2, r3
 80444f8:	d806      	bhi.n	8044508 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80444fa:	f7ff fa8d 	bl	8043a18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80444fe:	68f9      	ldr	r1, [r7, #12]
 8044500:	6878      	ldr	r0, [r7, #4]
 8044502:	f7ff ff8d 	bl	8044420 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8044506:	e01e      	b.n	8044546 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8044508:	683b      	ldr	r3, [r7, #0]
 804450a:	2b00      	cmp	r3, #0
 804450c:	d008      	beq.n	8044520 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 804450e:	4b10      	ldr	r3, [pc, #64]	; (8044550 <prvProcessTimerOrBlockTask+0x84>)
 8044510:	681b      	ldr	r3, [r3, #0]
 8044512:	681b      	ldr	r3, [r3, #0]
 8044514:	2b00      	cmp	r3, #0
 8044516:	d101      	bne.n	804451c <prvProcessTimerOrBlockTask+0x50>
 8044518:	2301      	movs	r3, #1
 804451a:	e000      	b.n	804451e <prvProcessTimerOrBlockTask+0x52>
 804451c:	2300      	movs	r3, #0
 804451e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8044520:	4b0c      	ldr	r3, [pc, #48]	; (8044554 <prvProcessTimerOrBlockTask+0x88>)
 8044522:	6818      	ldr	r0, [r3, #0]
 8044524:	687a      	ldr	r2, [r7, #4]
 8044526:	68fb      	ldr	r3, [r7, #12]
 8044528:	1ad3      	subs	r3, r2, r3
 804452a:	683a      	ldr	r2, [r7, #0]
 804452c:	4619      	mov	r1, r3
 804452e:	f7ff f809 	bl	8043544 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8044532:	f7ff fa71 	bl	8043a18 <xTaskResumeAll>
 8044536:	4603      	mov	r3, r0
 8044538:	2b00      	cmp	r3, #0
 804453a:	d104      	bne.n	8044546 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 804453c:	f7fe fa30 	bl	80429a0 <vPortYield>
}
 8044540:	e001      	b.n	8044546 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8044542:	f7ff fa69 	bl	8043a18 <xTaskResumeAll>
}
 8044546:	bf00      	nop
 8044548:	3710      	adds	r7, #16
 804454a:	46bd      	mov	sp, r7
 804454c:	bd80      	pop	{r7, pc}
 804454e:	bf00      	nop
 8044550:	2001b648 	.word	0x2001b648
 8044554:	2001b64c 	.word	0x2001b64c

08044558 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8044558:	b480      	push	{r7}
 804455a:	b085      	sub	sp, #20
 804455c:	af00      	add	r7, sp, #0
 804455e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8044560:	4b0e      	ldr	r3, [pc, #56]	; (804459c <prvGetNextExpireTime+0x44>)
 8044562:	681b      	ldr	r3, [r3, #0]
 8044564:	681b      	ldr	r3, [r3, #0]
 8044566:	2b00      	cmp	r3, #0
 8044568:	d101      	bne.n	804456e <prvGetNextExpireTime+0x16>
 804456a:	2201      	movs	r2, #1
 804456c:	e000      	b.n	8044570 <prvGetNextExpireTime+0x18>
 804456e:	2200      	movs	r2, #0
 8044570:	687b      	ldr	r3, [r7, #4]
 8044572:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8044574:	687b      	ldr	r3, [r7, #4]
 8044576:	681b      	ldr	r3, [r3, #0]
 8044578:	2b00      	cmp	r3, #0
 804457a:	d105      	bne.n	8044588 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 804457c:	4b07      	ldr	r3, [pc, #28]	; (804459c <prvGetNextExpireTime+0x44>)
 804457e:	681b      	ldr	r3, [r3, #0]
 8044580:	68db      	ldr	r3, [r3, #12]
 8044582:	681b      	ldr	r3, [r3, #0]
 8044584:	60fb      	str	r3, [r7, #12]
 8044586:	e001      	b.n	804458c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8044588:	2300      	movs	r3, #0
 804458a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 804458c:	68fb      	ldr	r3, [r7, #12]
}
 804458e:	4618      	mov	r0, r3
 8044590:	3714      	adds	r7, #20
 8044592:	46bd      	mov	sp, r7
 8044594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044598:	4770      	bx	lr
 804459a:	bf00      	nop
 804459c:	2001b644 	.word	0x2001b644

080445a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80445a0:	b580      	push	{r7, lr}
 80445a2:	b084      	sub	sp, #16
 80445a4:	af00      	add	r7, sp, #0
 80445a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80445a8:	f7ff fac2 	bl	8043b30 <xTaskGetTickCount>
 80445ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80445ae:	4b0b      	ldr	r3, [pc, #44]	; (80445dc <prvSampleTimeNow+0x3c>)
 80445b0:	681b      	ldr	r3, [r3, #0]
 80445b2:	68fa      	ldr	r2, [r7, #12]
 80445b4:	429a      	cmp	r2, r3
 80445b6:	d205      	bcs.n	80445c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80445b8:	f000 f91c 	bl	80447f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80445bc:	687b      	ldr	r3, [r7, #4]
 80445be:	2201      	movs	r2, #1
 80445c0:	601a      	str	r2, [r3, #0]
 80445c2:	e002      	b.n	80445ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80445c4:	687b      	ldr	r3, [r7, #4]
 80445c6:	2200      	movs	r2, #0
 80445c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80445ca:	4a04      	ldr	r2, [pc, #16]	; (80445dc <prvSampleTimeNow+0x3c>)
 80445cc:	68fb      	ldr	r3, [r7, #12]
 80445ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80445d0:	68fb      	ldr	r3, [r7, #12]
}
 80445d2:	4618      	mov	r0, r3
 80445d4:	3710      	adds	r7, #16
 80445d6:	46bd      	mov	sp, r7
 80445d8:	bd80      	pop	{r7, pc}
 80445da:	bf00      	nop
 80445dc:	2001b654 	.word	0x2001b654

080445e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80445e0:	b580      	push	{r7, lr}
 80445e2:	b086      	sub	sp, #24
 80445e4:	af00      	add	r7, sp, #0
 80445e6:	60f8      	str	r0, [r7, #12]
 80445e8:	60b9      	str	r1, [r7, #8]
 80445ea:	607a      	str	r2, [r7, #4]
 80445ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80445ee:	2300      	movs	r3, #0
 80445f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80445f2:	68fb      	ldr	r3, [r7, #12]
 80445f4:	68ba      	ldr	r2, [r7, #8]
 80445f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80445f8:	68fb      	ldr	r3, [r7, #12]
 80445fa:	68fa      	ldr	r2, [r7, #12]
 80445fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80445fe:	68ba      	ldr	r2, [r7, #8]
 8044600:	687b      	ldr	r3, [r7, #4]
 8044602:	429a      	cmp	r2, r3
 8044604:	d812      	bhi.n	804462c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8044606:	687a      	ldr	r2, [r7, #4]
 8044608:	683b      	ldr	r3, [r7, #0]
 804460a:	1ad2      	subs	r2, r2, r3
 804460c:	68fb      	ldr	r3, [r7, #12]
 804460e:	699b      	ldr	r3, [r3, #24]
 8044610:	429a      	cmp	r2, r3
 8044612:	d302      	bcc.n	804461a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8044614:	2301      	movs	r3, #1
 8044616:	617b      	str	r3, [r7, #20]
 8044618:	e01b      	b.n	8044652 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 804461a:	4b10      	ldr	r3, [pc, #64]	; (804465c <prvInsertTimerInActiveList+0x7c>)
 804461c:	681a      	ldr	r2, [r3, #0]
 804461e:	68fb      	ldr	r3, [r7, #12]
 8044620:	3304      	adds	r3, #4
 8044622:	4619      	mov	r1, r3
 8044624:	4610      	mov	r0, r2
 8044626:	f7fe f91a 	bl	804285e <vListInsert>
 804462a:	e012      	b.n	8044652 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 804462c:	687a      	ldr	r2, [r7, #4]
 804462e:	683b      	ldr	r3, [r7, #0]
 8044630:	429a      	cmp	r2, r3
 8044632:	d206      	bcs.n	8044642 <prvInsertTimerInActiveList+0x62>
 8044634:	68ba      	ldr	r2, [r7, #8]
 8044636:	683b      	ldr	r3, [r7, #0]
 8044638:	429a      	cmp	r2, r3
 804463a:	d302      	bcc.n	8044642 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 804463c:	2301      	movs	r3, #1
 804463e:	617b      	str	r3, [r7, #20]
 8044640:	e007      	b.n	8044652 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8044642:	4b07      	ldr	r3, [pc, #28]	; (8044660 <prvInsertTimerInActiveList+0x80>)
 8044644:	681a      	ldr	r2, [r3, #0]
 8044646:	68fb      	ldr	r3, [r7, #12]
 8044648:	3304      	adds	r3, #4
 804464a:	4619      	mov	r1, r3
 804464c:	4610      	mov	r0, r2
 804464e:	f7fe f906 	bl	804285e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8044652:	697b      	ldr	r3, [r7, #20]
}
 8044654:	4618      	mov	r0, r3
 8044656:	3718      	adds	r7, #24
 8044658:	46bd      	mov	sp, r7
 804465a:	bd80      	pop	{r7, pc}
 804465c:	2001b648 	.word	0x2001b648
 8044660:	2001b644 	.word	0x2001b644

08044664 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8044664:	b580      	push	{r7, lr}
 8044666:	b08c      	sub	sp, #48	; 0x30
 8044668:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 804466a:	e0b0      	b.n	80447ce <prvProcessReceivedCommands+0x16a>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 804466c:	68bb      	ldr	r3, [r7, #8]
 804466e:	2b00      	cmp	r3, #0
 8044670:	da10      	bge.n	8044694 <prvProcessReceivedCommands+0x30>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8044672:	f107 0308 	add.w	r3, r7, #8
 8044676:	3304      	adds	r3, #4
 8044678:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 804467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804467c:	2b00      	cmp	r3, #0
 804467e:	d101      	bne.n	8044684 <prvProcessReceivedCommands+0x20>
 8044680:	b672      	cpsid	i
 8044682:	e7fe      	b.n	8044682 <prvProcessReceivedCommands+0x1e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8044684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8044686:	681b      	ldr	r3, [r3, #0]
 8044688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804468a:	6850      	ldr	r0, [r2, #4]
 804468c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804468e:	6892      	ldr	r2, [r2, #8]
 8044690:	4611      	mov	r1, r2
 8044692:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8044694:	68bb      	ldr	r3, [r7, #8]
 8044696:	2b00      	cmp	r3, #0
 8044698:	f2c0 8098 	blt.w	80447cc <prvProcessReceivedCommands+0x168>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 804469c:	693b      	ldr	r3, [r7, #16]
 804469e:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80446a0:	6a3b      	ldr	r3, [r7, #32]
 80446a2:	695b      	ldr	r3, [r3, #20]
 80446a4:	2b00      	cmp	r3, #0
 80446a6:	d004      	beq.n	80446b2 <prvProcessReceivedCommands+0x4e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80446a8:	6a3b      	ldr	r3, [r7, #32]
 80446aa:	3304      	adds	r3, #4
 80446ac:	4618      	mov	r0, r3
 80446ae:	f7fe f90f 	bl	80428d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80446b2:	1d3b      	adds	r3, r7, #4
 80446b4:	4618      	mov	r0, r3
 80446b6:	f7ff ff73 	bl	80445a0 <prvSampleTimeNow>
 80446ba:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 80446bc:	68bb      	ldr	r3, [r7, #8]
 80446be:	2b09      	cmp	r3, #9
 80446c0:	f200 8085 	bhi.w	80447ce <prvProcessReceivedCommands+0x16a>
 80446c4:	a201      	add	r2, pc, #4	; (adr r2, 80446cc <prvProcessReceivedCommands+0x68>)
 80446c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80446ca:	bf00      	nop
 80446cc:	080446f5 	.word	0x080446f5
 80446d0:	080446f5 	.word	0x080446f5
 80446d4:	080446f5 	.word	0x080446f5
 80446d8:	08044757 	.word	0x08044757
 80446dc:	0804476b 	.word	0x0804476b
 80446e0:	080447a3 	.word	0x080447a3
 80446e4:	080446f5 	.word	0x080446f5
 80446e8:	080446f5 	.word	0x080446f5
 80446ec:	08044757 	.word	0x08044757
 80446f0:	0804476b 	.word	0x0804476b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80446f4:	6a3b      	ldr	r3, [r7, #32]
 80446f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80446fa:	f043 0301 	orr.w	r3, r3, #1
 80446fe:	b2da      	uxtb	r2, r3
 8044700:	6a3b      	ldr	r3, [r7, #32]
 8044702:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8044706:	68fa      	ldr	r2, [r7, #12]
 8044708:	6a3b      	ldr	r3, [r7, #32]
 804470a:	699b      	ldr	r3, [r3, #24]
 804470c:	18d1      	adds	r1, r2, r3
 804470e:	68fb      	ldr	r3, [r7, #12]
 8044710:	69fa      	ldr	r2, [r7, #28]
 8044712:	6a38      	ldr	r0, [r7, #32]
 8044714:	f7ff ff64 	bl	80445e0 <prvInsertTimerInActiveList>
 8044718:	4603      	mov	r3, r0
 804471a:	2b00      	cmp	r3, #0
 804471c:	d057      	beq.n	80447ce <prvProcessReceivedCommands+0x16a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 804471e:	6a3b      	ldr	r3, [r7, #32]
 8044720:	6a1b      	ldr	r3, [r3, #32]
 8044722:	6a38      	ldr	r0, [r7, #32]
 8044724:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8044726:	6a3b      	ldr	r3, [r7, #32]
 8044728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 804472c:	f003 0304 	and.w	r3, r3, #4
 8044730:	2b00      	cmp	r3, #0
 8044732:	d04c      	beq.n	80447ce <prvProcessReceivedCommands+0x16a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8044734:	68fa      	ldr	r2, [r7, #12]
 8044736:	6a3b      	ldr	r3, [r7, #32]
 8044738:	699b      	ldr	r3, [r3, #24]
 804473a:	441a      	add	r2, r3
 804473c:	2300      	movs	r3, #0
 804473e:	9300      	str	r3, [sp, #0]
 8044740:	2300      	movs	r3, #0
 8044742:	2100      	movs	r1, #0
 8044744:	6a38      	ldr	r0, [r7, #32]
 8044746:	f7ff fe27 	bl	8044398 <xTimerGenericCommand>
 804474a:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 804474c:	69bb      	ldr	r3, [r7, #24]
 804474e:	2b00      	cmp	r3, #0
 8044750:	d13d      	bne.n	80447ce <prvProcessReceivedCommands+0x16a>
 8044752:	b672      	cpsid	i
 8044754:	e7fe      	b.n	8044754 <prvProcessReceivedCommands+0xf0>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8044756:	6a3b      	ldr	r3, [r7, #32]
 8044758:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 804475c:	f023 0301 	bic.w	r3, r3, #1
 8044760:	b2da      	uxtb	r2, r3
 8044762:	6a3b      	ldr	r3, [r7, #32]
 8044764:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8044768:	e031      	b.n	80447ce <prvProcessReceivedCommands+0x16a>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 804476a:	6a3b      	ldr	r3, [r7, #32]
 804476c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8044770:	f043 0301 	orr.w	r3, r3, #1
 8044774:	b2da      	uxtb	r2, r3
 8044776:	6a3b      	ldr	r3, [r7, #32]
 8044778:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 804477c:	68fa      	ldr	r2, [r7, #12]
 804477e:	6a3b      	ldr	r3, [r7, #32]
 8044780:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8044782:	6a3b      	ldr	r3, [r7, #32]
 8044784:	699b      	ldr	r3, [r3, #24]
 8044786:	2b00      	cmp	r3, #0
 8044788:	d101      	bne.n	804478e <prvProcessReceivedCommands+0x12a>
 804478a:	b672      	cpsid	i
 804478c:	e7fe      	b.n	804478c <prvProcessReceivedCommands+0x128>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 804478e:	6a3b      	ldr	r3, [r7, #32]
 8044790:	699a      	ldr	r2, [r3, #24]
 8044792:	69fb      	ldr	r3, [r7, #28]
 8044794:	18d1      	adds	r1, r2, r3
 8044796:	69fb      	ldr	r3, [r7, #28]
 8044798:	69fa      	ldr	r2, [r7, #28]
 804479a:	6a38      	ldr	r0, [r7, #32]
 804479c:	f7ff ff20 	bl	80445e0 <prvInsertTimerInActiveList>
					break;
 80447a0:	e015      	b.n	80447ce <prvProcessReceivedCommands+0x16a>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80447a2:	6a3b      	ldr	r3, [r7, #32]
 80447a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80447a8:	f003 0302 	and.w	r3, r3, #2
 80447ac:	2b00      	cmp	r3, #0
 80447ae:	d103      	bne.n	80447b8 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 80447b0:	6a38      	ldr	r0, [r7, #32]
 80447b2:	f7fd feff 	bl	80425b4 <vPortFree>
 80447b6:	e00a      	b.n	80447ce <prvProcessReceivedCommands+0x16a>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80447b8:	6a3b      	ldr	r3, [r7, #32]
 80447ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80447be:	f023 0301 	bic.w	r3, r3, #1
 80447c2:	b2da      	uxtb	r2, r3
 80447c4:	6a3b      	ldr	r3, [r7, #32]
 80447c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80447ca:	e000      	b.n	80447ce <prvProcessReceivedCommands+0x16a>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80447cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80447ce:	4b08      	ldr	r3, [pc, #32]	; (80447f0 <prvProcessReceivedCommands+0x18c>)
 80447d0:	681b      	ldr	r3, [r3, #0]
 80447d2:	f107 0108 	add.w	r1, r7, #8
 80447d6:	2200      	movs	r2, #0
 80447d8:	4618      	mov	r0, r3
 80447da:	f7fe fcc4 	bl	8043166 <xQueueReceive>
 80447de:	4603      	mov	r3, r0
 80447e0:	2b00      	cmp	r3, #0
 80447e2:	f47f af43 	bne.w	804466c <prvProcessReceivedCommands+0x8>
	}
}
 80447e6:	bf00      	nop
 80447e8:	3728      	adds	r7, #40	; 0x28
 80447ea:	46bd      	mov	sp, r7
 80447ec:	bd80      	pop	{r7, pc}
 80447ee:	bf00      	nop
 80447f0:	2001b64c 	.word	0x2001b64c

080447f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80447f4:	b580      	push	{r7, lr}
 80447f6:	b088      	sub	sp, #32
 80447f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80447fa:	e03f      	b.n	804487c <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80447fc:	4b29      	ldr	r3, [pc, #164]	; (80448a4 <prvSwitchTimerLists+0xb0>)
 80447fe:	681b      	ldr	r3, [r3, #0]
 8044800:	68db      	ldr	r3, [r3, #12]
 8044802:	681b      	ldr	r3, [r3, #0]
 8044804:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8044806:	4b27      	ldr	r3, [pc, #156]	; (80448a4 <prvSwitchTimerLists+0xb0>)
 8044808:	681b      	ldr	r3, [r3, #0]
 804480a:	68db      	ldr	r3, [r3, #12]
 804480c:	68db      	ldr	r3, [r3, #12]
 804480e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8044810:	68fb      	ldr	r3, [r7, #12]
 8044812:	3304      	adds	r3, #4
 8044814:	4618      	mov	r0, r3
 8044816:	f7fe f85b 	bl	80428d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 804481a:	68fb      	ldr	r3, [r7, #12]
 804481c:	6a1b      	ldr	r3, [r3, #32]
 804481e:	68f8      	ldr	r0, [r7, #12]
 8044820:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8044822:	68fb      	ldr	r3, [r7, #12]
 8044824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8044828:	f003 0304 	and.w	r3, r3, #4
 804482c:	2b00      	cmp	r3, #0
 804482e:	d025      	beq.n	804487c <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8044830:	68fb      	ldr	r3, [r7, #12]
 8044832:	699b      	ldr	r3, [r3, #24]
 8044834:	693a      	ldr	r2, [r7, #16]
 8044836:	4413      	add	r3, r2
 8044838:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 804483a:	68ba      	ldr	r2, [r7, #8]
 804483c:	693b      	ldr	r3, [r7, #16]
 804483e:	429a      	cmp	r2, r3
 8044840:	d90e      	bls.n	8044860 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8044842:	68fb      	ldr	r3, [r7, #12]
 8044844:	68ba      	ldr	r2, [r7, #8]
 8044846:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8044848:	68fb      	ldr	r3, [r7, #12]
 804484a:	68fa      	ldr	r2, [r7, #12]
 804484c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 804484e:	4b15      	ldr	r3, [pc, #84]	; (80448a4 <prvSwitchTimerLists+0xb0>)
 8044850:	681a      	ldr	r2, [r3, #0]
 8044852:	68fb      	ldr	r3, [r7, #12]
 8044854:	3304      	adds	r3, #4
 8044856:	4619      	mov	r1, r3
 8044858:	4610      	mov	r0, r2
 804485a:	f7fe f800 	bl	804285e <vListInsert>
 804485e:	e00d      	b.n	804487c <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8044860:	2300      	movs	r3, #0
 8044862:	9300      	str	r3, [sp, #0]
 8044864:	2300      	movs	r3, #0
 8044866:	693a      	ldr	r2, [r7, #16]
 8044868:	2100      	movs	r1, #0
 804486a:	68f8      	ldr	r0, [r7, #12]
 804486c:	f7ff fd94 	bl	8044398 <xTimerGenericCommand>
 8044870:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8044872:	687b      	ldr	r3, [r7, #4]
 8044874:	2b00      	cmp	r3, #0
 8044876:	d101      	bne.n	804487c <prvSwitchTimerLists+0x88>
 8044878:	b672      	cpsid	i
 804487a:	e7fe      	b.n	804487a <prvSwitchTimerLists+0x86>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 804487c:	4b09      	ldr	r3, [pc, #36]	; (80448a4 <prvSwitchTimerLists+0xb0>)
 804487e:	681b      	ldr	r3, [r3, #0]
 8044880:	681b      	ldr	r3, [r3, #0]
 8044882:	2b00      	cmp	r3, #0
 8044884:	d1ba      	bne.n	80447fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8044886:	4b07      	ldr	r3, [pc, #28]	; (80448a4 <prvSwitchTimerLists+0xb0>)
 8044888:	681b      	ldr	r3, [r3, #0]
 804488a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 804488c:	4b06      	ldr	r3, [pc, #24]	; (80448a8 <prvSwitchTimerLists+0xb4>)
 804488e:	681b      	ldr	r3, [r3, #0]
 8044890:	4a04      	ldr	r2, [pc, #16]	; (80448a4 <prvSwitchTimerLists+0xb0>)
 8044892:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8044894:	4a04      	ldr	r2, [pc, #16]	; (80448a8 <prvSwitchTimerLists+0xb4>)
 8044896:	697b      	ldr	r3, [r7, #20]
 8044898:	6013      	str	r3, [r2, #0]
}
 804489a:	bf00      	nop
 804489c:	3718      	adds	r7, #24
 804489e:	46bd      	mov	sp, r7
 80448a0:	bd80      	pop	{r7, pc}
 80448a2:	bf00      	nop
 80448a4:	2001b644 	.word	0x2001b644
 80448a8:	2001b648 	.word	0x2001b648

080448ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80448ac:	b580      	push	{r7, lr}
 80448ae:	b082      	sub	sp, #8
 80448b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80448b2:	f7fe f887 	bl	80429c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80448b6:	4b15      	ldr	r3, [pc, #84]	; (804490c <prvCheckForValidListAndQueue+0x60>)
 80448b8:	681b      	ldr	r3, [r3, #0]
 80448ba:	2b00      	cmp	r3, #0
 80448bc:	d120      	bne.n	8044900 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80448be:	4814      	ldr	r0, [pc, #80]	; (8044910 <prvCheckForValidListAndQueue+0x64>)
 80448c0:	f7fd ff7c 	bl	80427bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80448c4:	4813      	ldr	r0, [pc, #76]	; (8044914 <prvCheckForValidListAndQueue+0x68>)
 80448c6:	f7fd ff79 	bl	80427bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80448ca:	4b13      	ldr	r3, [pc, #76]	; (8044918 <prvCheckForValidListAndQueue+0x6c>)
 80448cc:	4a10      	ldr	r2, [pc, #64]	; (8044910 <prvCheckForValidListAndQueue+0x64>)
 80448ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80448d0:	4b12      	ldr	r3, [pc, #72]	; (804491c <prvCheckForValidListAndQueue+0x70>)
 80448d2:	4a10      	ldr	r2, [pc, #64]	; (8044914 <prvCheckForValidListAndQueue+0x68>)
 80448d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80448d6:	2300      	movs	r3, #0
 80448d8:	9300      	str	r3, [sp, #0]
 80448da:	4b11      	ldr	r3, [pc, #68]	; (8044920 <prvCheckForValidListAndQueue+0x74>)
 80448dc:	4a11      	ldr	r2, [pc, #68]	; (8044924 <prvCheckForValidListAndQueue+0x78>)
 80448de:	2110      	movs	r1, #16
 80448e0:	2005      	movs	r0, #5
 80448e2:	f7fe faa2 	bl	8042e2a <xQueueGenericCreateStatic>
 80448e6:	4602      	mov	r2, r0
 80448e8:	4b08      	ldr	r3, [pc, #32]	; (804490c <prvCheckForValidListAndQueue+0x60>)
 80448ea:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80448ec:	4b07      	ldr	r3, [pc, #28]	; (804490c <prvCheckForValidListAndQueue+0x60>)
 80448ee:	681b      	ldr	r3, [r3, #0]
 80448f0:	2b00      	cmp	r3, #0
 80448f2:	d005      	beq.n	8044900 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80448f4:	4b05      	ldr	r3, [pc, #20]	; (804490c <prvCheckForValidListAndQueue+0x60>)
 80448f6:	681b      	ldr	r3, [r3, #0]
 80448f8:	490b      	ldr	r1, [pc, #44]	; (8044928 <prvCheckForValidListAndQueue+0x7c>)
 80448fa:	4618      	mov	r0, r3
 80448fc:	f7fe fdfa 	bl	80434f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8044900:	f7fe f874 	bl	80429ec <vPortExitCritical>
}
 8044904:	bf00      	nop
 8044906:	46bd      	mov	sp, r7
 8044908:	bd80      	pop	{r7, pc}
 804490a:	bf00      	nop
 804490c:	2001b64c 	.word	0x2001b64c
 8044910:	2001b61c 	.word	0x2001b61c
 8044914:	2001b630 	.word	0x2001b630
 8044918:	2001b644 	.word	0x2001b644
 804491c:	2001b648 	.word	0x2001b648
 8044920:	2001b6a8 	.word	0x2001b6a8
 8044924:	2001b658 	.word	0x2001b658
 8044928:	08044a84 	.word	0x08044a84

0804492c <__libc_init_array>:
 804492c:	b570      	push	{r4, r5, r6, lr}
 804492e:	4e0d      	ldr	r6, [pc, #52]	; (8044964 <__libc_init_array+0x38>)
 8044930:	2500      	movs	r5, #0
 8044932:	4c0d      	ldr	r4, [pc, #52]	; (8044968 <__libc_init_array+0x3c>)
 8044934:	1ba4      	subs	r4, r4, r6
 8044936:	10a4      	asrs	r4, r4, #2
 8044938:	42a5      	cmp	r5, r4
 804493a:	d109      	bne.n	8044950 <__libc_init_array+0x24>
 804493c:	4e0b      	ldr	r6, [pc, #44]	; (804496c <__libc_init_array+0x40>)
 804493e:	2500      	movs	r5, #0
 8044940:	4c0b      	ldr	r4, [pc, #44]	; (8044970 <__libc_init_array+0x44>)
 8044942:	f000 f82b 	bl	804499c <_init>
 8044946:	1ba4      	subs	r4, r4, r6
 8044948:	10a4      	asrs	r4, r4, #2
 804494a:	42a5      	cmp	r5, r4
 804494c:	d105      	bne.n	804495a <__libc_init_array+0x2e>
 804494e:	bd70      	pop	{r4, r5, r6, pc}
 8044950:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8044954:	3501      	adds	r5, #1
 8044956:	4798      	blx	r3
 8044958:	e7ee      	b.n	8044938 <__libc_init_array+0xc>
 804495a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 804495e:	3501      	adds	r5, #1
 8044960:	4798      	blx	r3
 8044962:	e7f2      	b.n	804494a <__libc_init_array+0x1e>
 8044964:	08044b30 	.word	0x08044b30
 8044968:	08044b30 	.word	0x08044b30
 804496c:	08044b30 	.word	0x08044b30
 8044970:	08044b34 	.word	0x08044b34

08044974 <memcpy>:
 8044974:	1e43      	subs	r3, r0, #1
 8044976:	440a      	add	r2, r1
 8044978:	b510      	push	{r4, lr}
 804497a:	4291      	cmp	r1, r2
 804497c:	d100      	bne.n	8044980 <memcpy+0xc>
 804497e:	bd10      	pop	{r4, pc}
 8044980:	f811 4b01 	ldrb.w	r4, [r1], #1
 8044984:	f803 4f01 	strb.w	r4, [r3, #1]!
 8044988:	e7f7      	b.n	804497a <memcpy+0x6>

0804498a <memset>:
 804498a:	4402      	add	r2, r0
 804498c:	4603      	mov	r3, r0
 804498e:	4293      	cmp	r3, r2
 8044990:	d100      	bne.n	8044994 <memset+0xa>
 8044992:	4770      	bx	lr
 8044994:	f803 1b01 	strb.w	r1, [r3], #1
 8044998:	e7f9      	b.n	804498e <memset+0x4>
	...

0804499c <_init>:
 804499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804499e:	bf00      	nop
 80449a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80449a2:	bc08      	pop	{r3}
 80449a4:	469e      	mov	lr, r3
 80449a6:	4770      	bx	lr

080449a8 <_fini>:
 80449a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80449aa:	bf00      	nop
 80449ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80449ae:	bc08      	pop	{r3}
 80449b0:	469e      	mov	lr, r3
 80449b2:	4770      	bx	lr
 80449b4:	0000      	movs	r0, r0
	...

080449b8 <__SecureContext_LoadContext_veneer>:
 80449b8:	b401      	push	{r0}
 80449ba:	4802      	ldr	r0, [pc, #8]	; (80449c4 <__SecureContext_LoadContext_veneer+0xc>)
 80449bc:	4684      	mov	ip, r0
 80449be:	bc01      	pop	{r0}
 80449c0:	4760      	bx	ip
 80449c2:	bf00      	nop
 80449c4:	0c03e029 	.word	0x0c03e029

080449c8 <__SecureContext_AllocateContext_veneer>:
 80449c8:	b401      	push	{r0}
 80449ca:	4802      	ldr	r0, [pc, #8]	; (80449d4 <__SecureContext_AllocateContext_veneer+0xc>)
 80449cc:	4684      	mov	ip, r0
 80449ce:	bc01      	pop	{r0}
 80449d0:	4760      	bx	ip
 80449d2:	bf00      	nop
 80449d4:	0c03e011 	.word	0x0c03e011

080449d8 <__SecureContext_Init_veneer>:
 80449d8:	b401      	push	{r0}
 80449da:	4802      	ldr	r0, [pc, #8]	; (80449e4 <__SecureContext_Init_veneer+0xc>)
 80449dc:	4684      	mov	ip, r0
 80449de:	bc01      	pop	{r0}
 80449e0:	4760      	bx	ip
 80449e2:	bf00      	nop
 80449e4:	0c03e021 	.word	0x0c03e021

080449e8 <__SecureContext_FreeContext_veneer>:
 80449e8:	b401      	push	{r0}
 80449ea:	4802      	ldr	r0, [pc, #8]	; (80449f4 <__SecureContext_FreeContext_veneer+0xc>)
 80449ec:	4684      	mov	ip, r0
 80449ee:	bc01      	pop	{r0}
 80449f0:	4760      	bx	ip
 80449f2:	bf00      	nop
 80449f4:	0c03e049 	.word	0x0c03e049

080449f8 <__SECURE_SystemCoreClockUpdate_veneer>:
 80449f8:	b401      	push	{r0}
 80449fa:	4802      	ldr	r0, [pc, #8]	; (8044a04 <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 80449fc:	4684      	mov	ip, r0
 80449fe:	bc01      	pop	{r0}
 8044a00:	4760      	bx	ip
 8044a02:	bf00      	nop
 8044a04:	0c03e009 	.word	0x0c03e009

08044a08 <__SECURE_RegisterCallback_veneer>:
 8044a08:	b401      	push	{r0}
 8044a0a:	4802      	ldr	r0, [pc, #8]	; (8044a14 <__SECURE_RegisterCallback_veneer+0xc>)
 8044a0c:	4684      	mov	ip, r0
 8044a0e:	bc01      	pop	{r0}
 8044a10:	4760      	bx	ip
 8044a12:	bf00      	nop
 8044a14:	0c03e031 	.word	0x0c03e031

08044a18 <__SecureInit_DePrioritizeNSExceptions_veneer>:
 8044a18:	b401      	push	{r0}
 8044a1a:	4802      	ldr	r0, [pc, #8]	; (8044a24 <__SecureInit_DePrioritizeNSExceptions_veneer+0xc>)
 8044a1c:	4684      	mov	ip, r0
 8044a1e:	bc01      	pop	{r0}
 8044a20:	4760      	bx	ip
 8044a22:	bf00      	nop
 8044a24:	0c03e001 	.word	0x0c03e001

08044a28 <__SecureContext_SaveContext_veneer>:
 8044a28:	b401      	push	{r0}
 8044a2a:	4802      	ldr	r0, [pc, #8]	; (8044a34 <__SecureContext_SaveContext_veneer+0xc>)
 8044a2c:	4684      	mov	ip, r0
 8044a2e:	bc01      	pop	{r0}
 8044a30:	4760      	bx	ip
 8044a32:	bf00      	nop
 8044a34:	0c03e039 	.word	0x0c03e039

08044a38 <__SECURE_LEDToggle_veneer>:
 8044a38:	b401      	push	{r0}
 8044a3a:	4802      	ldr	r0, [pc, #8]	; (8044a44 <__SECURE_LEDToggle_veneer+0xc>)
 8044a3c:	4684      	mov	ip, r0
 8044a3e:	bc01      	pop	{r0}
 8044a40:	4760      	bx	ip
 8044a42:	bf00      	nop
 8044a44:	0c03e019 	.word	0x0c03e019
